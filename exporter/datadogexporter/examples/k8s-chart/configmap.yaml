apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-agent-conf
  labels:
    app: opentelemetry
    component: otel-agent-conf
data:
  otel-agent-config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      # The hostmetrics receiver is required to get correct infrastructure metrics in Datadog.
      hostmetrics:
        collection_interval: 10s
        scrapers:
          paging:
            metrics:
              system.paging.utilization:
                enabled: true
          cpu:
            metrics:
              system.cpu.utilization:
                enabled: true
          disk:
          filesystem:
            metrics:
              system.filesystem.utilization:
                enabled: true
          load:
          memory:
          network:
          processes:

      filelog:
        include_file_path: true
        poll_interval: 500ms
        include:
          # This will ensure that logs from the following path are collected.
          - /var/log/**/*otel-collector*/*.log
      # # Uncomment this block below to get access to system metrics regarding
      # # the OpenTelemetry Collector and its environment, such as spans or metrics
      # # processed, running and sent, queue sizes, uptime, k8s information
      # # and much more.
      #
      # # The prometheus receiver scrapes essential metrics regarding the OpenTelemetry Collector.
      # prometheus:
      #   config:
      #     scrape_configs:
      #     - job_name: 'otelcol'
      #       scrape_interval: 10s
      #       static_configs:
      #       - targets: ['0.0.0.0:8888']
    exporters:
      datadog:
        api:
          key: <YOUR_API_KEY_HERE>
          site: datadoghq.com # Change this to your site if not using the default
    processors:
      resourcedetection:
        # ensures host.name and other important resource tags
        # get picked up
        detectors: [system, env, docker]
        timeout: 5s
        override: false
      # adds various tags related to k8s
      k8sattributes:
        passthrough: false
        auth_type: "serviceAccount"

        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip

        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.node.name
            - k8s.namespace.name
            - k8s.pod.start_time
            - k8s.replicaset.name
            - k8s.replicaset.uid
            - k8s.daemonset.name
            - k8s.daemonset.uid
            - k8s.job.name
            - k8s.job.uid
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.statefulset.uid
            - container.image.name
            - container.image.tag
            - container.id
            - k8s.container.name
            - container.image.name
            - container.image.tag
            - container.id

          labels:
          - tag_name: kube_app_name
            key: app.kubernetes.io/name
            from: pod
          - tag_name: kube_app_instance
            key: app.kubernetes.io/instance
            from: pod
          - tag_name: kube_app_version
            key: app.kubernetes.io/version
            from: pod
          - tag_name: kube_app_component
            key: app.kubernetes.io/component
            from: pod
          - tag_name: kube_app_part_of
            key: app.kubernetes.io/part-of
            from: pod
          - tag_name: kube_app_managed_by
            key: app.kubernetes.io/managed-by
            from: pod

      batch:
        # Datadog APM Intake limit is 3.2MB. Let's make sure the batches do not
        # go over that.
        send_batch_max_size: 1000
        send_batch_size: 100
        timeout: 10s
    service:
      # This will make the collector output logs in JSON format
      telemetry:
        logs:
          encoding: "json"
          initial_fields:
            # Add the service field to every log line. It can be used for filtering in Datadog.
            service: "otel-collector"
      pipelines:
        metrics:
          receivers: [hostmetrics, otlp]
          processors: [resourcedetection, k8sattributes, batch]
          exporters: [datadog]
        traces:
          receivers: [otlp]
          processors: [resourcedetection, k8sattributes, batch]
          exporters: [datadog]
        logs:
          receivers: [filelog]
          processors: [batch]
          exporters: [datadog]
