// Code generated by mdatagen. DO NOT EDIT.

package metadatatest

import (
	"context"
	"testing"

	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/otel/sdk/metric/metricdata"
	"go.opentelemetry.io/otel/sdk/metric/metricdata/metricdatatest"

	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/groupbytraceprocessor/internal/metadata"

	"go.opentelemetry.io/collector/component/componenttest"
)

func TestSetupTelemetry(t *testing.T) {
	testTel := componenttest.NewTelemetry()
	tb, err := metadata.NewTelemetryBuilder(testTel.NewTelemetrySettings())
	require.NoError(t, err)
	defer tb.Shutdown()
	tb.ProcessorGroupbytraceConfNumTraces.Record(context.Background(), 1)
	tb.ProcessorGroupbytraceEventLatency.Record(context.Background(), 1)
	tb.ProcessorGroupbytraceIncompleteReleases.Add(context.Background(), 1)
	tb.ProcessorGroupbytraceNumEventsInQueue.Record(context.Background(), 1)
	tb.ProcessorGroupbytraceNumTracesInMemory.Record(context.Background(), 1)
	tb.ProcessorGroupbytraceSpansReleased.Add(context.Background(), 1)
	tb.ProcessorGroupbytraceTracesEvicted.Add(context.Background(), 1)
	tb.ProcessorGroupbytraceTracesReleased.Add(context.Background(), 1)
	AssertEqualProcessorGroupbytraceConfNumTraces(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualProcessorGroupbytraceEventLatency(t, testTel,
		[]metricdata.HistogramDataPoint[int64]{{}}, metricdatatest.IgnoreValue(),
		metricdatatest.IgnoreTimestamp())
	AssertEqualProcessorGroupbytraceIncompleteReleases(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualProcessorGroupbytraceNumEventsInQueue(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualProcessorGroupbytraceNumTracesInMemory(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualProcessorGroupbytraceSpansReleased(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualProcessorGroupbytraceTracesEvicted(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualProcessorGroupbytraceTracesReleased(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())

	require.NoError(t, testTel.Shutdown(context.Background()))
}
