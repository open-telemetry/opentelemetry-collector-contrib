// Code generated by mdatagen. DO NOT EDIT.

package metadatatest

import (
	"context"
	"testing"

	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/otel/sdk/metric/metricdata"
	"go.opentelemetry.io/otel/sdk/metric/metricdata/metricdatatest"

	"github.com/open-telemetry/opentelemetry-collector-contrib/processor/k8sattributesprocessor/internal/metadata"

	"go.opentelemetry.io/collector/component/componenttest"
)

func TestSetupTelemetry(t *testing.T) {
	testTel := componenttest.NewTelemetry()
	tb, err := metadata.NewTelemetryBuilder(testTel.NewTelemetrySettings())
	require.NoError(t, err)
	defer tb.Shutdown()
	tb.OtelsvcK8sIPLookupMiss.Add(context.Background(), 1)
	tb.OtelsvcK8sNamespaceAdded.Add(context.Background(), 1)
	tb.OtelsvcK8sNamespaceDeleted.Add(context.Background(), 1)
	tb.OtelsvcK8sNamespaceUpdated.Add(context.Background(), 1)
	tb.OtelsvcK8sNodeAdded.Add(context.Background(), 1)
	tb.OtelsvcK8sNodeDeleted.Add(context.Background(), 1)
	tb.OtelsvcK8sNodeUpdated.Add(context.Background(), 1)
	tb.OtelsvcK8sPodAdded.Add(context.Background(), 1)
	tb.OtelsvcK8sPodDeleted.Add(context.Background(), 1)
	tb.OtelsvcK8sPodTableSize.Record(context.Background(), 1)
	tb.OtelsvcK8sPodUpdated.Add(context.Background(), 1)
	tb.OtelsvcK8sReplicasetAdded.Add(context.Background(), 1)
	tb.OtelsvcK8sReplicasetDeleted.Add(context.Background(), 1)
	tb.OtelsvcK8sReplicasetUpdated.Add(context.Background(), 1)
	AssertEqualOtelsvcK8sIPLookupMiss(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sNamespaceAdded(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sNamespaceDeleted(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sNamespaceUpdated(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sNodeAdded(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sNodeDeleted(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sNodeUpdated(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sPodAdded(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sPodDeleted(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sPodTableSize(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sPodUpdated(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sReplicasetAdded(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sReplicasetDeleted(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualOtelsvcK8sReplicasetUpdated(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())

	require.NoError(t, testTel.Shutdown(context.Background()))
}
