// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/component"
)

func TestTypeConstant(t *testing.T) {
	assert.Equal(t, "enrichment", Type.String())
	expectedType := component.MustNewType("enrichment")
	assert.Equal(t, expectedType, Type)
}

func TestScopeName(t *testing.T) {
	expectedScope := "github.com/open-telemetry/opentelemetry-collector-contrib/processor/enrichmentprocessor"
	assert.Equal(t, expectedScope, ScopeName)
}

func TestStabilityLevels(t *testing.T) {
	tests := []struct {
		name      string
		stability component.StabilityLevel
		expected  component.StabilityLevel
	}{
		{
			name:      "traces stability",
			stability: TracesStability,
			expected:  component.StabilityLevelAlpha,
		},
		{
			name:      "metrics stability",
			stability: MetricsStability,
			expected:  component.StabilityLevelAlpha,
		},
		{
			name:      "logs stability",
			stability: LogsStability,
			expected:  component.StabilityLevelAlpha,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equal(t, tt.expected, tt.stability)
		})
	}
}

func TestComponentConstants(t *testing.T) {
	// Verify that the constants are properly defined and accessible
	assert.NotNil(t, Type)
	assert.NotEmpty(t, ScopeName)
	assert.NotEmpty(t, TracesStability.String())
	assert.NotEmpty(t, MetricsStability.String())
	assert.NotEmpty(t, LogsStability.String())
}

func TestTypeCreation(t *testing.T) {
	// Test that we can create a new type using the same name
	newType, err := component.NewType("enrichment")
	assert.NoError(t, err)
	assert.Equal(t, Type, newType)
}

func TestStabilityLevelValues(t *testing.T) {
	// Test that all stability levels are set to Alpha as expected
	stabilityLevels := []component.StabilityLevel{
		TracesStability,
		MetricsStability,
		LogsStability,
	}

	for _, level := range stabilityLevels {
		assert.Equal(t, component.StabilityLevelAlpha, level)
		assert.True(t, level.LogMessage() != "")
	}
}
