// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"errors"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/otel/metric"
)

var (
	ScopeName = "github.com/open-telemetry/opentelemetry-collector-contrib/processor/isolationforestprocessor"
)

// TelemetryBuilder provides an interface for components to report telemetry
// as defined in metadata and user config.
type TelemetryBuilder struct {
	IsolationforestProcessedMetrics        metric.Int64Counter
	IsolationforestAnomaliesDetected      metric.Int64Counter
	IsolationforestModelTrainingDuration  metric.Int64Histogram
}

// TelemetryBuilderOption applies changes to default builder.
type TelemetryBuilderOption interface {
	apply(*TelemetryBuilder)
}

type telemetryBuilderOptionFunc func(mb *TelemetryBuilder)

func (tbof telemetryBuilderOptionFunc) apply(tb *TelemetryBuilder) {
	tbof(tb)
}

// NewTelemetryBuilder creates a new TelemetryBuilder.
func NewTelemetryBuilder(settings component.TelemetrySettings, options ...TelemetryBuilderOption) (*TelemetryBuilder, error) {
	builder := TelemetryBuilder{}
	for _, op := range options {
		op.apply(&builder)
	}
	return builder.Build(settings)
}

// Build the TelemetryBuilder.
func (tb *TelemetryBuilder) Build(settings component.TelemetrySettings) (*TelemetryBuilder, error) {
	var err, errs error
	meter := settings.MeterProvider.Meter(ScopeName)

	tb.IsolationforestProcessedMetrics, err = meter.Int64Counter(
		"isolationforest_processed_metrics",
		metric.WithDescription("Number of metrics processed by the isolation forest processor"),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)

	tb.IsolationforestAnomaliesDetected, err = meter.Int64Counter(
		"isolationforest_anomalies_detected",
		metric.WithDescription("Number of anomalies detected by the isolation forest processor"),
		metric.WithUnit("1"),
	)
	errs = errors.Join(errs, err)

	tb.IsolationforestModelTrainingDuration, err = meter.Int64Histogram(
		"isolationforest_model_training_duration",
		metric.WithDescription("Time taken to train the isolation forest model"),
		metric.WithUnit("ms"),
	)
	errs = errors.Join(errs, err)

	return tb, errs
}
