<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
	<testsuite tests="208" failures="0" time="0.679" name="github.com/open-telemetry/opentelemetry-collector-contrib/pkg/ottl/e2e">
		<properties>
			<property name="go.version" value="go1.24.3"></property>
		</properties>
		<testcase classname="e2e" name="Test_e2e_editors" time="0.010"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/delete_key(attributes,_&#34;http.method&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/delete_matching_keys(attributes,_&#34;^http&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/keep_matching_keys(attributes,_&#34;^http&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/flatten(attributes)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/flatten(attributes,_&#34;test&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/flatten(attributes,_&#34;test&#34;,_resolveConflicts=true)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/flatten(attributes,_depth=1)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/keep_keys(attributes,_[&#34;flags&#34;,_&#34;total.string&#34;])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/limit(attributes,_100,_[])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/limit(attributes,_1,_[&#34;total.string&#34;])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/merge_maps(attributes,_attributes[&#34;foo&#34;],_&#34;insert&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/merge_maps(attributes,_attributes[&#34;foo&#34;],_&#34;update&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/merge_maps(attributes,_attributes[&#34;foo&#34;],_&#34;upsert&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/merge_maps(attributes,_{&#34;map_literal&#34;:_{&#34;list&#34;:_[{&#34;foo&#34;:&#34;bar&#34;},_&#34;test&#34;]}},_&#34;upsert&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/replace_all_matches(attributes,_&#34;*/*&#34;,_&#34;test&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/replace_all_patterns(attributes,_&#34;key&#34;,_&#34;^http&#34;,_&#34;test&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/replace_all_patterns(attributes,_&#34;value&#34;,_&#34;/&#34;,_&#34;@&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/replace_match(attributes[&#34;http.path&#34;],_&#34;*/*&#34;,_&#34;test&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/replace_pattern(attributes[&#34;http.path&#34;],_&#34;/&#34;,_&#34;@&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/replace_pattern(attributes[&#34;http.path&#34;],_&#34;/&#34;,_&#34;@&#34;,_SHA256)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/set(attributes[&#34;test&#34;],_&#34;pass&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/set(attributes[&#34;test&#34;],_nil)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/set(attributes[&#34;test&#34;],_attributes[&#34;unknown&#34;])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/set(attributes[&#34;foo&#34;][&#34;test&#34;],_&#34;pass&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/truncate_all(attributes,_100)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/truncate_all(attributes,_1)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/append(attributes[&#34;foo&#34;][&#34;slice&#34;],_&#34;sample_value&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/append(attributes[&#34;foo&#34;][&#34;flags&#34;],_&#34;sample_value&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/append(attributes[&#34;foo&#34;][&#34;slice&#34;],_values=[5,6])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_editors/append(attributes[&#34;foo&#34;][&#34;new_slice&#34;],_values=[5,6])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters" time="0.100"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;newOne&#34;],_attributes[1])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;array&#34;][0.0],_&#34;bar&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;array&#34;][ConvertCase(attributes[&#34;A|B|C&#34;],_&#34;upper&#34;)],_&#34;bar&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[ConvertCase(attributes[&#34;A|B|C&#34;],_&#34;upper&#34;)],_&#34;myvalue&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[ConvertCase(attributes[attributes[&#34;flags&#34;]],_&#34;upper&#34;)],_&#34;myvalue&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[attributes[&#34;flags&#34;]],_&#34;something33&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[attributes[attributes[&#34;flags&#34;]]],_&#34;something2&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(body,_attributes[&#34;things&#34;][Len(attributes[&#34;things&#34;])_-_1][&#34;name&#34;])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(body,_attributes[&#34;things&#34;][attributes[&#34;int_value&#34;]_+_1][&#34;name&#34;])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(body,_attributes[attributes[&#34;foo&#34;][attributes[&#34;slice&#34;]][attributes[&#34;int_value&#34;]_+_1_-_1]])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(body,_attributes[attributes[&#34;foo&#34;][attributes[&#34;slice&#34;]][attributes[&#34;int_value&#34;]]])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(resource.attributes[attributes[&#34;flags&#34;]],_&#34;something33&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(resource.attributes[resource.attributes[attributes[&#34;flags&#34;]]],_&#34;something33&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[resource.attributes[attributes[&#34;flags&#34;]]],_&#34;something33&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(body,_attributes[&#34;array&#34;])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;array&#34;][attributes[&#34;int_value&#34;]],_3)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Base64Decode(&#34;cGFzcw==&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Decode(&#34;cGFzcw==&#34;,_&#34;base64&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Concat([&#34;A&#34;,&#34;B&#34;],_&#34;:&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ConvertCase(attributes[&#34;http.method&#34;],_&#34;upper&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ConvertCase(&#34;PASS&#34;,_&#34;lower&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ConvertCase(&#34;fooBar&#34;,_&#34;snake&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ConvertCase(&#34;foo_bar&#34;,_&#34;camel&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ToCamelCase(&#34;foo_bar&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ToSnakeCase(&#34;fooBar&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ToUpperCase(attributes[&#34;http.method&#34;]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ToLowerCase(&#34;PASS&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ConvertAttributesToElementsXML(&#34;&lt;Log_id=\&#34;1\&#34;&gt;&lt;Message&gt;This_is_a_log_message!&lt;/Message&gt;&lt;/Log&gt;&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(body,_ConvertTextToElementsXML(&#34;&lt;a&gt;&lt;b/&gt;foo&lt;/a&gt;&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(body,_ConvertTextToElementsXML(&#34;&lt;a&gt;&lt;b/&gt;foo&lt;/a&gt;&lt;c&gt;&lt;b/&gt;bar&lt;/c&gt;&#34;,_&#34;/a&#34;,_&#34;custom&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseInt(&#34;0xAF&#34;,_0))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseInt(&#34;12345&#34;,_10))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseInt(&#34;AF&#34;,_16))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Double(1.0))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Double(&#34;1&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Double(true))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Double(1))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_Time(&#34;10&#34;,_&#34;%M&#34;)_-_Time(&#34;01&#34;,_&#34;%M&#34;)_&lt;_Duration(&#34;10m&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ExtractPatterns(&#34;aa123bb&#34;,_&#34;(?P&lt;numbers&gt;\\d+)&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ExtractGrokPatterns(&#34;http://user:password@example.com:80/path?query=string&#34;,_&#34;%{ELB_URI}&#34;,_true))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_FNV(&#34;pass&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Format(&#34;%03d-%s&#34;,_[7,_&#34;test&#34;]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Hour(Time(&#34;12&#34;,_&#34;%H&#34;)))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Hours(Duration(&#34;90m&#34;)))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_InsertXML(&#34;&lt;a&gt;&lt;/a&gt;&#34;,_&#34;/a&#34;,_&#34;&lt;b&gt;&lt;/b&gt;&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Int(1.0))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Int(&#34;1&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Int(true))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Int(1))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_GetXML(&#34;&lt;a&gt;&lt;b&gt;1&lt;/b&gt;&lt;c&gt;&lt;b&gt;2&lt;/b&gt;&lt;/c&gt;&lt;/a&gt;&#34;,_&#34;/a//b&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Hex(1.0))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Hex(true))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Hex(12))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Hex(&#34;12&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_IsBool(false)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_IsDouble(1.0)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_IsMap(attributes[&#34;foo&#34;])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_IsList(attributes[&#34;foo&#34;][&#34;slice&#34;])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_IsMatch(&#34;aa123bb&#34;,_&#34;\\d{3}&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_IsString(&#34;&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Len(attributes[&#34;foo&#34;]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Log(1))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_IsValidLuhn(&#34;17893729974&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_IsValidLuhn(17893729975))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_MD5(&#34;pass&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Microseconds(Duration(&#34;1ms&#34;)))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Milliseconds(Duration(&#34;1s&#34;)))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Minutes(Duration(&#34;1h&#34;)))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Murmur3Hash128(&#34;Hello_World&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Murmur3Hash(&#34;Hello_World&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Nanoseconds(Duration(&#34;1ms&#34;)))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_Now()_-_Now()_&lt;_Duration(&#34;1h&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseCSV(&#34;val1;val2;val3&#34;,&#34;header1|header2|header3&#34;,&#34;;&#34;,&#34;|&#34;,&#34;strict&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseCSV(&#34;val1,val2,val3&#34;,&#34;header1|header2|header3&#34;,headerDelimiter=&#34;|&#34;,mode=&#34;strict&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseJSON(&#34;{\&#34;id\&#34;:1}&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseJSON(&#34;[\&#34;value1\&#34;,\&#34;value2\&#34;]&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseKeyValue(&#34;k1=v1_k2=v2&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseKeyValue(&#34;k1!v1_k2!v2&#34;,_&#34;!&#34;,_&#34;_&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseKeyValue(&#34;k1!v1_k2!\&#34;v2__!__v2\&#34;&#34;,_&#34;!&#34;,_&#34;_&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ToKeyValueString(ParseKeyValue(&#34;k1=v1_k2=v2&#34;),_&#34;=&#34;,_&#34;_&#34;,_true))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ToKeyValueString(ParseKeyValue(&#34;k1:v1,k2:v2&#34;,_&#34;:&#34;_,_&#34;,&#34;),_&#34;:&#34;,_&#34;,&#34;,_true))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ToKeyValueString(ParseKeyValue(&#34;k1=v1_k2=v2&#34;),_&#34;!&#34;,_&#34;+&#34;,_true))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ToKeyValueString(ParseKeyValue(&#34;k1=v1_k2=v2=v3&#34;),_&#34;=&#34;,_&#34;_&#34;,_true))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Sort(Values({&#34;key1&#34;:_true,_&#34;key2&#34;:_&#34;value&#34;,_&#34;key3&#34;:_1})))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseSimplifiedXML(&#34;&lt;Log&gt;&lt;id&gt;1&lt;/id&gt;&lt;Message&gt;This_is_a_log_message!&lt;/Message&gt;&lt;/Log&gt;&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_ParseXML(&#34;&lt;Log_id=\&#34;1\&#34;&gt;&lt;Message&gt;This_is_a_log_message!&lt;/Message&gt;&lt;/Log&gt;&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_RemoveXML(&#34;&lt;Log_id=\&#34;1\&#34;&gt;&lt;Message&gt;This_is_a_log_message!&lt;/Message&gt;&lt;/Log&gt;&#34;,_&#34;/Log/Message&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Seconds(Duration(&#34;1m&#34;)))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_SHA1(&#34;pass&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_SHA256(&#34;pass&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_SHA512(&#34;pass&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Sort(Split(attributes[&#34;flags&#34;],_&#34;|&#34;),_&#34;desc&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Sort([true,_false,_false]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Sort([3,_6,_9],_&#34;desc&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Sort([Double(1.5),_Double(10.2),_Double(2.3),_Double(0.5)]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Sort([Int(11),_Double(2.2),_Double(-1)]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Sort([false,_Int(11),_Double(2.2),_&#34;three&#34;]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(span_id,_SpanID(0x0000000000000000))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_String(ProfileID(0x00000000000000000000000000000001))_==_&#34;[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]&#34;" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Split(attributes[&#34;flags&#34;],_&#34;|&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_String(&#34;test&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_String(attributes[&#34;http.method&#34;]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_String(span_id))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_String([1,2,3]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_String(true))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Substring(&#34;pass&#34;,_0,_2))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(trace_id,_TraceID(0x00000000000000000000000000000000))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(time,_TruncateTime(time,_Duration(&#34;1s&#34;)))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;time&#34;],_FormatTime(time,_&#34;%Y-%m-%d&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_UnixMicro(time)_&gt;_0" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_UnixMilli(time)_&gt;_0" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_UnixNano(time)_&gt;_0" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_UnixSeconds(time)_&gt;_0" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_IsString(UUID())" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_IsString(UUIDv7())" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;\\&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;\\\\&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;\\\\\\&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;\\\\\\\\&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_&#34;\&#34;&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/keep_keys(attributes[&#34;foo&#34;],_[&#34;\\&#34;,_&#34;bar&#34;])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_UserAgent(&#34;curl/7.81.0&#34;))" time="0.050"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_SliceToMap(attributes[&#34;things&#34;],_[&#34;name&#34;]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_SliceToMap(attributes[&#34;things&#34;]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_SliceToMap(attributes[&#34;things&#34;],_[&#34;name&#34;],_[&#34;value&#34;]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_{&#34;list&#34;:[{&#34;foo&#34;:&#34;bar&#34;}]})" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes,_{&#34;list&#34;:[{&#34;foo&#34;:&#34;bar&#34;}]})" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;arr&#34;],_[{&#34;list&#34;:[{&#34;foo&#34;:&#34;bar&#34;}]},_{&#34;bar&#34;:&#34;baz&#34;}])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_IsList([{&#34;list&#34;:[{&#34;foo&#34;:&#34;bar&#34;}]},_{&#34;bar&#34;:&#34;baz&#34;}]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_IsMap({&#34;list&#34;:[{&#34;foo&#34;:&#34;bar&#34;}]}))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;test&#34;],_Len([{&#34;list&#34;:[{&#34;foo&#34;:&#34;bar&#34;}]},_{&#34;bar&#34;:&#34;baz&#34;}]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;list&#34;],_Sort(Keys({&#34;foo&#34;:_&#34;bar&#34;,_&#34;baz&#34;:_&#34;foo&#34;})))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;indexof&#34;],_Index(&#34;opentelemetry&#34;,_&#34;telemetry&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;indexof&#34;],_Index(attributes[&#34;slices&#34;],_&#34;name&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;indexof&#34;],_Index(attributes[&#34;slices&#34;],_&#34;slice2&#34;))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_converters/set(attributes[&#34;indexof&#34;],_Index(attributes[&#34;slices&#34;],_attributes[&#34;slices&#34;][2]))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features" time="0.010"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_body_==_&#34;operationB&#34;" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_resource.attributes[&#34;host.name&#34;]_==_&#34;localhost&#34;" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;foo&#34;],_&#34;bar&#34;)_where_attributes[attributes[&#34;flags&#34;]]_!=_nil" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(severity_number,_SEVERITY_NUMBER_TRACE2)_where_severity_number_==_SEVERITY_NUMBER_TRACE" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_HasPrefix(body,_&#34;operation&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_HasSuffix(body,_&#34;tionA&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_trace_id_==_TraceID(0x0102030405060708090a0b0c0d0e0f10)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_IsMatch(body,_&#34;operation[AC]&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_body_==_Concat([&#34;operation&#34;,_&#34;A&#34;],_&#34;&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/merge_maps(attributes,_ParseJSON(&#34;{\&#34;json_test\&#34;:\&#34;pass\&#34;}&#34;),_&#34;insert&#34;)_where_body_==_&#34;operationA&#34;" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_ContainsValue([&#34;hello&#34;,_&#34;world&#34;],_&#34;hello&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_ContainsValue([1,_2,_3,_4],_4)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_&#34;pass&#34;)_where_ContainsValue([1.1,_2.2,_3.3,_4.4],_4.4)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;staging&#34;],_&#34;true&#34;)_where_ContainsValue(attributes[&#34;foo&#34;][&#34;slice&#34;],_&#34;val&#34;)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_attributes[&#34;foo&#34;][&#34;bar&#34;])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;test&#34;],_attributes[&#34;metadata&#34;][&#34;uid&#34;])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(body,_{&#34;_raw&#34;:_body,_&#34;test&#34;:_{&#34;result&#34;:_attributes[&#34;foo&#34;][&#34;bar&#34;],_&#34;time&#34;:_UnixNano(time)}})" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;isMap&#34;],_IsMap({&#34;foo&#34;:_{&#34;bar&#34;:_&#34;baz&#34;,_&#34;test&#34;:_&#34;pass&#34;}}))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_features/set(attributes[&#34;my.environment.2&#34;],_Split(resource.attributes[&#34;host.name&#34;],&#34;h&#34;)[1])" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_statement_sequence" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_statement_sequence/delete_key_of_map_literal" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_statement_sequence/delete_matching_keys_of_map_literal" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_statement_sequence/keep_matching_keys_of_map_literal" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_statement_sequence/flatten_map_literal" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_value_expressions" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_value_expressions/&#34;foo&#34;" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_value_expressions/resource.attributes[&#34;host.name&#34;]" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_value_expressions/SEVERITY_NUMBER_TRACE" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_value_expressions/TraceID(0x0102030405060708090a0b0c0d0e0f10)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_value_expressions/Len(attributes)_+_Len(attributes)" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_value_expressions/Hex(Len(attributes)_+_Len(attributes))" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_value_expressions/attributes[&#34;foo&#34;]" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_value_expressions/attributes[&#34;foo2&#34;]" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_value_expressions/attributes[&#34;foo3&#34;]" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_e2e_ottl_value_expressions/attributes[&#34;things&#34;]" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_ProcessTraces_TraceContext" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_ProcessTraces_TraceContext/set(attributes[&#34;entrypoint-root&#34;],_name)_where_IsRootSpan()" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_ProcessSpanEvents" time="0.000"></testcase>
		<testcase classname="e2e" name="Test_ProcessSpanEvents/set(attributes[&#34;index&#34;],_event_index)" time="0.000"></testcase>
	</testsuite>
</testsuites>
