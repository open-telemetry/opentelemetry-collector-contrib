resourceMetrics:
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.namespace.uid
          value:
            stringValue: feb94a85-d29f-4693-a6d7-ca5206a5141e
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-node-lease
        - key: k8s.namespace.uid
          value:
            stringValue: ff852fe4-f42e-48d7-883d-3df03ab5741c
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-public
        - key: k8s.namespace.uid
          value:
            stringValue: 66be991c-1e7d-4a14-af98-4f421bee9ec4
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.namespace.uid
          value:
            stringValue: 1fdcff4f-01e0-459a-baaa-463b5f52eaa2
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.namespace.uid
          value:
            stringValue: cf6c8796-7d4b-4e61-ae41-9c90207c7c06
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The current phase of namespaces (1 for active and 0 for terminating)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.namespace.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.node.uid
          value:
            stringValue: 080365b3-8b82-48dc-9885-d88364004eb3
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Ready condition status of the node (true=1, false=0, unknown=-1)
            gauge:
              dataPoints:
                - asInt: "1"
                  timeUnixNano: "1000000"
            name: k8s.node.condition_ready
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.cronjob.name
          value:
            stringValue: test-k8scluster-receiver-cronjob
        - key: k8s.cronjob.uid
          value:
            stringValue: 6a3c3e99-5db1-481f-9d5d-782ae9de9f58
        - key: k8s.namespace.name
          value:
            stringValue: default
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The number of actively running jobs for a cronjob
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.cronjob.active_jobs
            unit: '{job}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.daemonset.name
          value:
            stringValue: kindnet
        - key: k8s.daemonset.uid
          value:
            stringValue: 4b389825-8fb0-4c66-a774-c9dfcba9d813
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.current_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod (including nodes currently running the daemon pod)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.desired_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that are running the daemon pod, but are not supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.misscheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.ready_nodes
            unit: '{node}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.daemonset.name
          value:
            stringValue: kube-proxy
        - key: k8s.daemonset.uid
          value:
            stringValue: b88aca8b-5776-4f6a-b1f4-d430f972e7fc
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.current_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod (including nodes currently running the daemon pod)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.desired_scheduled_nodes
            unit: '{node}'
          - description: Number of nodes that are running the daemon pod, but are not supposed to run the daemon pod
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.misscheduled_nodes
            unit: '{node}'
          - description: Number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.daemonset.ready_nodes
            unit: '{node}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.deployment.name
          value:
            stringValue: coredns
        - key: k8s.deployment.uid
          value:
            stringValue: 40f70689-1d8b-4eaf-b1b9-c7f1604ad616
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.available
            unit: '{pod}'
          - description: Number of desired pods in this deployment
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.deployment.name
          value:
            stringValue: local-path-provisioner
        - key: k8s.deployment.uid
          value:
            stringValue: c97a7ce6-7bc2-475b-ad74-ccbd1c464e17
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.available
            unit: '{pod}'
          - description: Number of desired pods in this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.deployment.name
          value:
            stringValue: otelcol-786b94f3
        - key: k8s.deployment.uid
          value:
            stringValue: 6433ed08-d04b-458d-b3db-f526238a1e65
        - key: k8s.namespace.name
          value:
            stringValue: default
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.available
            unit: '{pod}'
          - description: Number of desired pods in this deployment
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.deployment.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.hpa.name
          value:
            stringValue: test-k8scluster-receiver-hpa
        - key: k8s.hpa.uid
          value:
            stringValue: 963572dc-4663-4fb2-930a-e143320a03c3
        - key: k8s.namespace.name
          value:
            stringValue: default
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current number of pod replicas managed by this autoscaler.
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.hpa.current_replicas
            unit: '{pod}'
          - description: Desired number of pod replicas managed by this autoscaler.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.hpa.desired_replicas
            unit: '{pod}'
          - description: Maximum number of replicas to which the autoscaler can scale up.
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.hpa.max_replicas
            unit: '{pod}'
          - description: Minimum number of replicas to which the autoscaler can scale up.
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.hpa.min_replicas
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.job.name
          value:
            stringValue: test-k8scluster-receiver-cronjob-28839770
        - key: k8s.job.uid
          value:
            stringValue: a38da134-af71-4bc1-a585-c9e0342f9aab
        - key: k8s.namespace.name
          value:
            stringValue: default
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The number of actively running pods for a job
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.active_pods
            unit: '{pod}'
          - description: The desired number of successfully finished pods the job should be run with
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.desired_successful_pods
            unit: '{pod}'
          - description: The number of pods which reached phase Failed for a job
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.failed_pods
            unit: '{pod}'
          - description: The max desired number of pods the job should run at any given time
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.max_parallel_pods
            unit: '{pod}'
          - description: The number of pods which reached phase Succeeded for a job
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.successful_pods
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.job.name
          value:
            stringValue: test-k8scluster-receiver-cronjob-28839771
        - key: k8s.job.uid
          value:
            stringValue: 37a9e0cc-5315-4e89-bb2b-5221849ff483
        - key: k8s.namespace.name
          value:
            stringValue: default
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The number of actively running pods for a job
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.active_pods
            unit: '{pod}'
          - description: The desired number of successfully finished pods the job should be run with
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.desired_successful_pods
            unit: '{pod}'
          - description: The number of pods which reached phase Failed for a job
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.failed_pods
            unit: '{pod}'
          - description: The max desired number of pods the job should run at any given time
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.max_parallel_pods
            unit: '{pod}'
          - description: The number of pods which reached phase Succeeded for a job
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.successful_pods
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.job.name
          value:
            stringValue: test-k8scluster-receiver-job
        - key: k8s.job.uid
          value:
            stringValue: b7ecbf9e-8e1a-4d70-beda-aab183645382
        - key: k8s.namespace.name
          value:
            stringValue: default
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The number of actively running pods for a job
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.active_pods
            unit: '{pod}'
          - description: The desired number of successfully finished pods the job should be run with
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.desired_successful_pods
            unit: '{pod}'
          - description: The number of pods which reached phase Failed for a job
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.failed_pods
            unit: '{pod}'
          - description: The max desired number of pods the job should run at any given time
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.max_parallel_pods
            unit: '{pod}'
          - description: The number of pods which reached phase Succeeded for a job
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.job.successful_pods
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.replicaset.name
          value:
            stringValue: otelcol-786b94f3-67cf69944f
        - key: k8s.replicaset.uid
          value:
            stringValue: d532dd9c-0490-4f85-be78-fd21d8a1b56f
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.available
            unit: '{pod}'
          - description: Number of desired pods in this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.statefulset.name
          value:
            stringValue: test-k8scluster-receiver-statefulset
        - key: k8s.statefulset.uid
          value:
            stringValue: 5ceb9f10-fc64-4d70-b6f8-228b4a0cfd3c
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: The number of pods created by the StatefulSet controller from the StatefulSet version
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.statefulset.current_pods
            unit: '{pod}'
          - description: Number of desired pods in the stateful set (the `spec.replicas` field)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.statefulset.desired_pods
            unit: '{pod}'
          - description: Number of pods created by the stateful set that have the `Ready` condition
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.statefulset.ready_pods
            unit: '{pod}'
          - description: Number of pods created by the StatefulSet controller from the StatefulSet version
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.statefulset.updated_pods
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.replicaset.name
          value:
            stringValue: coredns-7db6d8ff4d
        - key: k8s.replicaset.uid
          value:
            stringValue: 2c8fee82-58d4-46c4-ae5e-81afcc5f9948
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this replicaset
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.available
            unit: '{pod}'
          - description: Number of desired pods in this replicaset
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.replicaset.name
          value:
            stringValue: local-path-provisioner-988d74bc
        - key: k8s.replicaset.uid
          value:
            stringValue: e58f8ba2-8df8-425e-8a2a-c07cf351bbd8
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Total number of available pods (ready for at least minReadySeconds) targeted by this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.available
            unit: '{pod}'
          - description: Number of desired pods in this replicaset
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.replicaset.desired
            unit: '{pod}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: otelcol-786b94f3-67cf69944f-6zv25
        - key: k8s.pod.uid
          value:
            stringValue: 1fb8be2b-ae32-41c2-a172-e6cb9beb7c37
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: test-k8scluster-receiver-cronjob-28839770-9pp7g
        - key: k8s.pod.uid
          value:
            stringValue: e388cfa8-06c3-47b6-a7a6-113d7cdda849
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: test-k8scluster-receiver-cronjob-28839771-llccr
        - key: k8s.pod.uid
          value:
            stringValue: 0c2351b3-842c-4632-95c2-e7b061128a98
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: test-k8scluster-receiver-job-bzjrh
        - key: k8s.pod.uid
          value:
            stringValue: 7e8bdace-4bce-4750-bd8c-d7359bb3e56b
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: test-k8scluster-receiver-statefulset-0
        - key: k8s.pod.uid
          value:
            stringValue: f1ea5486-77b7-41c6-a3be-d03650011801
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-7db6d8ff4d-5kh78
        - key: k8s.pod.uid
          value:
            stringValue: 2c5b60e0-a01e-4312-8818-d85f94ab841e
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-7db6d8ff4d-p89tc
        - key: k8s.pod.uid
          value:
            stringValue: f3494708-493a-4f0f-965c-dcedfdca253f
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: etcd-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 40e8f13b-bec6-4dae-98d9-fd86939dfc4c
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kindnet-qwzhw
        - key: k8s.pod.uid
          value:
            stringValue: 955e1f8c-2fe3-4a1d-85e6-31ff7410dc00
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-apiserver-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: d2032a9e-8c7c-4d9c-bbcb-526bd1a7b4f7
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-controller-manager-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: e3e6d44a-5bc6-4687-85f1-37eb42c42c05
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-kktz6
        - key: k8s.pod.uid
          value:
            stringValue: c347e316-1bab-4b4d-bc37-4f526fca19a4
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-scheduler-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 991bbf5d-d6b9-4e33-8954-2a5f3505ff2d
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: local-path-provisioner-988d74bc-c2wx7
        - key: k8s.pod.uid
          value:
            stringValue: 1169e7ae-031e-4535-bb94-aee23b0b7df3
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Current phase of the pod (1 - Pending, 2 - Running, 3 - Succeeded, 4 - Failed, 5 - Unknown)
            gauge:
              dataPoints:
                - asInt: "2"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.pod.phase
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 10c9bec31ac94fc58e65ce5ed809455727eee9daae8ea80668990e848a7e7da0
        - key: container.image.name
          value:
            stringValue: docker.io/library/alpine
        - key: container.image.tag
          value:
            stringValue: latest
        - key: k8s.container.name
          value:
            stringValue: alpine
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: test-k8scluster-receiver-cronjob-28839771-llccr
        - key: k8s.pod.uid
          value:
            stringValue: 0c2351b3-842c-4632-95c2-e7b061128a98
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 1f493fa217d539d5b74ffc4579e887f904f630d320105a2b83a987105342ae80
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-proxy-arm64
        - key: container.image.tag
          value:
            stringValue: v1.30.0
        - key: k8s.container.name
          value:
            stringValue: kube-proxy
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-proxy-kktz6
        - key: k8s.pod.uid
          value:
            stringValue: c347e316-1bab-4b4d-bc37-4f526fca19a4
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 2cb1cb272a301a00f50020c3e4751bfa9a281496a6dc35f02a5546451e894e93
        - key: container.image.name
          value:
            stringValue: docker.io/library/nginx
        - key: container.image.tag
          value:
            stringValue: latest
        - key: k8s.container.name
          value:
            stringValue: nginx
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: test-k8scluster-receiver-statefulset-0
        - key: k8s.pod.uid
          value:
            stringValue: f1ea5486-77b7-41c6-a3be-d03650011801
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 567cd0ad83d68987dfb4dbffd056732b25bd2fc89e912605c16a5d1a4cd2b54c
        - key: container.image.name
          value:
            stringValue: docker.io/library/alpine
        - key: container.image.tag
          value:
            stringValue: latest
        - key: k8s.container.name
          value:
            stringValue: alpine
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: test-k8scluster-receiver-job-bzjrh
        - key: k8s.pod.uid
          value:
            stringValue: 7e8bdace-4bce-4750-bd8c-d7359bb3e56b
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 6af7be5c276ef225d046ad0de442ee450c39122a12991f9da82c9629f949967b
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/coredns/coredns
        - key: container.image.tag
          value:
            stringValue: v1.11.1
        - key: k8s.container.name
          value:
            stringValue: coredns
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-7db6d8ff4d-5kh78
        - key: k8s.pod.uid
          value:
            stringValue: 2c5b60e0-a01e-4312-8818-d85f94ab841e
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "178257920"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "73400320"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 7349de0618283fb11a957febc6689a0fbbfd9b52af1106bb3608bc4278a27ecf
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-scheduler-arm64
        - key: container.image.tag
          value:
            stringValue: v1.30.0
        - key: k8s.container.name
          value:
            stringValue: kube-scheduler
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-scheduler-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 991bbf5d-d6b9-4e33-8954-2a5f3505ff2d
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 9c70b20960c36ddb400607a354058cd7525ec491251379c5aa84c359c5d518d7
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/etcd
        - key: container.image.tag
          value:
            stringValue: 3.5.12-0
        - key: k8s.container.name
          value:
            stringValue: etcd
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: etcd-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: 40e8f13b-bec6-4dae-98d9-fd86939dfc4c
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "104857600"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: 9c9e2d8cc660d21018432215b93bd4b9f26fbb0b0dfe71dca8c7089997cce23e
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/coredns/coredns
        - key: container.image.tag
          value:
            stringValue: v1.11.1
        - key: k8s.container.name
          value:
            stringValue: coredns
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: coredns-7db6d8ff4d-p89tc
        - key: k8s.pod.uid
          value:
            stringValue: f3494708-493a-4f0f-965c-dcedfdca253f
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "178257920"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "73400320"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: acef2130e48fde6137e919c9eebc876435ff8a6a22031754fc1dde00cb6dae92
        - key: container.image.name
          value:
            stringValue: docker.io/kindest/local-path-provisioner
        - key: container.image.tag
          value:
            stringValue: v20240202-8f1494ea
        - key: k8s.container.name
          value:
            stringValue: local-path-provisioner
        - key: k8s.namespace.name
          value:
            stringValue: local-path-storage
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: local-path-provisioner-988d74bc-c2wx7
        - key: k8s.pod.uid
          value:
            stringValue: 1169e7ae-031e-4535-bb94-aee23b0b7df3
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: bd25536854ec1e582f0bb3ac0f79ce761ae97317d9ba1f7b256f3e833bcba862
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-apiserver-arm64
        - key: container.image.tag
          value:
            stringValue: v1.30.0
        - key: k8s.container.name
          value:
            stringValue: kube-apiserver
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-apiserver-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: d2032a9e-8c7c-4d9c-bbcb-526bd1a7b4f7
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.25
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: cc67e9bcb82cbeed83bc8dec9cf2b0c7915d921e793efb0d21da5225dfeb907d
        - key: container.image.name
          value:
            stringValue: registry.k8s.io/kube-controller-manager-arm64
        - key: container.image.tag
          value:
            stringValue: v1.30.0
        - key: k8s.container.name
          value:
            stringValue: kube-controller-manager
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kube-controller-manager-kind-control-plane
        - key: k8s.pod.uid
          value:
            stringValue: e3e6d44a-5bc6-4687-85f1-37eb42c42c05
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.2
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: e14e6f08e774618b74202d19334266e4c65c1feb0b26ef7e8b7807644754f730
        - key: container.image.name
          value:
            stringValue: docker.io/library/otelcontribcol
        - key: container.image.tag
          value:
            stringValue: latest
        - key: k8s.container.name
          value:
            stringValue: opentelemetry-collector
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: otelcol-786b94f3-67cf69944f-6zv25
        - key: k8s.pod.uid
          value:
            stringValue: 1fb8be2b-ae32-41c2-a172-e6cb9beb7c37
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.128
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.128
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "268435456"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "268435456"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: ed3ab86077c3de40d6d9125bf4f25dbf1734c58c9c3a864e5ccc1ce3bcfc1d30
        - key: container.image.name
          value:
            stringValue: docker.io/kindest/kindnetd
        - key: container.image.tag
          value:
            stringValue: v20240202-8f1494ea
        - key: k8s.container.name
          value:
            stringValue: kindnet-cni
        - key: k8s.namespace.name
          value:
            stringValue: kube-system
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: kindnet-qwzhw
        - key: k8s.pod.uid
          value:
            stringValue: 955e1f8c-2fe3-4a1d-85e6-31ff7410dc00
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_limit
            unit: '{cpu}'
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asDouble: 0.1
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.cpu_request
            unit: '{cpu}'
          - description: Maximum resource limit set for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_limit
            unit: By
          - description: Resource requested for the container. See https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.23/#resourcerequirements-v1-core for details
            gauge:
              dataPoints:
                - asInt: "52428800"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.memory_request
            unit: By
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
  - resource:
      attributes:
        - key: container.id
          value:
            stringValue: f01b9f5343f9ba34db396889c75d6128dace385b8f0c7aed2d39866ddd0df826
        - key: container.image.name
          value:
            stringValue: docker.io/library/alpine
        - key: container.image.tag
          value:
            stringValue: latest
        - key: k8s.container.name
          value:
            stringValue: alpine
        - key: k8s.namespace.name
          value:
            stringValue: default
        - key: k8s.node.name
          value:
            stringValue: kind-control-plane
        - key: k8s.pod.name
          value:
            stringValue: test-k8scluster-receiver-cronjob-28839770-9pp7g
        - key: k8s.pod.uid
          value:
            stringValue: e388cfa8-06c3-47b6-a7a6-113d7cdda849
    schemaUrl: https://opentelemetry.io/schemas/1.18.0
    scopeMetrics:
      - metrics:
          - description: Whether a container has passed its readiness probe (0 for no, 1 for yes)
            gauge:
              dataPoints:
                - asInt: "1"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.ready
          - description: How many times the container has restarted in the recent past. This value is pulled directly from the K8s API and the value can go indefinitely high and be reset to 0 at any time depending on how your kubelet is configured to prune dead containers. It is best to not depend too much on the exact value but rather look at it as either == 0, in which case you can conclude there were no restarts in the recent past, or > 0, in which case you can conclude there were restarts in the recent past, and not try and analyze the value beyond that.
            gauge:
              dataPoints:
                - asInt: "0"
                  startTimeUnixNano: "1000000"
                  timeUnixNano: "2000000"
            name: k8s.container.restarts
            unit: '{restart}'
        scope:
          name: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver
          version: latest
