// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationConnectionActiveCountDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationConnectionInactiveCountDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationConnectionRateDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationConnectionTotalDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationConnectionWeightDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationInRateDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationInTotalDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationOutRateDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationOutTotalDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationPacketInRateDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationPacketInTotalDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationPacketOutRateDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsDestinationPacketOutTotalDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val", "rip_address-val", "rip_family-val", "rip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsServiceConnectionRateDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsServiceConnectionTotalDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsServiceInRateDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsServiceInTotalDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsServiceOutRateDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsServiceOutTotalDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsServicePacketInRateDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsServicePacketInTotalDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsServicePacketOutRateDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordIpvsServicePacketOutTotalDataPoint(ts, 1, "sched-val", "netmask-val", "protocol-val", "vip_address-val", "vip_family-val", "vip_port-val")

			res := pcommon.NewResource()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "ipvs.destination.connection.active.count":
					assert.False(t, validatedMetrics["ipvs.destination.connection.active.count"], "Found a duplicate in the metrics slice: ipvs.destination.connection.active.count")
					validatedMetrics["ipvs.destination.connection.active.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of active connections to the destination.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.connection.inactive.count":
					assert.False(t, validatedMetrics["ipvs.destination.connection.inactive.count"], "Found a duplicate in the metrics slice: ipvs.destination.connection.inactive.count")
					validatedMetrics["ipvs.destination.connection.inactive.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of inactive connections to the destination.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.connection.rate":
					assert.False(t, validatedMetrics["ipvs.destination.connection.rate"], "Found a duplicate in the metrics slice: ipvs.destination.connection.rate")
					validatedMetrics["ipvs.destination.connection.rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current connection rate (connections per second) to the destination.", ms.At(i).Description())
					assert.Equal(t, "1/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.connection.total":
					assert.False(t, validatedMetrics["ipvs.destination.connection.total"], "Found a duplicate in the metrics slice: ipvs.destination.connection.total")
					validatedMetrics["ipvs.destination.connection.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Cumulative number of connections to the destination.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.connection.weight":
					assert.False(t, validatedMetrics["ipvs.destination.connection.weight"], "Found a duplicate in the metrics slice: ipvs.destination.connection.weight")
					validatedMetrics["ipvs.destination.connection.weight"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current connection weight to the destination.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.in.rate":
					assert.False(t, validatedMetrics["ipvs.destination.in.rate"], "Found a duplicate in the metrics slice: ipvs.destination.in.rate")
					validatedMetrics["ipvs.destination.in.rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current incoming bytes rate (bytes per second) to the destination.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.in.total":
					assert.False(t, validatedMetrics["ipvs.destination.in.total"], "Found a duplicate in the metrics slice: ipvs.destination.in.total")
					validatedMetrics["ipvs.destination.in.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Cumulative number of incoming bytes to the destination.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.out.rate":
					assert.False(t, validatedMetrics["ipvs.destination.out.rate"], "Found a duplicate in the metrics slice: ipvs.destination.out.rate")
					validatedMetrics["ipvs.destination.out.rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current outgoing bytes rate (bytes per second) from the destination.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.out.total":
					assert.False(t, validatedMetrics["ipvs.destination.out.total"], "Found a duplicate in the metrics slice: ipvs.destination.out.total")
					validatedMetrics["ipvs.destination.out.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Cumulative number of outgoing bytes from the destination.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.packet.in.rate":
					assert.False(t, validatedMetrics["ipvs.destination.packet.in.rate"], "Found a duplicate in the metrics slice: ipvs.destination.packet.in.rate")
					validatedMetrics["ipvs.destination.packet.in.rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current incoming packet rate (packets per second) to the destination.", ms.At(i).Description())
					assert.Equal(t, "1/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.packet.in.total":
					assert.False(t, validatedMetrics["ipvs.destination.packet.in.total"], "Found a duplicate in the metrics slice: ipvs.destination.packet.in.total")
					validatedMetrics["ipvs.destination.packet.in.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Cumulative number of incoming packets to the destination.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.packet.out.rate":
					assert.False(t, validatedMetrics["ipvs.destination.packet.out.rate"], "Found a duplicate in the metrics slice: ipvs.destination.packet.out.rate")
					validatedMetrics["ipvs.destination.packet.out.rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current outgoing packet rate (packets per second) from the destination.", ms.At(i).Description())
					assert.Equal(t, "1/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.destination.packet.out.total":
					assert.False(t, validatedMetrics["ipvs.destination.packet.out.total"], "Found a duplicate in the metrics slice: ipvs.destination.packet.out.total")
					validatedMetrics["ipvs.destination.packet.out.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Cumulative number of outgoing packets from the destination.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_address")
					assert.True(t, ok)
					assert.Equal(t, "rip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_family")
					assert.True(t, ok)
					assert.Equal(t, "rip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rip_port")
					assert.True(t, ok)
					assert.Equal(t, "rip_port-val", attrVal.Str())
				case "ipvs.service.connection.rate":
					assert.False(t, validatedMetrics["ipvs.service.connection.rate"], "Found a duplicate in the metrics slice: ipvs.service.connection.rate")
					validatedMetrics["ipvs.service.connection.rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current connection rate (connections per second) for the service.", ms.At(i).Description())
					assert.Equal(t, "1/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
				case "ipvs.service.connection.total":
					assert.False(t, validatedMetrics["ipvs.service.connection.total"], "Found a duplicate in the metrics slice: ipvs.service.connection.total")
					validatedMetrics["ipvs.service.connection.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Cumulative number of connections for the service.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
				case "ipvs.service.in.rate":
					assert.False(t, validatedMetrics["ipvs.service.in.rate"], "Found a duplicate in the metrics slice: ipvs.service.in.rate")
					validatedMetrics["ipvs.service.in.rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current incoming bytes rate (bytes per second) for the service.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
				case "ipvs.service.in.total":
					assert.False(t, validatedMetrics["ipvs.service.in.total"], "Found a duplicate in the metrics slice: ipvs.service.in.total")
					validatedMetrics["ipvs.service.in.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Cumulative number of incoming bytes for the service.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
				case "ipvs.service.out.rate":
					assert.False(t, validatedMetrics["ipvs.service.out.rate"], "Found a duplicate in the metrics slice: ipvs.service.out.rate")
					validatedMetrics["ipvs.service.out.rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current outgoing bytes rate (bytes per second) for the service.", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
				case "ipvs.service.out.total":
					assert.False(t, validatedMetrics["ipvs.service.out.total"], "Found a duplicate in the metrics slice: ipvs.service.out.total")
					validatedMetrics["ipvs.service.out.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Cumulative number of outgoing bytes for the service.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
				case "ipvs.service.packet.in.rate":
					assert.False(t, validatedMetrics["ipvs.service.packet.in.rate"], "Found a duplicate in the metrics slice: ipvs.service.packet.in.rate")
					validatedMetrics["ipvs.service.packet.in.rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current incoming packet rate (packets per second) for the service.", ms.At(i).Description())
					assert.Equal(t, "1/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
				case "ipvs.service.packet.in.total":
					assert.False(t, validatedMetrics["ipvs.service.packet.in.total"], "Found a duplicate in the metrics slice: ipvs.service.packet.in.total")
					validatedMetrics["ipvs.service.packet.in.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Cumulative number of incoming packets for the service.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
				case "ipvs.service.packet.out.rate":
					assert.False(t, validatedMetrics["ipvs.service.packet.out.rate"], "Found a duplicate in the metrics slice: ipvs.service.packet.out.rate")
					validatedMetrics["ipvs.service.packet.out.rate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current outgoing packet rate (packets per second) for the service.", ms.At(i).Description())
					assert.Equal(t, "1/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
				case "ipvs.service.packet.out.total":
					assert.False(t, validatedMetrics["ipvs.service.packet.out.total"], "Found a duplicate in the metrics slice: ipvs.service.packet.out.total")
					validatedMetrics["ipvs.service.packet.out.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Cumulative number of outgoing packets for the service.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sched")
					assert.True(t, ok)
					assert.Equal(t, "sched-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("netmask")
					assert.True(t, ok)
					assert.Equal(t, "netmask-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("protocol")
					assert.True(t, ok)
					assert.Equal(t, "protocol-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_address")
					assert.True(t, ok)
					assert.Equal(t, "vip_address-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_family")
					assert.True(t, ok)
					assert.Equal(t, "vip_family-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("vip_port")
					assert.True(t, ok)
					assert.Equal(t, "vip_port-val", attrVal.Str())
				}
			}
		})
	}
}
