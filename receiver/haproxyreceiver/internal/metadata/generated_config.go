// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/filter"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for haproxy metrics.
type MetricsConfig struct {
	HaproxyBytesInput           MetricConfig `mapstructure:"haproxy.bytes.input"`
	HaproxyBytesOutput          MetricConfig `mapstructure:"haproxy.bytes.output"`
	HaproxyClientsCanceled      MetricConfig `mapstructure:"haproxy.clients.canceled"`
	HaproxyCompressionBypass    MetricConfig `mapstructure:"haproxy.compression.bypass"`
	HaproxyCompressionCount     MetricConfig `mapstructure:"haproxy.compression.count"`
	HaproxyCompressionInput     MetricConfig `mapstructure:"haproxy.compression.input"`
	HaproxyCompressionOutput    MetricConfig `mapstructure:"haproxy.compression.output"`
	HaproxyConnectionsErrors    MetricConfig `mapstructure:"haproxy.connections.errors"`
	HaproxyConnectionsRate      MetricConfig `mapstructure:"haproxy.connections.rate"`
	HaproxyConnectionsRetries   MetricConfig `mapstructure:"haproxy.connections.retries"`
	HaproxyConnectionsTotal     MetricConfig `mapstructure:"haproxy.connections.total"`
	HaproxyDowntime             MetricConfig `mapstructure:"haproxy.downtime"`
	HaproxyFailedChecks         MetricConfig `mapstructure:"haproxy.failed_checks"`
	HaproxyRequestsDenied       MetricConfig `mapstructure:"haproxy.requests.denied"`
	HaproxyRequestsErrors       MetricConfig `mapstructure:"haproxy.requests.errors"`
	HaproxyRequestsQueued       MetricConfig `mapstructure:"haproxy.requests.queued"`
	HaproxyRequestsRate         MetricConfig `mapstructure:"haproxy.requests.rate"`
	HaproxyRequestsRedispatched MetricConfig `mapstructure:"haproxy.requests.redispatched"`
	HaproxyRequestsTotal        MetricConfig `mapstructure:"haproxy.requests.total"`
	HaproxyResponsesDenied      MetricConfig `mapstructure:"haproxy.responses.denied"`
	HaproxyResponsesErrors      MetricConfig `mapstructure:"haproxy.responses.errors"`
	HaproxyServerSelectedTotal  MetricConfig `mapstructure:"haproxy.server_selected.total"`
	HaproxySessionsAverage      MetricConfig `mapstructure:"haproxy.sessions.average"`
	HaproxySessionsCount        MetricConfig `mapstructure:"haproxy.sessions.count"`
	HaproxySessionsRate         MetricConfig `mapstructure:"haproxy.sessions.rate"`
	HaproxySessionsTotal        MetricConfig `mapstructure:"haproxy.sessions.total"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		HaproxyBytesInput: MetricConfig{
			Enabled: true,
		},
		HaproxyBytesOutput: MetricConfig{
			Enabled: true,
		},
		HaproxyClientsCanceled: MetricConfig{
			Enabled: false,
		},
		HaproxyCompressionBypass: MetricConfig{
			Enabled: false,
		},
		HaproxyCompressionCount: MetricConfig{
			Enabled: false,
		},
		HaproxyCompressionInput: MetricConfig{
			Enabled: false,
		},
		HaproxyCompressionOutput: MetricConfig{
			Enabled: false,
		},
		HaproxyConnectionsErrors: MetricConfig{
			Enabled: true,
		},
		HaproxyConnectionsRate: MetricConfig{
			Enabled: true,
		},
		HaproxyConnectionsRetries: MetricConfig{
			Enabled: true,
		},
		HaproxyConnectionsTotal: MetricConfig{
			Enabled: false,
		},
		HaproxyDowntime: MetricConfig{
			Enabled: false,
		},
		HaproxyFailedChecks: MetricConfig{
			Enabled: false,
		},
		HaproxyRequestsDenied: MetricConfig{
			Enabled: true,
		},
		HaproxyRequestsErrors: MetricConfig{
			Enabled: true,
		},
		HaproxyRequestsQueued: MetricConfig{
			Enabled: true,
		},
		HaproxyRequestsRate: MetricConfig{
			Enabled: true,
		},
		HaproxyRequestsRedispatched: MetricConfig{
			Enabled: true,
		},
		HaproxyRequestsTotal: MetricConfig{
			Enabled: true,
		},
		HaproxyResponsesDenied: MetricConfig{
			Enabled: true,
		},
		HaproxyResponsesErrors: MetricConfig{
			Enabled: true,
		},
		HaproxyServerSelectedTotal: MetricConfig{
			Enabled: true,
		},
		HaproxySessionsAverage: MetricConfig{
			Enabled: true,
		},
		HaproxySessionsCount: MetricConfig{
			Enabled: true,
		},
		HaproxySessionsRate: MetricConfig{
			Enabled: true,
		},
		HaproxySessionsTotal: MetricConfig{
			Enabled: false,
		},
	}
}

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`
	// Experimental: MetricsInclude defines a list of filters for attribute values.
	// If the list is not empty, only metrics with matching resource attribute values will be emitted.
	MetricsInclude []filter.Config `mapstructure:"metrics_include"`
	// Experimental: MetricsExclude defines a list of filters for attribute values.
	// If the list is not empty, metrics with matching resource attribute values will not be emitted.
	// MetricsInclude has higher priority than MetricsExclude.
	MetricsExclude []filter.Config `mapstructure:"metrics_exclude"`

	enabledSetByUser bool
}

func (rac *ResourceAttributeConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(rac)
	if err != nil {
		return err
	}
	rac.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// ResourceAttributesConfig provides config for haproxy resource attributes.
type ResourceAttributesConfig struct {
	HaproxyAddr        ResourceAttributeConfig `mapstructure:"haproxy.addr"`
	HaproxyProxyName   ResourceAttributeConfig `mapstructure:"haproxy.proxy_name"`
	HaproxyServiceName ResourceAttributeConfig `mapstructure:"haproxy.service_name"`
}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		HaproxyAddr: ResourceAttributeConfig{
			Enabled: true,
		},
		HaproxyProxyName: ResourceAttributeConfig{
			Enabled: true,
		},
		HaproxyServiceName: ResourceAttributeConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for haproxy metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsConfig            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesConfig `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsConfig(),
		ResourceAttributes: DefaultResourceAttributesConfig(),
	}
}
