// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/filter"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for rabbitmq metrics.
type MetricsConfig struct {
	RabbitmqConsumerCount              MetricConfig `mapstructure:"rabbitmq.consumer.count"`
	RabbitmqMessageAcknowledged        MetricConfig `mapstructure:"rabbitmq.message.acknowledged"`
	RabbitmqMessageCurrent             MetricConfig `mapstructure:"rabbitmq.message.current"`
	RabbitmqMessageDelivered           MetricConfig `mapstructure:"rabbitmq.message.delivered"`
	RabbitmqMessageDropped             MetricConfig `mapstructure:"rabbitmq.message.dropped"`
	RabbitmqMessagePublished           MetricConfig `mapstructure:"rabbitmq.message.published"`
	RabbitmqNodeDiskFree               MetricConfig `mapstructure:"rabbitmq.node.disk_free"`
	RabbitmqNodeDiskFreeAlarm          MetricConfig `mapstructure:"rabbitmq.node.disk_free_alarm"`
	RabbitmqNodeDiskFreeDetailsRate    MetricConfig `mapstructure:"rabbitmq.node.disk_free_details.rate"`
	RabbitmqNodeDiskFreeLimit          MetricConfig `mapstructure:"rabbitmq.node.disk_free_limit"`
	RabbitmqNodeFdTotal                MetricConfig `mapstructure:"rabbitmq.node.fd_total"`
	RabbitmqNodeFdUsed                 MetricConfig `mapstructure:"rabbitmq.node.fd_used"`
	RabbitmqNodeFdUsedDetailsRate      MetricConfig `mapstructure:"rabbitmq.node.fd_used_details.rate"`
	RabbitmqNodeMemAlarm               MetricConfig `mapstructure:"rabbitmq.node.mem_alarm"`
	RabbitmqNodeMemLimit               MetricConfig `mapstructure:"rabbitmq.node.mem_limit"`
	RabbitmqNodeMemUsed                MetricConfig `mapstructure:"rabbitmq.node.mem_used"`
	RabbitmqNodeMemUsedDetailsRate     MetricConfig `mapstructure:"rabbitmq.node.mem_used_details.rate"`
	RabbitmqNodeProcTotal              MetricConfig `mapstructure:"rabbitmq.node.proc_total"`
	RabbitmqNodeProcUsed               MetricConfig `mapstructure:"rabbitmq.node.proc_used"`
	RabbitmqNodeProcUsedDetailsRate    MetricConfig `mapstructure:"rabbitmq.node.proc_used_details.rate"`
	RabbitmqNodeSocketsTotal           MetricConfig `mapstructure:"rabbitmq.node.sockets_total"`
	RabbitmqNodeSocketsUsed            MetricConfig `mapstructure:"rabbitmq.node.sockets_used"`
	RabbitmqNodeSocketsUsedDetailsRate MetricConfig `mapstructure:"rabbitmq.node.sockets_used_details.rate"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		RabbitmqConsumerCount: MetricConfig{
			Enabled: true,
		},
		RabbitmqMessageAcknowledged: MetricConfig{
			Enabled: true,
		},
		RabbitmqMessageCurrent: MetricConfig{
			Enabled: true,
		},
		RabbitmqMessageDelivered: MetricConfig{
			Enabled: true,
		},
		RabbitmqMessageDropped: MetricConfig{
			Enabled: true,
		},
		RabbitmqMessagePublished: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeDiskFree: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeDiskFreeAlarm: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeDiskFreeDetailsRate: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeDiskFreeLimit: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeFdTotal: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeFdUsed: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeFdUsedDetailsRate: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeMemAlarm: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeMemLimit: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeMemUsed: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeMemUsedDetailsRate: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeProcTotal: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeProcUsed: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeProcUsedDetailsRate: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeSocketsTotal: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeSocketsUsed: MetricConfig{
			Enabled: true,
		},
		RabbitmqNodeSocketsUsedDetailsRate: MetricConfig{
			Enabled: true,
		},
	}
}

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`
	// Experimental: MetricsInclude defines a list of filters for attribute values.
	// If the list is not empty, only metrics with matching resource attribute values will be emitted.
	MetricsInclude []filter.Config `mapstructure:"metrics_include"`
	// Experimental: MetricsExclude defines a list of filters for attribute values.
	// If the list is not empty, metrics with matching resource attribute values will not be emitted.
	// MetricsInclude has higher priority than MetricsExclude.
	MetricsExclude []filter.Config `mapstructure:"metrics_exclude"`

	enabledSetByUser bool
}

func (rac *ResourceAttributeConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(rac)
	if err != nil {
		return err
	}
	rac.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// ResourceAttributesConfig provides config for rabbitmq resource attributes.
type ResourceAttributesConfig struct {
	RabbitmqNodeName  ResourceAttributeConfig `mapstructure:"rabbitmq.node.name"`
	RabbitmqQueueName ResourceAttributeConfig `mapstructure:"rabbitmq.queue.name"`
	RabbitmqVhostName ResourceAttributeConfig `mapstructure:"rabbitmq.vhost.name"`
}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		RabbitmqNodeName: ResourceAttributeConfig{
			Enabled: true,
		},
		RabbitmqQueueName: ResourceAttributeConfig{
			Enabled: true,
		},
		RabbitmqVhostName: ResourceAttributeConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for rabbitmq metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsConfig            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesConfig `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsConfig(),
		ResourceAttributes: DefaultResourceAttributesConfig(),
	}
}
