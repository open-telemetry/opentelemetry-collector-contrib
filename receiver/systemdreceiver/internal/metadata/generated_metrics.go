// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/filter"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

// AttributeActiveState specifies the a value active_state attribute.
type AttributeActiveState int

const (
	_ AttributeActiveState = iota
	AttributeActiveStateActive
	AttributeActiveStateReloading
	AttributeActiveStateInactive
	AttributeActiveStateFailed
	AttributeActiveStateActivating
	AttributeActiveStateDeactivating
	AttributeActiveStateMaintenance
	AttributeActiveStateRefreshing
)

// String returns the string representation of the AttributeActiveState.
func (av AttributeActiveState) String() string {
	switch av {
	case AttributeActiveStateActive:
		return "active"
	case AttributeActiveStateReloading:
		return "reloading"
	case AttributeActiveStateInactive:
		return "inactive"
	case AttributeActiveStateFailed:
		return "failed"
	case AttributeActiveStateActivating:
		return "activating"
	case AttributeActiveStateDeactivating:
		return "deactivating"
	case AttributeActiveStateMaintenance:
		return "maintenance"
	case AttributeActiveStateRefreshing:
		return "refreshing"
	}
	return ""
}

// MapAttributeActiveState is a helper map of string to AttributeActiveState attribute value.
var MapAttributeActiveState = map[string]AttributeActiveState{
	"active":       AttributeActiveStateActive,
	"reloading":    AttributeActiveStateReloading,
	"inactive":     AttributeActiveStateInactive,
	"failed":       AttributeActiveStateFailed,
	"activating":   AttributeActiveStateActivating,
	"deactivating": AttributeActiveStateDeactivating,
	"maintenance":  AttributeActiveStateMaintenance,
	"refreshing":   AttributeActiveStateRefreshing,
}

// AttributeLoadState specifies the a value load_state attribute.
type AttributeLoadState int

const (
	_ AttributeLoadState = iota
	AttributeLoadStateStub
	AttributeLoadStateLoaded
	AttributeLoadStateNotFound
	AttributeLoadStateBadSetting
	AttributeLoadStateError
	AttributeLoadStateMerged
	AttributeLoadStateMasked
)

// String returns the string representation of the AttributeLoadState.
func (av AttributeLoadState) String() string {
	switch av {
	case AttributeLoadStateStub:
		return "stub"
	case AttributeLoadStateLoaded:
		return "loaded"
	case AttributeLoadStateNotFound:
		return "not-found"
	case AttributeLoadStateBadSetting:
		return "bad-setting"
	case AttributeLoadStateError:
		return "error"
	case AttributeLoadStateMerged:
		return "merged"
	case AttributeLoadStateMasked:
		return "masked"
	}
	return ""
}

// MapAttributeLoadState is a helper map of string to AttributeLoadState attribute value.
var MapAttributeLoadState = map[string]AttributeLoadState{
	"stub":        AttributeLoadStateStub,
	"loaded":      AttributeLoadStateLoaded,
	"not-found":   AttributeLoadStateNotFound,
	"bad-setting": AttributeLoadStateBadSetting,
	"error":       AttributeLoadStateError,
	"merged":      AttributeLoadStateMerged,
	"masked":      AttributeLoadStateMasked,
}

// AttributeSubState specifies the a value sub_state attribute.
type AttributeSubState int

const (
	_ AttributeSubState = iota
	AttributeSubStateDead
	AttributeSubStateCondition
	AttributeSubStateStartPre
	AttributeSubStateStart
	AttributeSubStateStartPost
	AttributeSubStateRunning
	AttributeSubStateExited
	AttributeSubStateReload
	AttributeSubStateReloadSignal
	AttributeSubStateReloadNotify
	AttributeSubStateStop
	AttributeSubStateStopWatchdog
	AttributeSubStateStopSigterm
	AttributeSubStateStopSigkill
	AttributeSubStateStopPost
	AttributeSubStateFinalWatchdog
	AttributeSubStateFinalSigterm
	AttributeSubStateFinalSigkill
	AttributeSubStateFailed
	AttributeSubStateDeadBeforeAutoRestart
	AttributeSubStateFailedBeforeAutoRestart
	AttributeSubStateDeadResourcesPinned
	AttributeSubStateAutoRestart
	AttributeSubStateAutoRestartQueued
	AttributeSubStateCleaning
	AttributeSubStateMounting
)

// String returns the string representation of the AttributeSubState.
func (av AttributeSubState) String() string {
	switch av {
	case AttributeSubStateDead:
		return "dead"
	case AttributeSubStateCondition:
		return "condition"
	case AttributeSubStateStartPre:
		return "start-pre"
	case AttributeSubStateStart:
		return "start"
	case AttributeSubStateStartPost:
		return "start-post"
	case AttributeSubStateRunning:
		return "running"
	case AttributeSubStateExited:
		return "exited"
	case AttributeSubStateReload:
		return "reload"
	case AttributeSubStateReloadSignal:
		return "reload-signal"
	case AttributeSubStateReloadNotify:
		return "reload-notify"
	case AttributeSubStateStop:
		return "stop"
	case AttributeSubStateStopWatchdog:
		return "stop-watchdog"
	case AttributeSubStateStopSigterm:
		return "stop-sigterm"
	case AttributeSubStateStopSigkill:
		return "stop-sigkill"
	case AttributeSubStateStopPost:
		return "stop-post"
	case AttributeSubStateFinalWatchdog:
		return "final-watchdog"
	case AttributeSubStateFinalSigterm:
		return "final-sigterm"
	case AttributeSubStateFinalSigkill:
		return "final-sigkill"
	case AttributeSubStateFailed:
		return "failed"
	case AttributeSubStateDeadBeforeAutoRestart:
		return "dead-before-auto-restart"
	case AttributeSubStateFailedBeforeAutoRestart:
		return "failed-before-auto-restart"
	case AttributeSubStateDeadResourcesPinned:
		return "dead-resources-pinned"
	case AttributeSubStateAutoRestart:
		return "auto-restart"
	case AttributeSubStateAutoRestartQueued:
		return "auto-restart-queued"
	case AttributeSubStateCleaning:
		return "cleaning"
	case AttributeSubStateMounting:
		return "mounting"
	}
	return ""
}

// MapAttributeSubState is a helper map of string to AttributeSubState attribute value.
var MapAttributeSubState = map[string]AttributeSubState{
	"dead":                       AttributeSubStateDead,
	"condition":                  AttributeSubStateCondition,
	"start-pre":                  AttributeSubStateStartPre,
	"start":                      AttributeSubStateStart,
	"start-post":                 AttributeSubStateStartPost,
	"running":                    AttributeSubStateRunning,
	"exited":                     AttributeSubStateExited,
	"reload":                     AttributeSubStateReload,
	"reload-signal":              AttributeSubStateReloadSignal,
	"reload-notify":              AttributeSubStateReloadNotify,
	"stop":                       AttributeSubStateStop,
	"stop-watchdog":              AttributeSubStateStopWatchdog,
	"stop-sigterm":               AttributeSubStateStopSigterm,
	"stop-sigkill":               AttributeSubStateStopSigkill,
	"stop-post":                  AttributeSubStateStopPost,
	"final-watchdog":             AttributeSubStateFinalWatchdog,
	"final-sigterm":              AttributeSubStateFinalSigterm,
	"final-sigkill":              AttributeSubStateFinalSigkill,
	"failed":                     AttributeSubStateFailed,
	"dead-before-auto-restart":   AttributeSubStateDeadBeforeAutoRestart,
	"failed-before-auto-restart": AttributeSubStateFailedBeforeAutoRestart,
	"dead-resources-pinned":      AttributeSubStateDeadResourcesPinned,
	"auto-restart":               AttributeSubStateAutoRestart,
	"auto-restart-queued":        AttributeSubStateAutoRestartQueued,
	"cleaning":                   AttributeSubStateCleaning,
	"mounting":                   AttributeSubStateMounting,
}

// AttributeSystemState specifies the a value system_state attribute.
type AttributeSystemState int

const (
	_ AttributeSystemState = iota
	AttributeSystemStateInitializing
	AttributeSystemStateStarting
	AttributeSystemStateRunning
	AttributeSystemStateDegraded
	AttributeSystemStateMaintenance
	AttributeSystemStateStopping
)

// String returns the string representation of the AttributeSystemState.
func (av AttributeSystemState) String() string {
	switch av {
	case AttributeSystemStateInitializing:
		return "initializing"
	case AttributeSystemStateStarting:
		return "starting"
	case AttributeSystemStateRunning:
		return "running"
	case AttributeSystemStateDegraded:
		return "degraded"
	case AttributeSystemStateMaintenance:
		return "maintenance"
	case AttributeSystemStateStopping:
		return "stopping"
	}
	return ""
}

// MapAttributeSystemState is a helper map of string to AttributeSystemState attribute value.
var MapAttributeSystemState = map[string]AttributeSystemState{
	"initializing": AttributeSystemStateInitializing,
	"starting":     AttributeSystemStateStarting,
	"running":      AttributeSystemStateRunning,
	"degraded":     AttributeSystemStateDegraded,
	"maintenance":  AttributeSystemStateMaintenance,
	"stopping":     AttributeSystemStateStopping,
}

type metricSystemdFailedJobs struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills systemd.failed_jobs metric with initial data.
func (m *metricSystemdFailedJobs) init() {
	m.data.SetName("systemd.failed_jobs")
	m.data.SetDescription("How many jobs have ever failed in total")
	m.data.SetUnit("{jobs}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricSystemdFailedJobs) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemdFailedJobs) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemdFailedJobs) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemdFailedJobs(cfg MetricConfig) metricSystemdFailedJobs {
	m := metricSystemdFailedJobs{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemdInstalledJobs struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills systemd.installed_jobs metric with initial data.
func (m *metricSystemdInstalledJobs) init() {
	m.data.SetName("systemd.installed_jobs")
	m.data.SetDescription("How many jobs have ever been queued in total")
	m.data.SetUnit("{jobs}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricSystemdInstalledJobs) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemdInstalledJobs) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemdInstalledJobs) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemdInstalledJobs(cfg MetricConfig) metricSystemdInstalledJobs {
	m := metricSystemdInstalledJobs{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemdJobs struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills systemd.jobs metric with initial data.
func (m *metricSystemdJobs) init() {
	m.data.SetName("systemd.jobs")
	m.data.SetDescription("How many jobs are currently queued")
	m.data.SetUnit("{jobs}")
	m.data.SetEmptyGauge()
}

func (m *metricSystemdJobs) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemdJobs) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemdJobs) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemdJobs(cfg MetricConfig) metricSystemdJobs {
	m := metricSystemdJobs{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemdSystemState struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills systemd.system_state metric with initial data.
func (m *metricSystemdSystemState) init() {
	m.data.SetName("systemd.system_state")
	m.data.SetDescription("The current state of the service manager")
	m.data.SetUnit("{system_state}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemdSystemState) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, systemdVersionAttributeValue string, systemStateAttributeValue string, architectureAttributeValue string, virtualizationAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("systemd_version", systemdVersionAttributeValue)
	dp.Attributes().PutStr("system_state", systemStateAttributeValue)
	dp.Attributes().PutStr("architecture", architectureAttributeValue)
	dp.Attributes().PutStr("virtualization", virtualizationAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemdSystemState) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemdSystemState) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemdSystemState(cfg MetricConfig) metricSystemdSystemState {
	m := metricSystemdSystemState{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemdUnitActiveState struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills systemd.unit.active_state metric with initial data.
func (m *metricSystemdUnitActiveState) init() {
	m.data.SetName("systemd.unit.active_state")
	m.data.SetDescription("The active state of the unit (https://www.freedesktop.org/software/systemd/man/latest/systemd.html#Units)")
	m.data.SetUnit("{active_state}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemdUnitActiveState) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, activeStateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("active_state", activeStateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemdUnitActiveState) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemdUnitActiveState) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemdUnitActiveState(cfg MetricConfig) metricSystemdUnitActiveState {
	m := metricSystemdUnitActiveState{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemdUnitErrno struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills systemd.unit.errno metric with initial data.
func (m *metricSystemdUnitErrno) init() {
	m.data.SetName("systemd.unit.errno")
	m.data.SetDescription("The errno (exit code) of the last error/exit")
	m.data.SetUnit("{errno}")
	m.data.SetEmptyGauge()
}

func (m *metricSystemdUnitErrno) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemdUnitErrno) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemdUnitErrno) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemdUnitErrno(cfg MetricConfig) metricSystemdUnitErrno {
	m := metricSystemdUnitErrno{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemdUnitLoadState struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills systemd.unit.load_state metric with initial data.
func (m *metricSystemdUnitLoadState) init() {
	m.data.SetName("systemd.unit.load_state")
	m.data.SetDescription("The load state of the unit")
	m.data.SetUnit("{load_state}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemdUnitLoadState) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, loadStateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("load_state", loadStateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemdUnitLoadState) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemdUnitLoadState) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemdUnitLoadState(cfg MetricConfig) metricSystemdUnitLoadState {
	m := metricSystemdUnitLoadState{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemdUnitRestarts struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills systemd.unit.restarts metric with initial data.
func (m *metricSystemdUnitRestarts) init() {
	m.data.SetName("systemd.unit.restarts")
	m.data.SetDescription("Amount of time the unit was restarted this boot")
	m.data.SetUnit("{restarts}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
}

func (m *metricSystemdUnitRestarts) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemdUnitRestarts) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemdUnitRestarts) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemdUnitRestarts(cfg MetricConfig) metricSystemdUnitRestarts {
	m := metricSystemdUnitRestarts{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemdUnitState struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills systemd.unit.state metric with initial data.
func (m *metricSystemdUnitState) init() {
	m.data.SetName("systemd.unit.state")
	m.data.SetDescription("The full state of the unit. The gauge value is the sub state, but all states (load, active, sub) are exposed as attributes")
	m.data.SetUnit("{state}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemdUnitState) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, loadStateAttributeValue string, activeStateAttributeValue string, subStateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("load_state", loadStateAttributeValue)
	dp.Attributes().PutStr("active_state", activeStateAttributeValue)
	dp.Attributes().PutStr("sub_state", subStateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemdUnitState) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemdUnitState) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemdUnitState(cfg MetricConfig) metricSystemdUnitState {
	m := metricSystemdUnitState{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemdUnitSubState struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills systemd.unit.sub_state metric with initial data.
func (m *metricSystemdUnitSubState) init() {
	m.data.SetName("systemd.unit.sub_state")
	m.data.SetDescription("The sub state of the unit ()")
	m.data.SetUnit("{sub_state}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemdUnitSubState) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, subStateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("sub_state", subStateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemdUnitSubState) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemdUnitSubState) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemdUnitSubState(cfg MetricConfig) metricSystemdUnitSubState {
	m := metricSystemdUnitSubState{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                         MetricsBuilderConfig // config of the metrics builder.
	startTime                      pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity                int                  // maximum observed number of metrics per resource.
	metricsBuffer                  pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                      component.BuildInfo  // contains version information.
	resourceAttributeIncludeFilter map[string]filter.Filter
	resourceAttributeExcludeFilter map[string]filter.Filter
	metricSystemdFailedJobs        metricSystemdFailedJobs
	metricSystemdInstalledJobs     metricSystemdInstalledJobs
	metricSystemdJobs              metricSystemdJobs
	metricSystemdSystemState       metricSystemdSystemState
	metricSystemdUnitActiveState   metricSystemdUnitActiveState
	metricSystemdUnitErrno         metricSystemdUnitErrno
	metricSystemdUnitLoadState     metricSystemdUnitLoadState
	metricSystemdUnitRestarts      metricSystemdUnitRestarts
	metricSystemdUnitState         metricSystemdUnitState
	metricSystemdUnitSubState      metricSystemdUnitSubState
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}

func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                         mbc,
		startTime:                      pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                  pmetric.NewMetrics(),
		buildInfo:                      settings.BuildInfo,
		metricSystemdFailedJobs:        newMetricSystemdFailedJobs(mbc.Metrics.SystemdFailedJobs),
		metricSystemdInstalledJobs:     newMetricSystemdInstalledJobs(mbc.Metrics.SystemdInstalledJobs),
		metricSystemdJobs:              newMetricSystemdJobs(mbc.Metrics.SystemdJobs),
		metricSystemdSystemState:       newMetricSystemdSystemState(mbc.Metrics.SystemdSystemState),
		metricSystemdUnitActiveState:   newMetricSystemdUnitActiveState(mbc.Metrics.SystemdUnitActiveState),
		metricSystemdUnitErrno:         newMetricSystemdUnitErrno(mbc.Metrics.SystemdUnitErrno),
		metricSystemdUnitLoadState:     newMetricSystemdUnitLoadState(mbc.Metrics.SystemdUnitLoadState),
		metricSystemdUnitRestarts:      newMetricSystemdUnitRestarts(mbc.Metrics.SystemdUnitRestarts),
		metricSystemdUnitState:         newMetricSystemdUnitState(mbc.Metrics.SystemdUnitState),
		metricSystemdUnitSubState:      newMetricSystemdUnitSubState(mbc.Metrics.SystemdUnitSubState),
		resourceAttributeIncludeFilter: make(map[string]filter.Filter),
		resourceAttributeExcludeFilter: make(map[string]filter.Filter),
	}
	if mbc.ResourceAttributes.SystemdUnitName.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["systemd.unit.name"] = filter.CreateFilter(mbc.ResourceAttributes.SystemdUnitName.MetricsInclude)
	}
	if mbc.ResourceAttributes.SystemdUnitName.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["systemd.unit.name"] = filter.CreateFilter(mbc.ResourceAttributes.SystemdUnitName.MetricsExclude)
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// NewResourceBuilder returns a new resource builder that should be used to build a resource associated with for the emitted metrics.
func (mb *MetricsBuilder) NewResourceBuilder() *ResourceBuilder {
	return NewResourceBuilder(mb.config.ResourceAttributes)
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName("github.com/open-telemetry/opentelemetry-collector-contrib/receiver/systemdreceiver")
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricSystemdFailedJobs.emit(ils.Metrics())
	mb.metricSystemdInstalledJobs.emit(ils.Metrics())
	mb.metricSystemdJobs.emit(ils.Metrics())
	mb.metricSystemdSystemState.emit(ils.Metrics())
	mb.metricSystemdUnitActiveState.emit(ils.Metrics())
	mb.metricSystemdUnitErrno.emit(ils.Metrics())
	mb.metricSystemdUnitLoadState.emit(ils.Metrics())
	mb.metricSystemdUnitRestarts.emit(ils.Metrics())
	mb.metricSystemdUnitState.emit(ils.Metrics())
	mb.metricSystemdUnitSubState.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}
	for attr, filter := range mb.resourceAttributeIncludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && !filter.Matches(val.AsString()) {
			return
		}
	}
	for attr, filter := range mb.resourceAttributeExcludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && filter.Matches(val.AsString()) {
			return
		}
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordSystemdFailedJobsDataPoint adds a data point to systemd.failed_jobs metric.
func (mb *MetricsBuilder) RecordSystemdFailedJobsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricSystemdFailedJobs.recordDataPoint(mb.startTime, ts, val)
}

// RecordSystemdInstalledJobsDataPoint adds a data point to systemd.installed_jobs metric.
func (mb *MetricsBuilder) RecordSystemdInstalledJobsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricSystemdInstalledJobs.recordDataPoint(mb.startTime, ts, val)
}

// RecordSystemdJobsDataPoint adds a data point to systemd.jobs metric.
func (mb *MetricsBuilder) RecordSystemdJobsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricSystemdJobs.recordDataPoint(mb.startTime, ts, val)
}

// RecordSystemdSystemStateDataPoint adds a data point to systemd.system_state metric.
func (mb *MetricsBuilder) RecordSystemdSystemStateDataPoint(ts pcommon.Timestamp, val int64, systemdVersionAttributeValue string, systemStateAttributeValue AttributeSystemState, architectureAttributeValue string, virtualizationAttributeValue string) {
	mb.metricSystemdSystemState.recordDataPoint(mb.startTime, ts, val, systemdVersionAttributeValue, systemStateAttributeValue.String(), architectureAttributeValue, virtualizationAttributeValue)
}

// RecordSystemdUnitActiveStateDataPoint adds a data point to systemd.unit.active_state metric.
func (mb *MetricsBuilder) RecordSystemdUnitActiveStateDataPoint(ts pcommon.Timestamp, val int64, activeStateAttributeValue AttributeActiveState) {
	mb.metricSystemdUnitActiveState.recordDataPoint(mb.startTime, ts, val, activeStateAttributeValue.String())
}

// RecordSystemdUnitErrnoDataPoint adds a data point to systemd.unit.errno metric.
func (mb *MetricsBuilder) RecordSystemdUnitErrnoDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricSystemdUnitErrno.recordDataPoint(mb.startTime, ts, val)
}

// RecordSystemdUnitLoadStateDataPoint adds a data point to systemd.unit.load_state metric.
func (mb *MetricsBuilder) RecordSystemdUnitLoadStateDataPoint(ts pcommon.Timestamp, val int64, loadStateAttributeValue AttributeLoadState) {
	mb.metricSystemdUnitLoadState.recordDataPoint(mb.startTime, ts, val, loadStateAttributeValue.String())
}

// RecordSystemdUnitRestartsDataPoint adds a data point to systemd.unit.restarts metric.
func (mb *MetricsBuilder) RecordSystemdUnitRestartsDataPoint(ts pcommon.Timestamp, val int64) {
	mb.metricSystemdUnitRestarts.recordDataPoint(mb.startTime, ts, val)
}

// RecordSystemdUnitStateDataPoint adds a data point to systemd.unit.state metric.
func (mb *MetricsBuilder) RecordSystemdUnitStateDataPoint(ts pcommon.Timestamp, val int64, loadStateAttributeValue AttributeLoadState, activeStateAttributeValue AttributeActiveState, subStateAttributeValue AttributeSubState) {
	mb.metricSystemdUnitState.recordDataPoint(mb.startTime, ts, val, loadStateAttributeValue.String(), activeStateAttributeValue.String(), subStateAttributeValue.String())
}

// RecordSystemdUnitSubStateDataPoint adds a data point to systemd.unit.sub_state metric.
func (mb *MetricsBuilder) RecordSystemdUnitSubStateDataPoint(ts pcommon.Timestamp, val int64, subStateAttributeValue AttributeSubState) {
	mb.metricSystemdUnitSubState.recordDataPoint(mb.startTime, ts, val, subStateAttributeValue.String())
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
