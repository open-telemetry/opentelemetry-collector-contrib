// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: testDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			allMetricsCount++
			mb.RecordSystemdUnitActiveStateDataPoint(ts, 1, AttributeActiveStateActive)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemdUnitErrnoDataPoint(ts, 1)

			allMetricsCount++
			mb.RecordSystemdUnitLoadStateDataPoint(ts, 1, AttributeLoadStateStub)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemdUnitRestartsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemdUnitStateDataPoint(ts, 1, AttributeLoadStateStub, AttributeActiveStateActive, AttributeSubStateDead)

			allMetricsCount++
			mb.RecordSystemdUnitSubStateDataPoint(ts, 1, AttributeSubStateDead)

			rb := mb.NewResourceBuilder()
			rb.SetSystemdUnitName("systemd.unit.name-val")
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "systemd.unit.active_state":
					assert.False(t, validatedMetrics["systemd.unit.active_state"], "Found a duplicate in the metrics slice: systemd.unit.active_state")
					validatedMetrics["systemd.unit.active_state"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The active state of the unit (https://www.freedesktop.org/software/systemd/man/latest/systemd.html#Units)", ms.At(i).Description())
					assert.Equal(t, "{active_state}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("active_state")
					assert.True(t, ok)
					assert.EqualValues(t, "active", attrVal.Str())
				case "systemd.unit.errno":
					assert.False(t, validatedMetrics["systemd.unit.errno"], "Found a duplicate in the metrics slice: systemd.unit.errno")
					validatedMetrics["systemd.unit.errno"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The errno (exit code) of the last error/exit", ms.At(i).Description())
					assert.Equal(t, "{errno}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "systemd.unit.load_state":
					assert.False(t, validatedMetrics["systemd.unit.load_state"], "Found a duplicate in the metrics slice: systemd.unit.load_state")
					validatedMetrics["systemd.unit.load_state"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The load state of the unit", ms.At(i).Description())
					assert.Equal(t, "{load_state}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("load_state")
					assert.True(t, ok)
					assert.EqualValues(t, "stub", attrVal.Str())
				case "systemd.unit.restarts":
					assert.False(t, validatedMetrics["systemd.unit.restarts"], "Found a duplicate in the metrics slice: systemd.unit.restarts")
					validatedMetrics["systemd.unit.restarts"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Amount of time the unit was restarted this boot", ms.At(i).Description())
					assert.Equal(t, "{restarts}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "systemd.unit.state":
					assert.False(t, validatedMetrics["systemd.unit.state"], "Found a duplicate in the metrics slice: systemd.unit.state")
					validatedMetrics["systemd.unit.state"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The full state of the unit. The gauge value is the sub state, but all states (load, active, sub) are exposed as attributes", ms.At(i).Description())
					assert.Equal(t, "{state}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("load_state")
					assert.True(t, ok)
					assert.EqualValues(t, "stub", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("active_state")
					assert.True(t, ok)
					assert.EqualValues(t, "active", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("sub_state")
					assert.True(t, ok)
					assert.EqualValues(t, "dead", attrVal.Str())
				case "systemd.unit.sub_state":
					assert.False(t, validatedMetrics["systemd.unit.sub_state"], "Found a duplicate in the metrics slice: systemd.unit.sub_state")
					validatedMetrics["systemd.unit.sub_state"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The sub state of the unit ()", ms.At(i).Description())
					assert.Equal(t, "{sub_state}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("sub_state")
					assert.True(t, ok)
					assert.EqualValues(t, "dead", attrVal.Str())
				}
			}
		})
	}
}
