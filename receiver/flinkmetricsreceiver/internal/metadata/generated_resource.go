// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ResourceBuilder is a helper struct to build resources predefined in metadata.yaml.
// The ResourceBuilder is not thread-safe and must not to be used in multiple goroutines.
type ResourceBuilder struct {
	config ResourceAttributesConfig
	res    pcommon.Resource
}

// NewResourceBuilder creates a new ResourceBuilder. This method should be called on the start of the application.
func NewResourceBuilder(rac ResourceAttributesConfig) *ResourceBuilder {
	return &ResourceBuilder{
		config: rac,
		res:    pcommon.NewResource(),
	}
}

// SetFlinkJobName sets provided value as "flink.job.name" attribute.
func (rb *ResourceBuilder) SetFlinkJobName(val string) {
	if rb.config.FlinkJobName.Enabled {
		rb.res.Attributes().PutStr("flink.job.name", val)
	}
}

// SetFlinkResourceTypeJobmanager sets "flink.resource.type=jobmanager" attribute.
func (rb *ResourceBuilder) SetFlinkResourceTypeJobmanager() {
	if rb.config.FlinkResourceType.Enabled {
		rb.res.Attributes().PutStr("flink.resource.type", "jobmanager")
	}
}

// SetFlinkResourceTypeTaskmanager sets "flink.resource.type=taskmanager" attribute.
func (rb *ResourceBuilder) SetFlinkResourceTypeTaskmanager() {
	if rb.config.FlinkResourceType.Enabled {
		rb.res.Attributes().PutStr("flink.resource.type", "taskmanager")
	}
}

// SetFlinkSubtaskIndex sets provided value as "flink.subtask.index" attribute.
func (rb *ResourceBuilder) SetFlinkSubtaskIndex(val string) {
	if rb.config.FlinkSubtaskIndex.Enabled {
		rb.res.Attributes().PutStr("flink.subtask.index", val)
	}
}

// SetFlinkTaskName sets provided value as "flink.task.name" attribute.
func (rb *ResourceBuilder) SetFlinkTaskName(val string) {
	if rb.config.FlinkTaskName.Enabled {
		rb.res.Attributes().PutStr("flink.task.name", val)
	}
}

// SetFlinkTaskmanagerID sets provided value as "flink.taskmanager.id" attribute.
func (rb *ResourceBuilder) SetFlinkTaskmanagerID(val string) {
	if rb.config.FlinkTaskmanagerID.Enabled {
		rb.res.Attributes().PutStr("flink.taskmanager.id", val)
	}
}

// SetHostName sets provided value as "host.name" attribute.
func (rb *ResourceBuilder) SetHostName(val string) {
	if rb.config.HostName.Enabled {
		rb.res.Attributes().PutStr("host.name", val)
	}
}

// Emit returns the built resource and resets the internal builder state.
func (rb *ResourceBuilder) Emit() pcommon.Resource {
	r := rb.res
	rb.res = pcommon.NewResource()
	return r
}
