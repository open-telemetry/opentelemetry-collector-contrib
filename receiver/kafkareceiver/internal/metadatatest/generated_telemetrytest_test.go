// Code generated by mdatagen. DO NOT EDIT.

package metadatatest

import (
	"context"
	"testing"

	"github.com/stretchr/testify/require"
	"go.opentelemetry.io/otel/sdk/metric/metricdata"
	"go.opentelemetry.io/otel/sdk/metric/metricdata/metricdatatest"

	"github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kafkareceiver/internal/metadata"

	"go.opentelemetry.io/collector/component/componenttest"
)

func TestSetupTelemetry(t *testing.T) {
	testTel := componenttest.NewTelemetry()
	tb, err := metadata.NewTelemetryBuilder(testTel.NewTelemetrySettings())
	require.NoError(t, err)
	defer tb.Shutdown()
	tb.KafkaBrokerClosed.Add(context.Background(), 1)
	tb.KafkaBrokerConnects.Add(context.Background(), 1)
	tb.KafkaBrokerThrottlingDuration.Record(context.Background(), 1)
	tb.KafkaReceiverBytes.Add(context.Background(), 1)
	tb.KafkaReceiverBytesUncompressed.Add(context.Background(), 1)
	tb.KafkaReceiverCurrentOffset.Record(context.Background(), 1)
	tb.KafkaReceiverLatency.Record(context.Background(), 1)
	tb.KafkaReceiverMessages.Add(context.Background(), 1)
	tb.KafkaReceiverOffsetLag.Record(context.Background(), 1)
	tb.KafkaReceiverPartitionClose.Add(context.Background(), 1)
	tb.KafkaReceiverPartitionStart.Add(context.Background(), 1)
	tb.KafkaReceiverUnmarshalFailedLogRecords.Add(context.Background(), 1)
	tb.KafkaReceiverUnmarshalFailedMetricPoints.Add(context.Background(), 1)
	tb.KafkaReceiverUnmarshalFailedSpans.Add(context.Background(), 1)
	AssertEqualKafkaBrokerClosed(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaBrokerConnects(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaBrokerThrottlingDuration(t, testTel,
		[]metricdata.HistogramDataPoint[int64]{{}}, metricdatatest.IgnoreValue(),
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaReceiverBytes(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaReceiverBytesUncompressed(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaReceiverCurrentOffset(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaReceiverLatency(t, testTel,
		[]metricdata.HistogramDataPoint[int64]{{}}, metricdatatest.IgnoreValue(),
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaReceiverMessages(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaReceiverOffsetLag(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaReceiverPartitionClose(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaReceiverPartitionStart(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaReceiverUnmarshalFailedLogRecords(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaReceiverUnmarshalFailedMetricPoints(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())
	AssertEqualKafkaReceiverUnmarshalFailedSpans(t, testTel,
		[]metricdata.DataPoint[int64]{{Value: 1}},
		metricdatatest.IgnoreTimestamp())

	require.NoError(t, testTel.Shutdown(context.Background()))
}
