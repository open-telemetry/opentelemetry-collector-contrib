// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"

	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					SaphanaAlertCount:                       MetricConfig{Enabled: true},
					SaphanaBackupLatest:                     MetricConfig{Enabled: true},
					SaphanaColumnMemoryUsed:                 MetricConfig{Enabled: true},
					SaphanaComponentMemoryUsed:              MetricConfig{Enabled: true},
					SaphanaConnectionCount:                  MetricConfig{Enabled: true},
					SaphanaCPUUsed:                          MetricConfig{Enabled: true},
					SaphanaDiskSizeCurrent:                  MetricConfig{Enabled: true},
					SaphanaHostMemoryCurrent:                MetricConfig{Enabled: true},
					SaphanaHostSwapCurrent:                  MetricConfig{Enabled: true},
					SaphanaInstanceCodeSize:                 MetricConfig{Enabled: true},
					SaphanaInstanceMemoryCurrent:            MetricConfig{Enabled: true},
					SaphanaInstanceMemorySharedAllocated:    MetricConfig{Enabled: true},
					SaphanaInstanceMemoryUsedPeak:           MetricConfig{Enabled: true},
					SaphanaLicenseExpirationTime:            MetricConfig{Enabled: true},
					SaphanaLicenseLimit:                     MetricConfig{Enabled: true},
					SaphanaLicensePeak:                      MetricConfig{Enabled: true},
					SaphanaNetworkRequestAverageTime:        MetricConfig{Enabled: true},
					SaphanaNetworkRequestCount:              MetricConfig{Enabled: true},
					SaphanaNetworkRequestFinishedCount:      MetricConfig{Enabled: true},
					SaphanaReplicationAverageTime:           MetricConfig{Enabled: true},
					SaphanaReplicationBacklogSize:           MetricConfig{Enabled: true},
					SaphanaReplicationBacklogTime:           MetricConfig{Enabled: true},
					SaphanaRowStoreMemoryUsed:               MetricConfig{Enabled: true},
					SaphanaSchemaMemoryUsedCurrent:          MetricConfig{Enabled: true},
					SaphanaSchemaMemoryUsedMax:              MetricConfig{Enabled: true},
					SaphanaSchemaOperationCount:             MetricConfig{Enabled: true},
					SaphanaSchemaRecordCompressedCount:      MetricConfig{Enabled: true},
					SaphanaSchemaRecordCount:                MetricConfig{Enabled: true},
					SaphanaServiceCodeSize:                  MetricConfig{Enabled: true},
					SaphanaServiceCount:                     MetricConfig{Enabled: true},
					SaphanaServiceMemoryCompactorsAllocated: MetricConfig{Enabled: true},
					SaphanaServiceMemoryCompactorsFreeable:  MetricConfig{Enabled: true},
					SaphanaServiceMemoryEffectiveLimit:      MetricConfig{Enabled: true},
					SaphanaServiceMemoryHeapCurrent:         MetricConfig{Enabled: true},
					SaphanaServiceMemoryLimit:               MetricConfig{Enabled: true},
					SaphanaServiceMemorySharedCurrent:       MetricConfig{Enabled: true},
					SaphanaServiceMemoryUsed:                MetricConfig{Enabled: true},
					SaphanaServiceStackSize:                 MetricConfig{Enabled: true},
					SaphanaServiceThreadCount:               MetricConfig{Enabled: true},
					SaphanaTransactionBlocked:               MetricConfig{Enabled: true},
					SaphanaTransactionCount:                 MetricConfig{Enabled: true},
					SaphanaUptime:                           MetricConfig{Enabled: true},
					SaphanaVolumeOperationCount:             MetricConfig{Enabled: true},
					SaphanaVolumeOperationSize:              MetricConfig{Enabled: true},
					SaphanaVolumeOperationTime:              MetricConfig{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesConfig{
					DbSystem:    ResourceAttributeConfig{Enabled: true},
					SaphanaHost: ResourceAttributeConfig{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					SaphanaAlertCount:                       MetricConfig{Enabled: false},
					SaphanaBackupLatest:                     MetricConfig{Enabled: false},
					SaphanaColumnMemoryUsed:                 MetricConfig{Enabled: false},
					SaphanaComponentMemoryUsed:              MetricConfig{Enabled: false},
					SaphanaConnectionCount:                  MetricConfig{Enabled: false},
					SaphanaCPUUsed:                          MetricConfig{Enabled: false},
					SaphanaDiskSizeCurrent:                  MetricConfig{Enabled: false},
					SaphanaHostMemoryCurrent:                MetricConfig{Enabled: false},
					SaphanaHostSwapCurrent:                  MetricConfig{Enabled: false},
					SaphanaInstanceCodeSize:                 MetricConfig{Enabled: false},
					SaphanaInstanceMemoryCurrent:            MetricConfig{Enabled: false},
					SaphanaInstanceMemorySharedAllocated:    MetricConfig{Enabled: false},
					SaphanaInstanceMemoryUsedPeak:           MetricConfig{Enabled: false},
					SaphanaLicenseExpirationTime:            MetricConfig{Enabled: false},
					SaphanaLicenseLimit:                     MetricConfig{Enabled: false},
					SaphanaLicensePeak:                      MetricConfig{Enabled: false},
					SaphanaNetworkRequestAverageTime:        MetricConfig{Enabled: false},
					SaphanaNetworkRequestCount:              MetricConfig{Enabled: false},
					SaphanaNetworkRequestFinishedCount:      MetricConfig{Enabled: false},
					SaphanaReplicationAverageTime:           MetricConfig{Enabled: false},
					SaphanaReplicationBacklogSize:           MetricConfig{Enabled: false},
					SaphanaReplicationBacklogTime:           MetricConfig{Enabled: false},
					SaphanaRowStoreMemoryUsed:               MetricConfig{Enabled: false},
					SaphanaSchemaMemoryUsedCurrent:          MetricConfig{Enabled: false},
					SaphanaSchemaMemoryUsedMax:              MetricConfig{Enabled: false},
					SaphanaSchemaOperationCount:             MetricConfig{Enabled: false},
					SaphanaSchemaRecordCompressedCount:      MetricConfig{Enabled: false},
					SaphanaSchemaRecordCount:                MetricConfig{Enabled: false},
					SaphanaServiceCodeSize:                  MetricConfig{Enabled: false},
					SaphanaServiceCount:                     MetricConfig{Enabled: false},
					SaphanaServiceMemoryCompactorsAllocated: MetricConfig{Enabled: false},
					SaphanaServiceMemoryCompactorsFreeable:  MetricConfig{Enabled: false},
					SaphanaServiceMemoryEffectiveLimit:      MetricConfig{Enabled: false},
					SaphanaServiceMemoryHeapCurrent:         MetricConfig{Enabled: false},
					SaphanaServiceMemoryLimit:               MetricConfig{Enabled: false},
					SaphanaServiceMemorySharedCurrent:       MetricConfig{Enabled: false},
					SaphanaServiceMemoryUsed:                MetricConfig{Enabled: false},
					SaphanaServiceStackSize:                 MetricConfig{Enabled: false},
					SaphanaServiceThreadCount:               MetricConfig{Enabled: false},
					SaphanaTransactionBlocked:               MetricConfig{Enabled: false},
					SaphanaTransactionCount:                 MetricConfig{Enabled: false},
					SaphanaUptime:                           MetricConfig{Enabled: false},
					SaphanaVolumeOperationCount:             MetricConfig{Enabled: false},
					SaphanaVolumeOperationSize:              MetricConfig{Enabled: false},
					SaphanaVolumeOperationTime:              MetricConfig{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesConfig{
					DbSystem:    ResourceAttributeConfig{Enabled: false},
					SaphanaHost: ResourceAttributeConfig{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricConfig{}, ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, sub.Unmarshal(&cfg, confmap.WithIgnoreUnused()))
	return cfg
}

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesConfig
	}{
		{
			name: "default",
			want: DefaultResourceAttributesConfig(),
		},
		{
			name: "all_set",
			want: ResourceAttributesConfig{
				DbSystem:    ResourceAttributeConfig{Enabled: true},
				SaphanaHost: ResourceAttributeConfig{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesConfig{
				DbSystem:    ResourceAttributeConfig{Enabled: false},
				SaphanaHost: ResourceAttributeConfig{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadResourceAttributesConfig(t *testing.T, name string) ResourceAttributesConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesConfig()
	require.NoError(t, sub.Unmarshal(&cfg))
	return cfg
}
