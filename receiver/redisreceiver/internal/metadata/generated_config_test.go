// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"

	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					RedisClientsBlocked:                    MetricConfig{Enabled: true},
					RedisClientsConnected:                  MetricConfig{Enabled: true},
					RedisClientsMaxInputBuffer:             MetricConfig{Enabled: true},
					RedisClientsMaxOutputBuffer:            MetricConfig{Enabled: true},
					RedisCmdCalls:                          MetricConfig{Enabled: true},
					RedisCmdLatency:                        MetricConfig{Enabled: true},
					RedisCmdUsec:                           MetricConfig{Enabled: true},
					RedisCommands:                          MetricConfig{Enabled: true},
					RedisCommandsProcessed:                 MetricConfig{Enabled: true},
					RedisConnectionsReceived:               MetricConfig{Enabled: true},
					RedisConnectionsRejected:               MetricConfig{Enabled: true},
					RedisCPUTime:                           MetricConfig{Enabled: true},
					RedisDbAvgTTL:                          MetricConfig{Enabled: true},
					RedisDbExpires:                         MetricConfig{Enabled: true},
					RedisDbKeys:                            MetricConfig{Enabled: true},
					RedisKeysEvicted:                       MetricConfig{Enabled: true},
					RedisKeysExpired:                       MetricConfig{Enabled: true},
					RedisKeyspaceHits:                      MetricConfig{Enabled: true},
					RedisKeyspaceMisses:                    MetricConfig{Enabled: true},
					RedisLatestFork:                        MetricConfig{Enabled: true},
					RedisMaxmemory:                         MetricConfig{Enabled: true},
					RedisMemoryFragmentationRatio:          MetricConfig{Enabled: true},
					RedisMemoryLua:                         MetricConfig{Enabled: true},
					RedisMemoryPeak:                        MetricConfig{Enabled: true},
					RedisMemoryRss:                         MetricConfig{Enabled: true},
					RedisMemoryUsed:                        MetricConfig{Enabled: true},
					RedisNetInput:                          MetricConfig{Enabled: true},
					RedisNetOutput:                         MetricConfig{Enabled: true},
					RedisRdbChangesSinceLastSave:           MetricConfig{Enabled: true},
					RedisReplicationBacklogFirstByteOffset: MetricConfig{Enabled: true},
					RedisReplicationOffset:                 MetricConfig{Enabled: true},
					RedisReplicationReplicaOffset:          MetricConfig{Enabled: true},
					RedisRole:                              MetricConfig{Enabled: true},
					RedisSlavesConnected:                   MetricConfig{Enabled: true},
					RedisUptime:                            MetricConfig{Enabled: true},
				},
				ResourceAttributes: ResourceAttributesConfig{
					RedisVersion:  ResourceAttributeConfig{Enabled: true},
					ServerAddress: ResourceAttributeConfig{Enabled: true},
					ServerPort:    ResourceAttributeConfig{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					RedisClientsBlocked:                    MetricConfig{Enabled: false},
					RedisClientsConnected:                  MetricConfig{Enabled: false},
					RedisClientsMaxInputBuffer:             MetricConfig{Enabled: false},
					RedisClientsMaxOutputBuffer:            MetricConfig{Enabled: false},
					RedisCmdCalls:                          MetricConfig{Enabled: false},
					RedisCmdLatency:                        MetricConfig{Enabled: false},
					RedisCmdUsec:                           MetricConfig{Enabled: false},
					RedisCommands:                          MetricConfig{Enabled: false},
					RedisCommandsProcessed:                 MetricConfig{Enabled: false},
					RedisConnectionsReceived:               MetricConfig{Enabled: false},
					RedisConnectionsRejected:               MetricConfig{Enabled: false},
					RedisCPUTime:                           MetricConfig{Enabled: false},
					RedisDbAvgTTL:                          MetricConfig{Enabled: false},
					RedisDbExpires:                         MetricConfig{Enabled: false},
					RedisDbKeys:                            MetricConfig{Enabled: false},
					RedisKeysEvicted:                       MetricConfig{Enabled: false},
					RedisKeysExpired:                       MetricConfig{Enabled: false},
					RedisKeyspaceHits:                      MetricConfig{Enabled: false},
					RedisKeyspaceMisses:                    MetricConfig{Enabled: false},
					RedisLatestFork:                        MetricConfig{Enabled: false},
					RedisMaxmemory:                         MetricConfig{Enabled: false},
					RedisMemoryFragmentationRatio:          MetricConfig{Enabled: false},
					RedisMemoryLua:                         MetricConfig{Enabled: false},
					RedisMemoryPeak:                        MetricConfig{Enabled: false},
					RedisMemoryRss:                         MetricConfig{Enabled: false},
					RedisMemoryUsed:                        MetricConfig{Enabled: false},
					RedisNetInput:                          MetricConfig{Enabled: false},
					RedisNetOutput:                         MetricConfig{Enabled: false},
					RedisRdbChangesSinceLastSave:           MetricConfig{Enabled: false},
					RedisReplicationBacklogFirstByteOffset: MetricConfig{Enabled: false},
					RedisReplicationOffset:                 MetricConfig{Enabled: false},
					RedisReplicationReplicaOffset:          MetricConfig{Enabled: false},
					RedisRole:                              MetricConfig{Enabled: false},
					RedisSlavesConnected:                   MetricConfig{Enabled: false},
					RedisUptime:                            MetricConfig{Enabled: false},
				},
				ResourceAttributes: ResourceAttributesConfig{
					RedisVersion:  ResourceAttributeConfig{Enabled: false},
					ServerAddress: ResourceAttributeConfig{Enabled: false},
					ServerPort:    ResourceAttributeConfig{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricConfig{}, ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, sub.Unmarshal(&cfg, confmap.WithIgnoreUnused()))
	return cfg
}

func TestResourceAttributesConfig(t *testing.T) {
	tests := []struct {
		name string
		want ResourceAttributesConfig
	}{
		{
			name: "default",
			want: DefaultResourceAttributesConfig(),
		},
		{
			name: "all_set",
			want: ResourceAttributesConfig{
				RedisVersion:  ResourceAttributeConfig{Enabled: true},
				ServerAddress: ResourceAttributeConfig{Enabled: true},
				ServerPort:    ResourceAttributeConfig{Enabled: true},
			},
		},
		{
			name: "none_set",
			want: ResourceAttributesConfig{
				RedisVersion:  ResourceAttributeConfig{Enabled: false},
				ServerAddress: ResourceAttributeConfig{Enabled: false},
				ServerPort:    ResourceAttributeConfig{Enabled: false},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadResourceAttributesConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(ResourceAttributeConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadResourceAttributesConfig(t *testing.T, name string) ResourceAttributesConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	sub, err = sub.Sub("resource_attributes")
	require.NoError(t, err)
	cfg := DefaultResourceAttributesConfig()
	require.NoError(t, sub.Unmarshal(&cfg))
	return cfg
}
