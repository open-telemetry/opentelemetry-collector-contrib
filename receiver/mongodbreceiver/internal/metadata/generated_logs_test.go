// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/plog"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type eventsTestDataSet int

const (
	eventTestDataSetDefault eventsTestDataSet = iota
	eventTestDataSetAll
	eventTestDataSetNone
)

func TestLogsBuilderAppendLogRecord(t *testing.T) {
	observedZapCore, _ := observer.New(zap.WarnLevel)
	settings := receivertest.NewNopSettings(receivertest.NopType)
	settings.Logger = zap.New(observedZapCore)
	lb := NewLogsBuilder(loadLogsBuilderConfig(t, "all_set"), settings)

	rb := lb.NewResourceBuilder()
	rb.SetDatabase("database-val")
	rb.SetServerAddress("server.address-val")
	rb.SetServerPort(11)
	res := rb.Emit()

	// append the first log record
	lr := plog.NewLogRecord()
	lr.SetTimestamp(pcommon.NewTimestampFromTime(time.Now()))
	lr.Attributes().PutStr("type", "log")
	lr.Body().SetStr("the first log record")

	// append the second log record
	lr2 := plog.NewLogRecord()
	lr2.SetTimestamp(pcommon.NewTimestampFromTime(time.Now()))
	lr2.Attributes().PutStr("type", "event")
	lr2.Body().SetStr("the second log record")

	lb.AppendLogRecord(lr)
	lb.AppendLogRecord(lr2)

	logs := lb.Emit(WithLogsResource(res))
	assert.Equal(t, 1, logs.ResourceLogs().Len())

	rl := logs.ResourceLogs().At(0)
	assert.Equal(t, 1, rl.ScopeLogs().Len())

	sl := rl.ScopeLogs().At(0)
	assert.Equal(t, ScopeName, sl.Scope().Name())
	assert.Equal(t, lb.buildInfo.Version, sl.Scope().Version())

	assert.Equal(t, 2, sl.LogRecords().Len())

	attrVal, ok := sl.LogRecords().At(0).Attributes().Get("type")
	assert.True(t, ok)
	assert.Equal(t, "log", attrVal.Str())

	assert.Equal(t, pcommon.ValueTypeStr, sl.LogRecords().At(0).Body().Type())
	assert.Equal(t, "the first log record", sl.LogRecords().At(0).Body().Str())

	attrVal, ok = sl.LogRecords().At(1).Attributes().Get("type")
	assert.True(t, ok)
	assert.Equal(t, "event", attrVal.Str())

	assert.Equal(t, pcommon.ValueTypeStr, sl.LogRecords().At(1).Body().Type())
	assert.Equal(t, "the second log record", sl.LogRecords().At(1).Body().Str())
}
func TestLogsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		eventsSet   eventsTestDataSet
		resAttrsSet eventsTestDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			eventsSet:   eventTestDataSetAll,
			resAttrsSet: eventTestDataSetAll,
		},
		{
			name:        "none_set",
			eventsSet:   eventTestDataSetNone,
			resAttrsSet: eventTestDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: eventTestDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: eventTestDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			timestamp := pcommon.Timestamp(1_000_001_000)
			traceID := [16]byte{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}
			spanID := [8]byte{0, 1, 2, 3, 4, 5, 6, 7}
			ctx := trace.ContextWithSpanContext(context.Background(), trace.NewSpanContext(trace.SpanContextConfig{
				TraceID:    trace.TraceID(traceID),
				SpanID:     trace.SpanID(spanID),
				TraceFlags: trace.FlagsSampled,
			}))
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			lb := NewLogsBuilder(loadLogsBuilderConfig(t, tt.name), settings)

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultEventsCount := 0
			allEventsCount := 0
			defaultEventsCount++
			allEventsCount++
			lb.RecordDbServerQuerySampleEvent(ctx, timestamp, "client.address-val", 11, AttributeDbSystemNameMongodb, "db.collection.name-val", "db.operation.name-val", "db.query.text-val", "mongodb.application.name-val", "mongodb.query.signature-val", 26.100000, "mongodb.query.plan-val")

			rb := lb.NewResourceBuilder()
			rb.SetDatabase("database-val")
			rb.SetServerAddress("server.address-val")
			rb.SetServerPort(11)
			res := rb.Emit()
			logs := lb.Emit(WithLogsResource(res))

			if tt.expectEmpty || ((tt.name == "default" || tt.name == "filter_set_include") && defaultEventsCount == 0) {
				assert.Equal(t, 0, logs.ResourceLogs().Len())
				return
			}

			assert.Equal(t, 1, logs.ResourceLogs().Len())
			rl := logs.ResourceLogs().At(0)
			assert.Equal(t, res, rl.Resource())
			assert.Equal(t, 1, rl.ScopeLogs().Len())
			lrs := rl.ScopeLogs().At(0).LogRecords()
			if tt.eventsSet == eventTestDataSetDefault {
				assert.Equal(t, defaultEventsCount, lrs.Len())
			}
			if tt.eventsSet == eventTestDataSetAll {
				assert.Equal(t, allEventsCount, lrs.Len())
			}
			validatedEvents := make(map[string]bool)
			for i := 0; i < lrs.Len(); i++ {
				switch lrs.At(i).EventName() {
				case "db.server.query_sample":
					assert.False(t, validatedEvents["db.server.query_sample"], "Found a duplicate in the events slice: db.server.query_sample")
					validatedEvents["db.server.query_sample"] = true
					lr := lrs.At(i)
					assert.Equal(t, timestamp, lr.Timestamp())
					assert.Equal(t, pcommon.TraceID(traceID), lr.TraceID())
					assert.Equal(t, pcommon.SpanID(spanID), lr.SpanID())
					attrVal, ok := lr.Attributes().Get("client.address")
					assert.True(t, ok)
					assert.Equal(t, "client.address-val", attrVal.Str())
					attrVal, ok = lr.Attributes().Get("client.port")
					assert.True(t, ok)
					assert.EqualValues(t, 11, attrVal.Int())
					attrVal, ok = lr.Attributes().Get("db.system.name")
					assert.True(t, ok)
					assert.Equal(t, "mongodb", attrVal.Str())
					attrVal, ok = lr.Attributes().Get("db.collection.name")
					assert.True(t, ok)
					assert.Equal(t, "db.collection.name-val", attrVal.Str())
					attrVal, ok = lr.Attributes().Get("db.operation.name")
					assert.True(t, ok)
					assert.Equal(t, "db.operation.name-val", attrVal.Str())
					attrVal, ok = lr.Attributes().Get("db.query.text")
					assert.True(t, ok)
					assert.Equal(t, "db.query.text-val", attrVal.Str())
					attrVal, ok = lr.Attributes().Get("mongodb.application.name")
					assert.True(t, ok)
					assert.Equal(t, "mongodb.application.name-val", attrVal.Str())
					attrVal, ok = lr.Attributes().Get("mongodb.query.signature")
					assert.True(t, ok)
					assert.Equal(t, "mongodb.query.signature-val", attrVal.Str())
					attrVal, ok = lr.Attributes().Get("mongodb.operation.duration")
					assert.True(t, ok)
					assert.Equal(t, 26.100000, attrVal.Double())
					attrVal, ok = lr.Attributes().Get("mongodb.query.plan")
					assert.True(t, ok)
					assert.Equal(t, "mongodb.query.plan-val", attrVal.Str())
				}
			}
		})
	}
}
