// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/filter"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for snowflake metrics.
type MetricsConfig struct {
	SnowflakeBillingCloudServiceTotal              MetricConfig `mapstructure:"snowflake.billing.cloud_service.total"`
	SnowflakeBillingTotalCreditTotal               MetricConfig `mapstructure:"snowflake.billing.total_credit.total"`
	SnowflakeBillingVirtualWarehouseTotal          MetricConfig `mapstructure:"snowflake.billing.virtual_warehouse.total"`
	SnowflakeBillingWarehouseCloudServiceTotal     MetricConfig `mapstructure:"snowflake.billing.warehouse.cloud_service.total"`
	SnowflakeBillingWarehouseTotalCreditTotal      MetricConfig `mapstructure:"snowflake.billing.warehouse.total_credit.total"`
	SnowflakeBillingWarehouseVirtualWarehouseTotal MetricConfig `mapstructure:"snowflake.billing.warehouse.virtual_warehouse.total"`
	SnowflakeDatabaseBytesScannedAvg               MetricConfig `mapstructure:"snowflake.database.bytes_scanned.avg"`
	SnowflakeDatabaseQueryCount                    MetricConfig `mapstructure:"snowflake.database.query.count"`
	SnowflakeLoginsTotal                           MetricConfig `mapstructure:"snowflake.logins.total"`
	SnowflakePipeCreditsUsedTotal                  MetricConfig `mapstructure:"snowflake.pipe.credits_used.total"`
	SnowflakeQueryBlocked                          MetricConfig `mapstructure:"snowflake.query.blocked"`
	SnowflakeQueryBytesDeletedAvg                  MetricConfig `mapstructure:"snowflake.query.bytes_deleted.avg"`
	SnowflakeQueryBytesSpilledLocalAvg             MetricConfig `mapstructure:"snowflake.query.bytes_spilled.local.avg"`
	SnowflakeQueryBytesSpilledRemoteAvg            MetricConfig `mapstructure:"snowflake.query.bytes_spilled.remote.avg"`
	SnowflakeQueryBytesWrittenAvg                  MetricConfig `mapstructure:"snowflake.query.bytes_written.avg"`
	SnowflakeQueryCompilationTimeAvg               MetricConfig `mapstructure:"snowflake.query.compilation_time.avg"`
	SnowflakeQueryDataScannedCacheAvg              MetricConfig `mapstructure:"snowflake.query.data_scanned_cache.avg"`
	SnowflakeQueryExecuted                         MetricConfig `mapstructure:"snowflake.query.executed"`
	SnowflakeQueryExecutionTimeAvg                 MetricConfig `mapstructure:"snowflake.query.execution_time.avg"`
	SnowflakeQueryPartitionsScannedAvg             MetricConfig `mapstructure:"snowflake.query.partitions_scanned.avg"`
	SnowflakeQueryQueuedOverload                   MetricConfig `mapstructure:"snowflake.query.queued_overload"`
	SnowflakeQueryQueuedProvision                  MetricConfig `mapstructure:"snowflake.query.queued_provision"`
	SnowflakeQueuedOverloadTimeAvg                 MetricConfig `mapstructure:"snowflake.queued_overload_time.avg"`
	SnowflakeQueuedProvisioningTimeAvg             MetricConfig `mapstructure:"snowflake.queued_provisioning_time.avg"`
	SnowflakeQueuedRepairTimeAvg                   MetricConfig `mapstructure:"snowflake.queued_repair_time.avg"`
	SnowflakeRowsDeletedAvg                        MetricConfig `mapstructure:"snowflake.rows_deleted.avg"`
	SnowflakeRowsInsertedAvg                       MetricConfig `mapstructure:"snowflake.rows_inserted.avg"`
	SnowflakeRowsProducedAvg                       MetricConfig `mapstructure:"snowflake.rows_produced.avg"`
	SnowflakeRowsUnloadedAvg                       MetricConfig `mapstructure:"snowflake.rows_unloaded.avg"`
	SnowflakeRowsUpdatedAvg                        MetricConfig `mapstructure:"snowflake.rows_updated.avg"`
	SnowflakeSessionIDCount                        MetricConfig `mapstructure:"snowflake.session_id.count"`
	SnowflakeStorageFailsafeBytesTotal             MetricConfig `mapstructure:"snowflake.storage.failsafe_bytes.total"`
	SnowflakeStorageStageBytesTotal                MetricConfig `mapstructure:"snowflake.storage.stage_bytes.total"`
	SnowflakeStorageStorageBytesTotal              MetricConfig `mapstructure:"snowflake.storage.storage_bytes.total"`
	SnowflakeTotalElapsedTimeAvg                   MetricConfig `mapstructure:"snowflake.total_elapsed_time.avg"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		SnowflakeBillingCloudServiceTotal: MetricConfig{
			Enabled: false,
		},
		SnowflakeBillingTotalCreditTotal: MetricConfig{
			Enabled: false,
		},
		SnowflakeBillingVirtualWarehouseTotal: MetricConfig{
			Enabled: false,
		},
		SnowflakeBillingWarehouseCloudServiceTotal: MetricConfig{
			Enabled: false,
		},
		SnowflakeBillingWarehouseTotalCreditTotal: MetricConfig{
			Enabled: false,
		},
		SnowflakeBillingWarehouseVirtualWarehouseTotal: MetricConfig{
			Enabled: false,
		},
		SnowflakeDatabaseBytesScannedAvg: MetricConfig{
			Enabled: true,
		},
		SnowflakeDatabaseQueryCount: MetricConfig{
			Enabled: true,
		},
		SnowflakeLoginsTotal: MetricConfig{
			Enabled: false,
		},
		SnowflakePipeCreditsUsedTotal: MetricConfig{
			Enabled: false,
		},
		SnowflakeQueryBlocked: MetricConfig{
			Enabled: true,
		},
		SnowflakeQueryBytesDeletedAvg: MetricConfig{
			Enabled: true,
		},
		SnowflakeQueryBytesSpilledLocalAvg: MetricConfig{
			Enabled: false,
		},
		SnowflakeQueryBytesSpilledRemoteAvg: MetricConfig{
			Enabled: false,
		},
		SnowflakeQueryBytesWrittenAvg: MetricConfig{
			Enabled: true,
		},
		SnowflakeQueryCompilationTimeAvg: MetricConfig{
			Enabled: true,
		},
		SnowflakeQueryDataScannedCacheAvg: MetricConfig{
			Enabled: false,
		},
		SnowflakeQueryExecuted: MetricConfig{
			Enabled: true,
		},
		SnowflakeQueryExecutionTimeAvg: MetricConfig{
			Enabled: true,
		},
		SnowflakeQueryPartitionsScannedAvg: MetricConfig{
			Enabled: false,
		},
		SnowflakeQueryQueuedOverload: MetricConfig{
			Enabled: true,
		},
		SnowflakeQueryQueuedProvision: MetricConfig{
			Enabled: true,
		},
		SnowflakeQueuedOverloadTimeAvg: MetricConfig{
			Enabled: true,
		},
		SnowflakeQueuedProvisioningTimeAvg: MetricConfig{
			Enabled: true,
		},
		SnowflakeQueuedRepairTimeAvg: MetricConfig{
			Enabled: true,
		},
		SnowflakeRowsDeletedAvg: MetricConfig{
			Enabled: false,
		},
		SnowflakeRowsInsertedAvg: MetricConfig{
			Enabled: false,
		},
		SnowflakeRowsProducedAvg: MetricConfig{
			Enabled: false,
		},
		SnowflakeRowsUnloadedAvg: MetricConfig{
			Enabled: false,
		},
		SnowflakeRowsUpdatedAvg: MetricConfig{
			Enabled: false,
		},
		SnowflakeSessionIDCount: MetricConfig{
			Enabled: false,
		},
		SnowflakeStorageFailsafeBytesTotal: MetricConfig{
			Enabled: false,
		},
		SnowflakeStorageStageBytesTotal: MetricConfig{
			Enabled: true,
		},
		SnowflakeStorageStorageBytesTotal: MetricConfig{
			Enabled: true,
		},
		SnowflakeTotalElapsedTimeAvg: MetricConfig{
			Enabled: true,
		},
	}
}

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`
	// Experimental: MetricsInclude defines a list of filters for attribute values.
	// If the list is not empty, only metrics with matching resource attribute values will be emitted.
	MetricsInclude []filter.Config `mapstructure:"metrics_include"`
	// Experimental: MetricsExclude defines a list of filters for attribute values.
	// If the list is not empty, metrics with matching resource attribute values will not be emitted.
	// MetricsInclude has higher priority than MetricsExclude.
	MetricsExclude []filter.Config `mapstructure:"metrics_exclude"`

	enabledSetByUser bool
}

func (rac *ResourceAttributeConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(rac)
	if err != nil {
		return err
	}
	rac.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// ResourceAttributesConfig provides config for snowflake resource attributes.
type ResourceAttributesConfig struct {
	SnowflakeAccountName ResourceAttributeConfig `mapstructure:"snowflake.account.name"`
}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		SnowflakeAccountName: ResourceAttributeConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for snowflake metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsConfig            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesConfig `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsConfig(),
		ResourceAttributes: DefaultResourceAttributesConfig(),
	}
}
