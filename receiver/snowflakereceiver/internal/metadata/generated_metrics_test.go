// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: testDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			allMetricsCount++
			mb.RecordSnowflakeBillingCloudServiceTotalDataPoint(ts, 1, "service_type-val")

			allMetricsCount++
			mb.RecordSnowflakeBillingTotalCreditTotalDataPoint(ts, 1, "service_type-val")

			allMetricsCount++
			mb.RecordSnowflakeBillingVirtualWarehouseTotalDataPoint(ts, 1, "service_type-val")

			allMetricsCount++
			mb.RecordSnowflakeBillingWarehouseCloudServiceTotalDataPoint(ts, 1, "warehouse_name-val")

			allMetricsCount++
			mb.RecordSnowflakeBillingWarehouseTotalCreditTotalDataPoint(ts, 1, "warehouse_name-val")

			allMetricsCount++
			mb.RecordSnowflakeBillingWarehouseVirtualWarehouseTotalDataPoint(ts, 1, "warehouse_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeDatabaseBytesScannedAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeDatabaseQueryCountDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			allMetricsCount++
			mb.RecordSnowflakeLoginsTotalDataPoint(ts, 1, "error_message-val", "reported_client_type-val", "is_success-val")

			allMetricsCount++
			mb.RecordSnowflakePipeCreditsUsedTotalDataPoint(ts, 1, "pipe_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeQueryBlockedDataPoint(ts, 1, "warehouse_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeQueryBytesDeletedAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			allMetricsCount++
			mb.RecordSnowflakeQueryBytesSpilledLocalAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			allMetricsCount++
			mb.RecordSnowflakeQueryBytesSpilledRemoteAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeQueryBytesWrittenAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeQueryCompilationTimeAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			allMetricsCount++
			mb.RecordSnowflakeQueryDataScannedCacheAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeQueryExecutedDataPoint(ts, 1, "warehouse_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeQueryExecutionTimeAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			allMetricsCount++
			mb.RecordSnowflakeQueryPartitionsScannedAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeQueryQueuedOverloadDataPoint(ts, 1, "warehouse_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeQueryQueuedProvisionDataPoint(ts, 1, "warehouse_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeQueuedOverloadTimeAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeQueuedProvisioningTimeAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeQueuedRepairTimeAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			allMetricsCount++
			mb.RecordSnowflakeRowsDeletedAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			allMetricsCount++
			mb.RecordSnowflakeRowsInsertedAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			allMetricsCount++
			mb.RecordSnowflakeRowsProducedAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			allMetricsCount++
			mb.RecordSnowflakeRowsUnloadedAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			allMetricsCount++
			mb.RecordSnowflakeRowsUpdatedAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			allMetricsCount++
			mb.RecordSnowflakeSessionIDCountDataPoint(ts, 1, "user_name-val")

			allMetricsCount++
			mb.RecordSnowflakeStorageFailsafeBytesTotalDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeStorageStageBytesTotalDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeStorageStorageBytesTotalDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSnowflakeTotalElapsedTimeAvgDataPoint(ts, 1, "schema_name-val", "execution_status-val", "error_message-val", "query_type-val", "warehouse_name-val", "database_name-val", "warehouse_size-val")

			rb := mb.NewResourceBuilder()
			rb.SetSnowflakeAccountName("snowflake.account.name-val")
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "snowflake.billing.cloud_service.total":
					assert.False(t, validatedMetrics["snowflake.billing.cloud_service.total"], "Found a duplicate in the metrics slice: snowflake.billing.cloud_service.total")
					validatedMetrics["snowflake.billing.cloud_service.total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reported total credits used in the cloud service over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{credits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("service_type")
					assert.True(t, ok)
					assert.EqualValues(t, "service_type-val", attrVal.Str())
				case "snowflake.billing.total_credit.total":
					assert.False(t, validatedMetrics["snowflake.billing.total_credit.total"], "Found a duplicate in the metrics slice: snowflake.billing.total_credit.total")
					validatedMetrics["snowflake.billing.total_credit.total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reported total credits used across account over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{credits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("service_type")
					assert.True(t, ok)
					assert.EqualValues(t, "service_type-val", attrVal.Str())
				case "snowflake.billing.virtual_warehouse.total":
					assert.False(t, validatedMetrics["snowflake.billing.virtual_warehouse.total"], "Found a duplicate in the metrics slice: snowflake.billing.virtual_warehouse.total")
					validatedMetrics["snowflake.billing.virtual_warehouse.total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reported total credits used by virtual warehouse service over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{credits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("service_type")
					assert.True(t, ok)
					assert.EqualValues(t, "service_type-val", attrVal.Str())
				case "snowflake.billing.warehouse.cloud_service.total":
					assert.False(t, validatedMetrics["snowflake.billing.warehouse.cloud_service.total"], "Found a duplicate in the metrics slice: snowflake.billing.warehouse.cloud_service.total")
					validatedMetrics["snowflake.billing.warehouse.cloud_service.total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Credits used across cloud service for given warehouse over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{credits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
				case "snowflake.billing.warehouse.total_credit.total":
					assert.False(t, validatedMetrics["snowflake.billing.warehouse.total_credit.total"], "Found a duplicate in the metrics slice: snowflake.billing.warehouse.total_credit.total")
					validatedMetrics["snowflake.billing.warehouse.total_credit.total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total credits used associated with given warehouse over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{credits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
				case "snowflake.billing.warehouse.virtual_warehouse.total":
					assert.False(t, validatedMetrics["snowflake.billing.warehouse.virtual_warehouse.total"], "Found a duplicate in the metrics slice: snowflake.billing.warehouse.virtual_warehouse.total")
					validatedMetrics["snowflake.billing.warehouse.virtual_warehouse.total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total credits used by virtual warehouse service for given warehouse over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{credits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
				case "snowflake.database.bytes_scanned.avg":
					assert.False(t, validatedMetrics["snowflake.database.bytes_scanned.avg"], "Found a duplicate in the metrics slice: snowflake.database.bytes_scanned.avg")
					validatedMetrics["snowflake.database.bytes_scanned.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average bytes scanned in a database over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.database.query.count":
					assert.False(t, validatedMetrics["snowflake.database.query.count"], "Found a duplicate in the metrics slice: snowflake.database.query.count")
					validatedMetrics["snowflake.database.query.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total query count for database over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.logins.total":
					assert.False(t, validatedMetrics["snowflake.logins.total"], "Found a duplicate in the metrics slice: snowflake.logins.total")
					validatedMetrics["snowflake.logins.total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total login attempts for account over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("reported_client_type")
					assert.True(t, ok)
					assert.EqualValues(t, "reported_client_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("is_success")
					assert.True(t, ok)
					assert.EqualValues(t, "is_success-val", attrVal.Str())
				case "snowflake.pipe.credits_used.total":
					assert.False(t, validatedMetrics["snowflake.pipe.credits_used.total"], "Found a duplicate in the metrics slice: snowflake.pipe.credits_used.total")
					validatedMetrics["snowflake.pipe.credits_used.total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Snow pipe credits contotaled over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{credits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("pipe_name")
					assert.True(t, ok)
					assert.EqualValues(t, "pipe_name-val", attrVal.Str())
				case "snowflake.query.blocked":
					assert.False(t, validatedMetrics["snowflake.query.blocked"], "Found a duplicate in the metrics slice: snowflake.query.blocked")
					validatedMetrics["snowflake.query.blocked"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Blocked query count for warehouse over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
				case "snowflake.query.bytes_deleted.avg":
					assert.False(t, validatedMetrics["snowflake.query.bytes_deleted.avg"], "Found a duplicate in the metrics slice: snowflake.query.bytes_deleted.avg")
					validatedMetrics["snowflake.query.bytes_deleted.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average bytes deleted in database over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.query.bytes_spilled.local.avg":
					assert.False(t, validatedMetrics["snowflake.query.bytes_spilled.local.avg"], "Found a duplicate in the metrics slice: snowflake.query.bytes_spilled.local.avg")
					validatedMetrics["snowflake.query.bytes_spilled.local.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Avergae bytes spilled (intermediate results do not fit in memory) by local storage over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.query.bytes_spilled.remote.avg":
					assert.False(t, validatedMetrics["snowflake.query.bytes_spilled.remote.avg"], "Found a duplicate in the metrics slice: snowflake.query.bytes_spilled.remote.avg")
					validatedMetrics["snowflake.query.bytes_spilled.remote.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Avergae bytes spilled (intermediate results do not fit in memory) by remote storage over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.query.bytes_written.avg":
					assert.False(t, validatedMetrics["snowflake.query.bytes_written.avg"], "Found a duplicate in the metrics slice: snowflake.query.bytes_written.avg")
					validatedMetrics["snowflake.query.bytes_written.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average bytes written by database over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.query.compilation_time.avg":
					assert.False(t, validatedMetrics["snowflake.query.compilation_time.avg"], "Found a duplicate in the metrics slice: snowflake.query.compilation_time.avg")
					validatedMetrics["snowflake.query.compilation_time.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average time taken to compile query over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.query.data_scanned_cache.avg":
					assert.False(t, validatedMetrics["snowflake.query.data_scanned_cache.avg"], "Found a duplicate in the metrics slice: snowflake.query.data_scanned_cache.avg")
					validatedMetrics["snowflake.query.data_scanned_cache.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average percentage of data scanned from cache over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.query.executed":
					assert.False(t, validatedMetrics["snowflake.query.executed"], "Found a duplicate in the metrics slice: snowflake.query.executed")
					validatedMetrics["snowflake.query.executed"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Executed query count for warehouse over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
				case "snowflake.query.execution_time.avg":
					assert.False(t, validatedMetrics["snowflake.query.execution_time.avg"], "Found a duplicate in the metrics slice: snowflake.query.execution_time.avg")
					validatedMetrics["snowflake.query.execution_time.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average time spent executing queries in database over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.query.partitions_scanned.avg":
					assert.False(t, validatedMetrics["snowflake.query.partitions_scanned.avg"], "Found a duplicate in the metrics slice: snowflake.query.partitions_scanned.avg")
					validatedMetrics["snowflake.query.partitions_scanned.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of partitions scanned during query so far over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.query.queued_overload":
					assert.False(t, validatedMetrics["snowflake.query.queued_overload"], "Found a duplicate in the metrics slice: snowflake.query.queued_overload")
					validatedMetrics["snowflake.query.queued_overload"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Overloaded query count for warehouse over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
				case "snowflake.query.queued_provision":
					assert.False(t, validatedMetrics["snowflake.query.queued_provision"], "Found a duplicate in the metrics slice: snowflake.query.queued_provision")
					validatedMetrics["snowflake.query.queued_provision"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of compute resources queued for provisioning over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
				case "snowflake.queued_overload_time.avg":
					assert.False(t, validatedMetrics["snowflake.queued_overload_time.avg"], "Found a duplicate in the metrics slice: snowflake.queued_overload_time.avg")
					validatedMetrics["snowflake.queued_overload_time.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average time spent in warehouse queue due to warehouse being overloaded over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.queued_provisioning_time.avg":
					assert.False(t, validatedMetrics["snowflake.queued_provisioning_time.avg"], "Found a duplicate in the metrics slice: snowflake.queued_provisioning_time.avg")
					validatedMetrics["snowflake.queued_provisioning_time.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average time spent in warehouse queue waiting for resources to provision over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.queued_repair_time.avg":
					assert.False(t, validatedMetrics["snowflake.queued_repair_time.avg"], "Found a duplicate in the metrics slice: snowflake.queued_repair_time.avg")
					validatedMetrics["snowflake.queued_repair_time.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average time spent in warehouse queue waiting for compute resources to be repaired over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.rows_deleted.avg":
					assert.False(t, validatedMetrics["snowflake.rows_deleted.avg"], "Found a duplicate in the metrics slice: snowflake.rows_deleted.avg")
					validatedMetrics["snowflake.rows_deleted.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of rows deleted from a table (or tables) over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{rows}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.rows_inserted.avg":
					assert.False(t, validatedMetrics["snowflake.rows_inserted.avg"], "Found a duplicate in the metrics slice: snowflake.rows_inserted.avg")
					validatedMetrics["snowflake.rows_inserted.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of rows inserted into a table (or tables) over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{rows}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.rows_produced.avg":
					assert.False(t, validatedMetrics["snowflake.rows_produced.avg"], "Found a duplicate in the metrics slice: snowflake.rows_produced.avg")
					validatedMetrics["snowflake.rows_produced.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average number of rows produced by statement over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{rows}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.rows_unloaded.avg":
					assert.False(t, validatedMetrics["snowflake.rows_unloaded.avg"], "Found a duplicate in the metrics slice: snowflake.rows_unloaded.avg")
					validatedMetrics["snowflake.rows_unloaded.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average number of rows unloaded during data export over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{rows}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.rows_updated.avg":
					assert.False(t, validatedMetrics["snowflake.rows_updated.avg"], "Found a duplicate in the metrics slice: snowflake.rows_updated.avg")
					validatedMetrics["snowflake.rows_updated.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average number of rows updated in a table over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "{rows}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				case "snowflake.session_id.count":
					assert.False(t, validatedMetrics["snowflake.session_id.count"], "Found a duplicate in the metrics slice: snowflake.session_id.count")
					validatedMetrics["snowflake.session_id.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Distinct session id's associated with snowflake username over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("user_name")
					assert.True(t, ok)
					assert.EqualValues(t, "user_name-val", attrVal.Str())
				case "snowflake.storage.failsafe_bytes.total":
					assert.False(t, validatedMetrics["snowflake.storage.failsafe_bytes.total"], "Found a duplicate in the metrics slice: snowflake.storage.failsafe_bytes.total")
					validatedMetrics["snowflake.storage.failsafe_bytes.total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of bytes of data in Fail-safe.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "snowflake.storage.stage_bytes.total":
					assert.False(t, validatedMetrics["snowflake.storage.stage_bytes.total"], "Found a duplicate in the metrics slice: snowflake.storage.stage_bytes.total")
					validatedMetrics["snowflake.storage.stage_bytes.total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of bytes of stage storage used by files in all internal stages (named, table, user).", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "snowflake.storage.storage_bytes.total":
					assert.False(t, validatedMetrics["snowflake.storage.storage_bytes.total"], "Found a duplicate in the metrics slice: snowflake.storage.storage_bytes.total")
					validatedMetrics["snowflake.storage.storage_bytes.total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of bytes of table storage used, including bytes for data currently in Time Travel.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "snowflake.total_elapsed_time.avg":
					assert.False(t, validatedMetrics["snowflake.total_elapsed_time.avg"], "Found a duplicate in the metrics slice: snowflake.total_elapsed_time.avg")
					validatedMetrics["snowflake.total_elapsed_time.avg"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average elapsed time over the last 24 hour window.", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("schema_name")
					assert.True(t, ok)
					assert.EqualValues(t, "schema_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("execution_status")
					assert.True(t, ok)
					assert.EqualValues(t, "execution_status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("error_message")
					assert.True(t, ok)
					assert.EqualValues(t, "error_message-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("query_type")
					assert.True(t, ok)
					assert.EqualValues(t, "query_type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_name")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database_name")
					assert.True(t, ok)
					assert.EqualValues(t, "database_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("warehouse_size")
					assert.True(t, ok)
					assert.EqualValues(t, "warehouse_size-val", attrVal.Str())
				}
			}
		})
	}
}
