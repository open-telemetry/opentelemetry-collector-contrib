// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

var MetricsInfo = metricsInfo{
	ChassisPowerstate: metricInfo{
		Name: "chassis.powerstate",
	},
	ChassisStatusHealth: metricInfo{
		Name: "chassis.status.health",
	},
	ChassisStatusState: metricInfo{
		Name: "chassis.status.state",
	},
	FanReading: metricInfo{
		Name: "fan.reading",
	},
	FanStatusHealth: metricInfo{
		Name: "fan.status.health",
	},
	FanStatusState: metricInfo{
		Name: "fan.status.state",
	},
	SystemPowerstate: metricInfo{
		Name: "system.powerstate",
	},
	SystemStatusHealth: metricInfo{
		Name: "system.status.health",
	},
	SystemStatusState: metricInfo{
		Name: "system.status.state",
	},
	TemperatureReading: metricInfo{
		Name: "temperature.reading",
	},
	TemperatureStatusHealth: metricInfo{
		Name: "temperature.status.health",
	},
	TemperatureStatusState: metricInfo{
		Name: "temperature.status.state",
	},
}

type metricsInfo struct {
	ChassisPowerstate       metricInfo
	ChassisStatusHealth     metricInfo
	ChassisStatusState      metricInfo
	FanReading              metricInfo
	FanStatusHealth         metricInfo
	FanStatusState          metricInfo
	SystemPowerstate        metricInfo
	SystemStatusHealth      metricInfo
	SystemStatusState       metricInfo
	TemperatureReading      metricInfo
	TemperatureStatusHealth metricInfo
	TemperatureStatusState  metricInfo
}

type metricInfo struct {
	Name string
}

type metricChassisPowerstate struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills chassis.powerstate metric with initial data.
func (m *metricChassisPowerstate) init() {
	m.data.SetName("chassis.powerstate")
	m.data.SetDescription("Measures the power state of a chassis (-1 unknown, 0 off, 1 on).")
	m.data.SetUnit("{powerstate}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricChassisPowerstate) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, chassisAssetTagAttributeValue string, chassisModelAttributeValue string, chassisNameAttributeValue string, chassisManufacturerAttributeValue string, chassisSerialNumberAttributeValue string, chassisSkuAttributeValue string, chassisChassisTypeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("chassis.id", chassisIDAttributeValue)
	dp.Attributes().PutStr("chassis.asset_tag", chassisAssetTagAttributeValue)
	dp.Attributes().PutStr("chassis.model", chassisModelAttributeValue)
	dp.Attributes().PutStr("chassis.name", chassisNameAttributeValue)
	dp.Attributes().PutStr("chassis.manufacturer", chassisManufacturerAttributeValue)
	dp.Attributes().PutStr("chassis.serial_number", chassisSerialNumberAttributeValue)
	dp.Attributes().PutStr("chassis.sku", chassisSkuAttributeValue)
	dp.Attributes().PutStr("chassis.chassis_type", chassisChassisTypeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricChassisPowerstate) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricChassisPowerstate) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricChassisPowerstate(cfg MetricConfig) metricChassisPowerstate {
	m := metricChassisPowerstate{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricChassisStatusHealth struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills chassis.status.health metric with initial data.
func (m *metricChassisStatusHealth) init() {
	m.data.SetName("chassis.status.health")
	m.data.SetDescription("Measures the health of a chassis (-1 unknown, 0 critical, 1 ok, 2 warning).")
	m.data.SetUnit("{health}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricChassisStatusHealth) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, chassisAssetTagAttributeValue string, chassisModelAttributeValue string, chassisNameAttributeValue string, chassisManufacturerAttributeValue string, chassisSerialNumberAttributeValue string, chassisSkuAttributeValue string, chassisChassisTypeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("chassis.id", chassisIDAttributeValue)
	dp.Attributes().PutStr("chassis.asset_tag", chassisAssetTagAttributeValue)
	dp.Attributes().PutStr("chassis.model", chassisModelAttributeValue)
	dp.Attributes().PutStr("chassis.name", chassisNameAttributeValue)
	dp.Attributes().PutStr("chassis.manufacturer", chassisManufacturerAttributeValue)
	dp.Attributes().PutStr("chassis.serial_number", chassisSerialNumberAttributeValue)
	dp.Attributes().PutStr("chassis.sku", chassisSkuAttributeValue)
	dp.Attributes().PutStr("chassis.chassis_type", chassisChassisTypeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricChassisStatusHealth) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricChassisStatusHealth) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricChassisStatusHealth(cfg MetricConfig) metricChassisStatusHealth {
	m := metricChassisStatusHealth{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricChassisStatusState struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills chassis.status.state metric with initial data.
func (m *metricChassisStatusState) init() {
	m.data.SetName("chassis.status.state")
	m.data.SetDescription("Measures the state of a chassis (-1 unknown, 0 disabled, 1 enabled).")
	m.data.SetUnit("{state}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricChassisStatusState) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, chassisAssetTagAttributeValue string, chassisModelAttributeValue string, chassisNameAttributeValue string, chassisManufacturerAttributeValue string, chassisSerialNumberAttributeValue string, chassisSkuAttributeValue string, chassisChassisTypeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("chassis.id", chassisIDAttributeValue)
	dp.Attributes().PutStr("chassis.asset_tag", chassisAssetTagAttributeValue)
	dp.Attributes().PutStr("chassis.model", chassisModelAttributeValue)
	dp.Attributes().PutStr("chassis.name", chassisNameAttributeValue)
	dp.Attributes().PutStr("chassis.manufacturer", chassisManufacturerAttributeValue)
	dp.Attributes().PutStr("chassis.serial_number", chassisSerialNumberAttributeValue)
	dp.Attributes().PutStr("chassis.sku", chassisSkuAttributeValue)
	dp.Attributes().PutStr("chassis.chassis_type", chassisChassisTypeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricChassisStatusState) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricChassisStatusState) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricChassisStatusState(cfg MetricConfig) metricChassisStatusState {
	m := metricChassisStatusState{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricFanReading struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills fan.reading metric with initial data.
func (m *metricFanReading) init() {
	m.data.SetName("fan.reading")
	m.data.SetDescription("Measures the reading of a chassis fan.")
	m.data.SetUnit("{%}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricFanReading) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, fanNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("chassis.id", chassisIDAttributeValue)
	dp.Attributes().PutStr("fan.name", fanNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricFanReading) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricFanReading) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricFanReading(cfg MetricConfig) metricFanReading {
	m := metricFanReading{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricFanStatusHealth struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills fan.status.health metric with initial data.
func (m *metricFanStatusHealth) init() {
	m.data.SetName("fan.status.health")
	m.data.SetDescription("Measures the health of a chassis fan (-1 unknown, 0 critical, 1 ok, 2 warning).")
	m.data.SetUnit("{health}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricFanStatusHealth) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, fanNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("chassis.id", chassisIDAttributeValue)
	dp.Attributes().PutStr("fan.name", fanNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricFanStatusHealth) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricFanStatusHealth) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricFanStatusHealth(cfg MetricConfig) metricFanStatusHealth {
	m := metricFanStatusHealth{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricFanStatusState struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills fan.status.state metric with initial data.
func (m *metricFanStatusState) init() {
	m.data.SetName("fan.status.state")
	m.data.SetDescription("Measures the state of a chassis fan (-1 unknown, 0 disabled, 1 enabled).")
	m.data.SetUnit("{state}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricFanStatusState) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, fanNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("chassis.id", chassisIDAttributeValue)
	dp.Attributes().PutStr("fan.name", fanNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricFanStatusState) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricFanStatusState) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricFanStatusState(cfg MetricConfig) metricFanStatusState {
	m := metricFanStatusState{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemPowerstate struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.powerstate metric with initial data.
func (m *metricSystemPowerstate) init() {
	m.data.SetName("system.powerstate")
	m.data.SetDescription("Measures the power state of a system (-1 unknown, 0 off, 1 on).")
	m.data.SetUnit("{powerstate}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemPowerstate) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, baseURLAttributeValue string, systemIDAttributeValue string, systemAssetTagAttributeValue string, systemBiosVersionAttributeValue string, systemHostNameAttributeValue string, systemModelAttributeValue string, systemNameAttributeValue string, systemManufacturerAttributeValue string, systemSerialNumberAttributeValue string, systemSkuAttributeValue string, systemSystemTypeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("system.id", systemIDAttributeValue)
	dp.Attributes().PutStr("system.asset_tag", systemAssetTagAttributeValue)
	dp.Attributes().PutStr("system.bios_version", systemBiosVersionAttributeValue)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("system.model", systemModelAttributeValue)
	dp.Attributes().PutStr("system.name", systemNameAttributeValue)
	dp.Attributes().PutStr("system.manufacturer", systemManufacturerAttributeValue)
	dp.Attributes().PutStr("system.serial_number", systemSerialNumberAttributeValue)
	dp.Attributes().PutStr("system.sku", systemSkuAttributeValue)
	dp.Attributes().PutStr("system.system_type", systemSystemTypeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemPowerstate) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemPowerstate) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemPowerstate(cfg MetricConfig) metricSystemPowerstate {
	m := metricSystemPowerstate{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemStatusHealth struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.status.health metric with initial data.
func (m *metricSystemStatusHealth) init() {
	m.data.SetName("system.status.health")
	m.data.SetDescription("Measures the health of a system (-1 unknown, 0 critical, 1 ok, 2 warning).")
	m.data.SetUnit("{health}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemStatusHealth) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, baseURLAttributeValue string, systemIDAttributeValue string, systemAssetTagAttributeValue string, systemBiosVersionAttributeValue string, systemHostNameAttributeValue string, systemModelAttributeValue string, systemNameAttributeValue string, systemManufacturerAttributeValue string, systemSerialNumberAttributeValue string, systemSkuAttributeValue string, systemSystemTypeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("system.id", systemIDAttributeValue)
	dp.Attributes().PutStr("system.asset_tag", systemAssetTagAttributeValue)
	dp.Attributes().PutStr("system.bios_version", systemBiosVersionAttributeValue)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("system.model", systemModelAttributeValue)
	dp.Attributes().PutStr("system.name", systemNameAttributeValue)
	dp.Attributes().PutStr("system.manufacturer", systemManufacturerAttributeValue)
	dp.Attributes().PutStr("system.serial_number", systemSerialNumberAttributeValue)
	dp.Attributes().PutStr("system.sku", systemSkuAttributeValue)
	dp.Attributes().PutStr("system.system_type", systemSystemTypeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemStatusHealth) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemStatusHealth) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemStatusHealth(cfg MetricConfig) metricSystemStatusHealth {
	m := metricSystemStatusHealth{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemStatusState struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.status.state metric with initial data.
func (m *metricSystemStatusState) init() {
	m.data.SetName("system.status.state")
	m.data.SetDescription("Measures the state of a system (-1 unknown, 0 disabled, 1 enabled).")
	m.data.SetUnit("{state}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemStatusState) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, baseURLAttributeValue string, systemIDAttributeValue string, systemAssetTagAttributeValue string, systemBiosVersionAttributeValue string, systemHostNameAttributeValue string, systemModelAttributeValue string, systemNameAttributeValue string, systemManufacturerAttributeValue string, systemSerialNumberAttributeValue string, systemSkuAttributeValue string, systemSystemTypeAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("system.id", systemIDAttributeValue)
	dp.Attributes().PutStr("system.asset_tag", systemAssetTagAttributeValue)
	dp.Attributes().PutStr("system.bios_version", systemBiosVersionAttributeValue)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("system.model", systemModelAttributeValue)
	dp.Attributes().PutStr("system.name", systemNameAttributeValue)
	dp.Attributes().PutStr("system.manufacturer", systemManufacturerAttributeValue)
	dp.Attributes().PutStr("system.serial_number", systemSerialNumberAttributeValue)
	dp.Attributes().PutStr("system.sku", systemSkuAttributeValue)
	dp.Attributes().PutStr("system.system_type", systemSystemTypeAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemStatusState) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemStatusState) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemStatusState(cfg MetricConfig) metricSystemStatusState {
	m := metricSystemStatusState{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricTemperatureReading struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills temperature.reading metric with initial data.
func (m *metricTemperatureReading) init() {
	m.data.SetName("temperature.reading")
	m.data.SetDescription("Measures the reading of a chassis temperature.")
	m.data.SetUnit("{%}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricTemperatureReading) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, fanNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("chassis.id", chassisIDAttributeValue)
	dp.Attributes().PutStr("fan.name", fanNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricTemperatureReading) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricTemperatureReading) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricTemperatureReading(cfg MetricConfig) metricTemperatureReading {
	m := metricTemperatureReading{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricTemperatureStatusHealth struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills temperature.status.health metric with initial data.
func (m *metricTemperatureStatusHealth) init() {
	m.data.SetName("temperature.status.health")
	m.data.SetDescription("Measures the health of a chassis temperature (-1 unknown, 0 critical, 1 ok, 2 warning).")
	m.data.SetUnit("{health}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricTemperatureStatusHealth) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, temperatureNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("chassis.id", chassisIDAttributeValue)
	dp.Attributes().PutStr("temperature.name", temperatureNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricTemperatureStatusHealth) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricTemperatureStatusHealth) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricTemperatureStatusHealth(cfg MetricConfig) metricTemperatureStatusHealth {
	m := metricTemperatureStatusHealth{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricTemperatureStatusState struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills temperature.status.state metric with initial data.
func (m *metricTemperatureStatusState) init() {
	m.data.SetName("temperature.status.state")
	m.data.SetDescription("Measures the state of a chassis temperature (-1 unknown, 0 disabled, 1 enabled).")
	m.data.SetUnit("{state}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricTemperatureStatusState) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, temperatureNameAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("system.host_name", systemHostNameAttributeValue)
	dp.Attributes().PutStr("base_url", baseURLAttributeValue)
	dp.Attributes().PutStr("chassis.id", chassisIDAttributeValue)
	dp.Attributes().PutStr("temperature.name", temperatureNameAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricTemperatureStatusState) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricTemperatureStatusState) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricTemperatureStatusState(cfg MetricConfig) metricTemperatureStatusState {
	m := metricTemperatureStatusState{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                        MetricsBuilderConfig // config of the metrics builder.
	startTime                     pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity               int                  // maximum observed number of metrics per resource.
	metricsBuffer                 pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                     component.BuildInfo  // contains version information.
	metricChassisPowerstate       metricChassisPowerstate
	metricChassisStatusHealth     metricChassisStatusHealth
	metricChassisStatusState      metricChassisStatusState
	metricFanReading              metricFanReading
	metricFanStatusHealth         metricFanStatusHealth
	metricFanStatusState          metricFanStatusState
	metricSystemPowerstate        metricSystemPowerstate
	metricSystemStatusHealth      metricSystemStatusHealth
	metricSystemStatusState       metricSystemStatusState
	metricTemperatureReading      metricTemperatureReading
	metricTemperatureStatusHealth metricTemperatureStatusHealth
	metricTemperatureStatusState  metricTemperatureStatusState
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}
func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                        mbc,
		startTime:                     pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                 pmetric.NewMetrics(),
		buildInfo:                     settings.BuildInfo,
		metricChassisPowerstate:       newMetricChassisPowerstate(mbc.Metrics.ChassisPowerstate),
		metricChassisStatusHealth:     newMetricChassisStatusHealth(mbc.Metrics.ChassisStatusHealth),
		metricChassisStatusState:      newMetricChassisStatusState(mbc.Metrics.ChassisStatusState),
		metricFanReading:              newMetricFanReading(mbc.Metrics.FanReading),
		metricFanStatusHealth:         newMetricFanStatusHealth(mbc.Metrics.FanStatusHealth),
		metricFanStatusState:          newMetricFanStatusState(mbc.Metrics.FanStatusState),
		metricSystemPowerstate:        newMetricSystemPowerstate(mbc.Metrics.SystemPowerstate),
		metricSystemStatusHealth:      newMetricSystemStatusHealth(mbc.Metrics.SystemStatusHealth),
		metricSystemStatusState:       newMetricSystemStatusState(mbc.Metrics.SystemStatusState),
		metricTemperatureReading:      newMetricTemperatureReading(mbc.Metrics.TemperatureReading),
		metricTemperatureStatusHealth: newMetricTemperatureStatusHealth(mbc.Metrics.TemperatureStatusHealth),
		metricTemperatureStatusState:  newMetricTemperatureStatusState(mbc.Metrics.TemperatureStatusState),
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName(ScopeName)
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricChassisPowerstate.emit(ils.Metrics())
	mb.metricChassisStatusHealth.emit(ils.Metrics())
	mb.metricChassisStatusState.emit(ils.Metrics())
	mb.metricFanReading.emit(ils.Metrics())
	mb.metricFanStatusHealth.emit(ils.Metrics())
	mb.metricFanStatusState.emit(ils.Metrics())
	mb.metricSystemPowerstate.emit(ils.Metrics())
	mb.metricSystemStatusHealth.emit(ils.Metrics())
	mb.metricSystemStatusState.emit(ils.Metrics())
	mb.metricTemperatureReading.emit(ils.Metrics())
	mb.metricTemperatureStatusHealth.emit(ils.Metrics())
	mb.metricTemperatureStatusState.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordChassisPowerstateDataPoint adds a data point to chassis.powerstate metric.
func (mb *MetricsBuilder) RecordChassisPowerstateDataPoint(ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, chassisAssetTagAttributeValue string, chassisModelAttributeValue string, chassisNameAttributeValue string, chassisManufacturerAttributeValue string, chassisSerialNumberAttributeValue string, chassisSkuAttributeValue string, chassisChassisTypeAttributeValue string) {
	mb.metricChassisPowerstate.recordDataPoint(mb.startTime, ts, val, systemHostNameAttributeValue, baseURLAttributeValue, chassisIDAttributeValue, chassisAssetTagAttributeValue, chassisModelAttributeValue, chassisNameAttributeValue, chassisManufacturerAttributeValue, chassisSerialNumberAttributeValue, chassisSkuAttributeValue, chassisChassisTypeAttributeValue)
}

// RecordChassisStatusHealthDataPoint adds a data point to chassis.status.health metric.
func (mb *MetricsBuilder) RecordChassisStatusHealthDataPoint(ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, chassisAssetTagAttributeValue string, chassisModelAttributeValue string, chassisNameAttributeValue string, chassisManufacturerAttributeValue string, chassisSerialNumberAttributeValue string, chassisSkuAttributeValue string, chassisChassisTypeAttributeValue string) {
	mb.metricChassisStatusHealth.recordDataPoint(mb.startTime, ts, val, systemHostNameAttributeValue, baseURLAttributeValue, chassisIDAttributeValue, chassisAssetTagAttributeValue, chassisModelAttributeValue, chassisNameAttributeValue, chassisManufacturerAttributeValue, chassisSerialNumberAttributeValue, chassisSkuAttributeValue, chassisChassisTypeAttributeValue)
}

// RecordChassisStatusStateDataPoint adds a data point to chassis.status.state metric.
func (mb *MetricsBuilder) RecordChassisStatusStateDataPoint(ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, chassisAssetTagAttributeValue string, chassisModelAttributeValue string, chassisNameAttributeValue string, chassisManufacturerAttributeValue string, chassisSerialNumberAttributeValue string, chassisSkuAttributeValue string, chassisChassisTypeAttributeValue string) {
	mb.metricChassisStatusState.recordDataPoint(mb.startTime, ts, val, systemHostNameAttributeValue, baseURLAttributeValue, chassisIDAttributeValue, chassisAssetTagAttributeValue, chassisModelAttributeValue, chassisNameAttributeValue, chassisManufacturerAttributeValue, chassisSerialNumberAttributeValue, chassisSkuAttributeValue, chassisChassisTypeAttributeValue)
}

// RecordFanReadingDataPoint adds a data point to fan.reading metric.
func (mb *MetricsBuilder) RecordFanReadingDataPoint(ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, fanNameAttributeValue string) {
	mb.metricFanReading.recordDataPoint(mb.startTime, ts, val, systemHostNameAttributeValue, baseURLAttributeValue, chassisIDAttributeValue, fanNameAttributeValue)
}

// RecordFanStatusHealthDataPoint adds a data point to fan.status.health metric.
func (mb *MetricsBuilder) RecordFanStatusHealthDataPoint(ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, fanNameAttributeValue string) {
	mb.metricFanStatusHealth.recordDataPoint(mb.startTime, ts, val, systemHostNameAttributeValue, baseURLAttributeValue, chassisIDAttributeValue, fanNameAttributeValue)
}

// RecordFanStatusStateDataPoint adds a data point to fan.status.state metric.
func (mb *MetricsBuilder) RecordFanStatusStateDataPoint(ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, fanNameAttributeValue string) {
	mb.metricFanStatusState.recordDataPoint(mb.startTime, ts, val, systemHostNameAttributeValue, baseURLAttributeValue, chassisIDAttributeValue, fanNameAttributeValue)
}

// RecordSystemPowerstateDataPoint adds a data point to system.powerstate metric.
func (mb *MetricsBuilder) RecordSystemPowerstateDataPoint(ts pcommon.Timestamp, val int64, baseURLAttributeValue string, systemIDAttributeValue string, systemAssetTagAttributeValue string, systemBiosVersionAttributeValue string, systemHostNameAttributeValue string, systemModelAttributeValue string, systemNameAttributeValue string, systemManufacturerAttributeValue string, systemSerialNumberAttributeValue string, systemSkuAttributeValue string, systemSystemTypeAttributeValue string) {
	mb.metricSystemPowerstate.recordDataPoint(mb.startTime, ts, val, baseURLAttributeValue, systemIDAttributeValue, systemAssetTagAttributeValue, systemBiosVersionAttributeValue, systemHostNameAttributeValue, systemModelAttributeValue, systemNameAttributeValue, systemManufacturerAttributeValue, systemSerialNumberAttributeValue, systemSkuAttributeValue, systemSystemTypeAttributeValue)
}

// RecordSystemStatusHealthDataPoint adds a data point to system.status.health metric.
func (mb *MetricsBuilder) RecordSystemStatusHealthDataPoint(ts pcommon.Timestamp, val int64, baseURLAttributeValue string, systemIDAttributeValue string, systemAssetTagAttributeValue string, systemBiosVersionAttributeValue string, systemHostNameAttributeValue string, systemModelAttributeValue string, systemNameAttributeValue string, systemManufacturerAttributeValue string, systemSerialNumberAttributeValue string, systemSkuAttributeValue string, systemSystemTypeAttributeValue string) {
	mb.metricSystemStatusHealth.recordDataPoint(mb.startTime, ts, val, baseURLAttributeValue, systemIDAttributeValue, systemAssetTagAttributeValue, systemBiosVersionAttributeValue, systemHostNameAttributeValue, systemModelAttributeValue, systemNameAttributeValue, systemManufacturerAttributeValue, systemSerialNumberAttributeValue, systemSkuAttributeValue, systemSystemTypeAttributeValue)
}

// RecordSystemStatusStateDataPoint adds a data point to system.status.state metric.
func (mb *MetricsBuilder) RecordSystemStatusStateDataPoint(ts pcommon.Timestamp, val int64, baseURLAttributeValue string, systemIDAttributeValue string, systemAssetTagAttributeValue string, systemBiosVersionAttributeValue string, systemHostNameAttributeValue string, systemModelAttributeValue string, systemNameAttributeValue string, systemManufacturerAttributeValue string, systemSerialNumberAttributeValue string, systemSkuAttributeValue string, systemSystemTypeAttributeValue string) {
	mb.metricSystemStatusState.recordDataPoint(mb.startTime, ts, val, baseURLAttributeValue, systemIDAttributeValue, systemAssetTagAttributeValue, systemBiosVersionAttributeValue, systemHostNameAttributeValue, systemModelAttributeValue, systemNameAttributeValue, systemManufacturerAttributeValue, systemSerialNumberAttributeValue, systemSkuAttributeValue, systemSystemTypeAttributeValue)
}

// RecordTemperatureReadingDataPoint adds a data point to temperature.reading metric.
func (mb *MetricsBuilder) RecordTemperatureReadingDataPoint(ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, fanNameAttributeValue string) {
	mb.metricTemperatureReading.recordDataPoint(mb.startTime, ts, val, systemHostNameAttributeValue, baseURLAttributeValue, chassisIDAttributeValue, fanNameAttributeValue)
}

// RecordTemperatureStatusHealthDataPoint adds a data point to temperature.status.health metric.
func (mb *MetricsBuilder) RecordTemperatureStatusHealthDataPoint(ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, temperatureNameAttributeValue string) {
	mb.metricTemperatureStatusHealth.recordDataPoint(mb.startTime, ts, val, systemHostNameAttributeValue, baseURLAttributeValue, chassisIDAttributeValue, temperatureNameAttributeValue)
}

// RecordTemperatureStatusStateDataPoint adds a data point to temperature.status.state metric.
func (mb *MetricsBuilder) RecordTemperatureStatusStateDataPoint(ts pcommon.Timestamp, val int64, systemHostNameAttributeValue string, baseURLAttributeValue string, chassisIDAttributeValue string, temperatureNameAttributeValue string) {
	mb.metricTemperatureStatusState.recordDataPoint(mb.startTime, ts, val, systemHostNameAttributeValue, baseURLAttributeValue, chassisIDAttributeValue, temperatureNameAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
