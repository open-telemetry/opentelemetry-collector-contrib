// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for redfish metrics.
type MetricsConfig struct {
	ChassisPowerstate       MetricConfig `mapstructure:"chassis.powerstate"`
	ChassisStatusHealth     MetricConfig `mapstructure:"chassis.status.health"`
	ChassisStatusState      MetricConfig `mapstructure:"chassis.status.state"`
	FanReading              MetricConfig `mapstructure:"fan.reading"`
	FanStatusHealth         MetricConfig `mapstructure:"fan.status.health"`
	FanStatusState          MetricConfig `mapstructure:"fan.status.state"`
	SystemPowerstate        MetricConfig `mapstructure:"system.powerstate"`
	SystemStatusHealth      MetricConfig `mapstructure:"system.status.health"`
	SystemStatusState       MetricConfig `mapstructure:"system.status.state"`
	TemperatureReading      MetricConfig `mapstructure:"temperature.reading"`
	TemperatureStatusHealth MetricConfig `mapstructure:"temperature.status.health"`
	TemperatureStatusState  MetricConfig `mapstructure:"temperature.status.state"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		ChassisPowerstate: MetricConfig{
			Enabled: true,
		},
		ChassisStatusHealth: MetricConfig{
			Enabled: true,
		},
		ChassisStatusState: MetricConfig{
			Enabled: true,
		},
		FanReading: MetricConfig{
			Enabled: true,
		},
		FanStatusHealth: MetricConfig{
			Enabled: true,
		},
		FanStatusState: MetricConfig{
			Enabled: true,
		},
		SystemPowerstate: MetricConfig{
			Enabled: true,
		},
		SystemStatusHealth: MetricConfig{
			Enabled: true,
		},
		SystemStatusState: MetricConfig{
			Enabled: true,
		},
		TemperatureReading: MetricConfig{
			Enabled: true,
		},
		TemperatureStatusHealth: MetricConfig{
			Enabled: true,
		},
		TemperatureStatusState: MetricConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for redfish metrics builder.
type MetricsBuilderConfig struct {
	Metrics MetricsConfig `mapstructure:"metrics"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics: DefaultMetricsConfig(),
	}
}
