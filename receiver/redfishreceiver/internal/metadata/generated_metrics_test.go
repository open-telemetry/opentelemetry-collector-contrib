// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordChassisPowerstateDataPoint(ts, 1, "system.host_name-val", "base_url-val", "chassis.id-val", "chassis.asset_tag-val", "chassis.model-val", "chassis.name-val", "chassis.manufacturer-val", "chassis.serial_number-val", "chassis.sku-val", "chassis.chassis_type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordChassisStatusHealthDataPoint(ts, 1, "system.host_name-val", "base_url-val", "chassis.id-val", "chassis.asset_tag-val", "chassis.model-val", "chassis.name-val", "chassis.manufacturer-val", "chassis.serial_number-val", "chassis.sku-val", "chassis.chassis_type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordChassisStatusStateDataPoint(ts, 1, "system.host_name-val", "base_url-val", "chassis.id-val", "chassis.asset_tag-val", "chassis.model-val", "chassis.name-val", "chassis.manufacturer-val", "chassis.serial_number-val", "chassis.sku-val", "chassis.chassis_type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordFanReadingDataPoint(ts, 1, "system.host_name-val", "base_url-val", "chassis.id-val", "fan.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordFanStatusHealthDataPoint(ts, 1, "system.host_name-val", "base_url-val", "chassis.id-val", "fan.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordFanStatusStateDataPoint(ts, 1, "system.host_name-val", "base_url-val", "chassis.id-val", "fan.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPowerstateDataPoint(ts, 1, "base_url-val", "system.id-val", "system.asset_tag-val", "system.bios_version-val", "system.host_name-val", "system.model-val", "system.name-val", "system.manufacturer-val", "system.serial_number-val", "system.sku-val", "system.system_type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemStatusHealthDataPoint(ts, 1, "base_url-val", "system.id-val", "system.asset_tag-val", "system.bios_version-val", "system.host_name-val", "system.model-val", "system.name-val", "system.manufacturer-val", "system.serial_number-val", "system.sku-val", "system.system_type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemStatusStateDataPoint(ts, 1, "base_url-val", "system.id-val", "system.asset_tag-val", "system.bios_version-val", "system.host_name-val", "system.model-val", "system.name-val", "system.manufacturer-val", "system.serial_number-val", "system.sku-val", "system.system_type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordTemperatureReadingDataPoint(ts, 1, "system.host_name-val", "base_url-val", "chassis.id-val", "fan.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordTemperatureStatusHealthDataPoint(ts, 1, "system.host_name-val", "base_url-val", "chassis.id-val", "temperature.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordTemperatureStatusStateDataPoint(ts, 1, "system.host_name-val", "base_url-val", "chassis.id-val", "temperature.name-val")

			res := pcommon.NewResource()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "chassis.powerstate":
					assert.False(t, validatedMetrics["chassis.powerstate"], "Found a duplicate in the metrics slice: chassis.powerstate")
					validatedMetrics["chassis.powerstate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the power state of a chassis (-1 unknown, 0 off, 1 on).", ms.At(i).Description())
					assert.Equal(t, "{powerstate}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.id")
					assert.True(t, ok)
					assert.Equal(t, "chassis.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.asset_tag")
					assert.True(t, ok)
					assert.Equal(t, "chassis.asset_tag-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.model")
					assert.True(t, ok)
					assert.Equal(t, "chassis.model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.name")
					assert.True(t, ok)
					assert.Equal(t, "chassis.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.manufacturer")
					assert.True(t, ok)
					assert.Equal(t, "chassis.manufacturer-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.serial_number")
					assert.True(t, ok)
					assert.Equal(t, "chassis.serial_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.sku")
					assert.True(t, ok)
					assert.Equal(t, "chassis.sku-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.chassis_type")
					assert.True(t, ok)
					assert.Equal(t, "chassis.chassis_type-val", attrVal.Str())
				case "chassis.status.health":
					assert.False(t, validatedMetrics["chassis.status.health"], "Found a duplicate in the metrics slice: chassis.status.health")
					validatedMetrics["chassis.status.health"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the health of a chassis (-1 unknown, 0 critical, 1 ok, 2 warning).", ms.At(i).Description())
					assert.Equal(t, "{health}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.id")
					assert.True(t, ok)
					assert.Equal(t, "chassis.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.asset_tag")
					assert.True(t, ok)
					assert.Equal(t, "chassis.asset_tag-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.model")
					assert.True(t, ok)
					assert.Equal(t, "chassis.model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.name")
					assert.True(t, ok)
					assert.Equal(t, "chassis.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.manufacturer")
					assert.True(t, ok)
					assert.Equal(t, "chassis.manufacturer-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.serial_number")
					assert.True(t, ok)
					assert.Equal(t, "chassis.serial_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.sku")
					assert.True(t, ok)
					assert.Equal(t, "chassis.sku-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.chassis_type")
					assert.True(t, ok)
					assert.Equal(t, "chassis.chassis_type-val", attrVal.Str())
				case "chassis.status.state":
					assert.False(t, validatedMetrics["chassis.status.state"], "Found a duplicate in the metrics slice: chassis.status.state")
					validatedMetrics["chassis.status.state"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the state of a chassis (-1 unknown, 0 disabled, 1 enabled).", ms.At(i).Description())
					assert.Equal(t, "{state}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.id")
					assert.True(t, ok)
					assert.Equal(t, "chassis.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.asset_tag")
					assert.True(t, ok)
					assert.Equal(t, "chassis.asset_tag-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.model")
					assert.True(t, ok)
					assert.Equal(t, "chassis.model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.name")
					assert.True(t, ok)
					assert.Equal(t, "chassis.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.manufacturer")
					assert.True(t, ok)
					assert.Equal(t, "chassis.manufacturer-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.serial_number")
					assert.True(t, ok)
					assert.Equal(t, "chassis.serial_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.sku")
					assert.True(t, ok)
					assert.Equal(t, "chassis.sku-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.chassis_type")
					assert.True(t, ok)
					assert.Equal(t, "chassis.chassis_type-val", attrVal.Str())
				case "fan.reading":
					assert.False(t, validatedMetrics["fan.reading"], "Found a duplicate in the metrics slice: fan.reading")
					validatedMetrics["fan.reading"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the reading of a chassis fan.", ms.At(i).Description())
					assert.Equal(t, "{%}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.id")
					assert.True(t, ok)
					assert.Equal(t, "chassis.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("fan.name")
					assert.True(t, ok)
					assert.Equal(t, "fan.name-val", attrVal.Str())
				case "fan.status.health":
					assert.False(t, validatedMetrics["fan.status.health"], "Found a duplicate in the metrics slice: fan.status.health")
					validatedMetrics["fan.status.health"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the health of a chassis fan (-1 unknown, 0 critical, 1 ok, 2 warning).", ms.At(i).Description())
					assert.Equal(t, "{health}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.id")
					assert.True(t, ok)
					assert.Equal(t, "chassis.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("fan.name")
					assert.True(t, ok)
					assert.Equal(t, "fan.name-val", attrVal.Str())
				case "fan.status.state":
					assert.False(t, validatedMetrics["fan.status.state"], "Found a duplicate in the metrics slice: fan.status.state")
					validatedMetrics["fan.status.state"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the state of a chassis fan (-1 unknown, 0 disabled, 1 enabled).", ms.At(i).Description())
					assert.Equal(t, "{state}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.id")
					assert.True(t, ok)
					assert.Equal(t, "chassis.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("fan.name")
					assert.True(t, ok)
					assert.Equal(t, "fan.name-val", attrVal.Str())
				case "system.powerstate":
					assert.False(t, validatedMetrics["system.powerstate"], "Found a duplicate in the metrics slice: system.powerstate")
					validatedMetrics["system.powerstate"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the power state of a system (-1 unknown, 0 off, 1 on).", ms.At(i).Description())
					assert.Equal(t, "{powerstate}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.id")
					assert.True(t, ok)
					assert.Equal(t, "system.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.asset_tag")
					assert.True(t, ok)
					assert.Equal(t, "system.asset_tag-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.bios_version")
					assert.True(t, ok)
					assert.Equal(t, "system.bios_version-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.model")
					assert.True(t, ok)
					assert.Equal(t, "system.model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.name")
					assert.True(t, ok)
					assert.Equal(t, "system.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.manufacturer")
					assert.True(t, ok)
					assert.Equal(t, "system.manufacturer-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.serial_number")
					assert.True(t, ok)
					assert.Equal(t, "system.serial_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.sku")
					assert.True(t, ok)
					assert.Equal(t, "system.sku-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.system_type")
					assert.True(t, ok)
					assert.Equal(t, "system.system_type-val", attrVal.Str())
				case "system.status.health":
					assert.False(t, validatedMetrics["system.status.health"], "Found a duplicate in the metrics slice: system.status.health")
					validatedMetrics["system.status.health"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the health of a system (-1 unknown, 0 critical, 1 ok, 2 warning).", ms.At(i).Description())
					assert.Equal(t, "{health}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.id")
					assert.True(t, ok)
					assert.Equal(t, "system.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.asset_tag")
					assert.True(t, ok)
					assert.Equal(t, "system.asset_tag-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.bios_version")
					assert.True(t, ok)
					assert.Equal(t, "system.bios_version-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.model")
					assert.True(t, ok)
					assert.Equal(t, "system.model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.name")
					assert.True(t, ok)
					assert.Equal(t, "system.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.manufacturer")
					assert.True(t, ok)
					assert.Equal(t, "system.manufacturer-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.serial_number")
					assert.True(t, ok)
					assert.Equal(t, "system.serial_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.sku")
					assert.True(t, ok)
					assert.Equal(t, "system.sku-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.system_type")
					assert.True(t, ok)
					assert.Equal(t, "system.system_type-val", attrVal.Str())
				case "system.status.state":
					assert.False(t, validatedMetrics["system.status.state"], "Found a duplicate in the metrics slice: system.status.state")
					validatedMetrics["system.status.state"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the state of a system (-1 unknown, 0 disabled, 1 enabled).", ms.At(i).Description())
					assert.Equal(t, "{state}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.id")
					assert.True(t, ok)
					assert.Equal(t, "system.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.asset_tag")
					assert.True(t, ok)
					assert.Equal(t, "system.asset_tag-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.bios_version")
					assert.True(t, ok)
					assert.Equal(t, "system.bios_version-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.model")
					assert.True(t, ok)
					assert.Equal(t, "system.model-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.name")
					assert.True(t, ok)
					assert.Equal(t, "system.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.manufacturer")
					assert.True(t, ok)
					assert.Equal(t, "system.manufacturer-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.serial_number")
					assert.True(t, ok)
					assert.Equal(t, "system.serial_number-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.sku")
					assert.True(t, ok)
					assert.Equal(t, "system.sku-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("system.system_type")
					assert.True(t, ok)
					assert.Equal(t, "system.system_type-val", attrVal.Str())
				case "temperature.reading":
					assert.False(t, validatedMetrics["temperature.reading"], "Found a duplicate in the metrics slice: temperature.reading")
					validatedMetrics["temperature.reading"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the reading of a chassis temperature.", ms.At(i).Description())
					assert.Equal(t, "{%}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.id")
					assert.True(t, ok)
					assert.Equal(t, "chassis.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("fan.name")
					assert.True(t, ok)
					assert.Equal(t, "fan.name-val", attrVal.Str())
				case "temperature.status.health":
					assert.False(t, validatedMetrics["temperature.status.health"], "Found a duplicate in the metrics slice: temperature.status.health")
					validatedMetrics["temperature.status.health"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the health of a chassis temperature (-1 unknown, 0 critical, 1 ok, 2 warning).", ms.At(i).Description())
					assert.Equal(t, "{health}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.id")
					assert.True(t, ok)
					assert.Equal(t, "chassis.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("temperature.name")
					assert.True(t, ok)
					assert.Equal(t, "temperature.name-val", attrVal.Str())
				case "temperature.status.state":
					assert.False(t, validatedMetrics["temperature.status.state"], "Found a duplicate in the metrics slice: temperature.status.state")
					validatedMetrics["temperature.status.state"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Measures the state of a chassis temperature (-1 unknown, 0 disabled, 1 enabled).", ms.At(i).Description())
					assert.Equal(t, "{state}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("system.host_name")
					assert.True(t, ok)
					assert.Equal(t, "system.host_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("base_url")
					assert.True(t, ok)
					assert.Equal(t, "base_url-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("chassis.id")
					assert.True(t, ok)
					assert.Equal(t, "chassis.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("temperature.name")
					assert.True(t, ok)
					assert.Equal(t, "temperature.name-val", attrVal.Str())
				}
			}
		})
	}
}
