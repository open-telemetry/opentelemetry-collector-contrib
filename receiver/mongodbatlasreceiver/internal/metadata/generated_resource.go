// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/pdata/pcommon"
)

// ResourceBuilder is a helper struct to build resources predefined in metadata.yaml.
// The ResourceBuilder is not thread-safe and must not to be used in multiple goroutines.
type ResourceBuilder struct {
	config ResourceAttributesConfig
	res    pcommon.Resource
}

// NewResourceBuilder creates a new ResourceBuilder. This method should be called on the start of the application.
func NewResourceBuilder(rac ResourceAttributesConfig) *ResourceBuilder {
	return &ResourceBuilder{
		config: rac,
		res:    pcommon.NewResource(),
	}
}

// SetMongodbAtlasClusterName sets provided value as "mongodb_atlas.cluster.name" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasClusterName(val string) {
	if rb.config.MongodbAtlasClusterName.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.cluster.name", val)
	}
}

// SetMongodbAtlasDbName sets provided value as "mongodb_atlas.db.name" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasDbName(val string) {
	if rb.config.MongodbAtlasDbName.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.db.name", val)
	}
}

// SetMongodbAtlasDiskPartition sets provided value as "mongodb_atlas.disk.partition" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasDiskPartition(val string) {
	if rb.config.MongodbAtlasDiskPartition.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.disk.partition", val)
	}
}

// SetMongodbAtlasHostName sets provided value as "mongodb_atlas.host.name" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasHostName(val string) {
	if rb.config.MongodbAtlasHostName.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.host.name", val)
	}
}

// SetMongodbAtlasOrgName sets provided value as "mongodb_atlas.org_name" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasOrgName(val string) {
	if rb.config.MongodbAtlasOrgName.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.org_name", val)
	}
}

// SetMongodbAtlasProcessID sets provided value as "mongodb_atlas.process.id" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasProcessID(val string) {
	if rb.config.MongodbAtlasProcessID.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.process.id", val)
	}
}

// SetMongodbAtlasProcessPort sets provided value as "mongodb_atlas.process.port" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasProcessPort(val string) {
	if rb.config.MongodbAtlasProcessPort.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.process.port", val)
	}
}

// SetMongodbAtlasProcessTypeName sets provided value as "mongodb_atlas.process.type_name" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasProcessTypeName(val string) {
	if rb.config.MongodbAtlasProcessTypeName.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.process.type_name", val)
	}
}

// SetMongodbAtlasProjectID sets provided value as "mongodb_atlas.project.id" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasProjectID(val string) {
	if rb.config.MongodbAtlasProjectID.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.project.id", val)
	}
}

// SetMongodbAtlasProjectName sets provided value as "mongodb_atlas.project.name" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasProjectName(val string) {
	if rb.config.MongodbAtlasProjectName.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.project.name", val)
	}
}

// SetMongodbAtlasProviderName sets provided value as "mongodb_atlas.provider.name" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasProviderName(val string) {
	if rb.config.MongodbAtlasProviderName.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.provider.name", val)
	}
}

// SetMongodbAtlasRegionName sets provided value as "mongodb_atlas.region.name" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasRegionName(val string) {
	if rb.config.MongodbAtlasRegionName.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.region.name", val)
	}
}

// SetMongodbAtlasUserAlias sets provided value as "mongodb_atlas.user.alias" attribute.
func (rb *ResourceBuilder) SetMongodbAtlasUserAlias(val string) {
	if rb.config.MongodbAtlasUserAlias.Enabled {
		rb.res.Attributes().PutStr("mongodb_atlas.user.alias", val)
	}
}

// Emit returns the built resource and resets the internal builder state.
func (rb *ResourceBuilder) Emit() pcommon.Resource {
	r := rb.res
	rb.res = pcommon.NewResource()
	return r
}
