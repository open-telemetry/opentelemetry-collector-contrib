// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/filter"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/scraper"
)

var MetricsInfo = metricsInfo{
	CiscoNetworkDropsReceive: metricInfo{
		Name: "cisco.network.drops.receive",
	},
	CiscoNetworkDropsTransmit: metricInfo{
		Name: "cisco.network.drops.transmit",
	},
	CiscoNetworkErrorsReceive: metricInfo{
		Name: "cisco.network.errors.receive",
	},
	CiscoNetworkErrorsTransmit: metricInfo{
		Name: "cisco.network.errors.transmit",
	},
	CiscoNetworkIoReceive: metricInfo{
		Name: "cisco.network.io.receive",
	},
	CiscoNetworkIoTransmit: metricInfo{
		Name: "cisco.network.io.transmit",
	},
	CiscoNetworkPacketsBroadcast: metricInfo{
		Name: "cisco.network.packets.broadcast",
	},
	CiscoNetworkPacketsMulticast: metricInfo{
		Name: "cisco.network.packets.multicast",
	},
	CiscoNetworkUp: metricInfo{
		Name: "cisco.network.up",
	},
}

type metricsInfo struct {
	CiscoNetworkDropsReceive     metricInfo
	CiscoNetworkDropsTransmit    metricInfo
	CiscoNetworkErrorsReceive    metricInfo
	CiscoNetworkErrorsTransmit   metricInfo
	CiscoNetworkIoReceive        metricInfo
	CiscoNetworkIoTransmit       metricInfo
	CiscoNetworkPacketsBroadcast metricInfo
	CiscoNetworkPacketsMulticast metricInfo
	CiscoNetworkUp               metricInfo
}

type metricInfo struct {
	Name string
}

type metricCiscoNetworkDropsReceive struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.network.drops.receive metric with initial data.
func (m *metricCiscoNetworkDropsReceive) init() {
	m.data.SetName("cisco.network.drops.receive")
	m.data.SetDescription("Number of input drops on interface")
	m.data.SetUnit("{drops}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoNetworkDropsReceive) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.description", interfaceDescriptionAttributeValue)
	dp.Attributes().PutStr("interface.mac", interfaceMacAttributeValue)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.speed", interfaceSpeedAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoNetworkDropsReceive) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoNetworkDropsReceive) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoNetworkDropsReceive(cfg MetricConfig) metricCiscoNetworkDropsReceive {
	m := metricCiscoNetworkDropsReceive{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoNetworkDropsTransmit struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.network.drops.transmit metric with initial data.
func (m *metricCiscoNetworkDropsTransmit) init() {
	m.data.SetName("cisco.network.drops.transmit")
	m.data.SetDescription("Number of output drops on interface")
	m.data.SetUnit("{drops}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoNetworkDropsTransmit) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.description", interfaceDescriptionAttributeValue)
	dp.Attributes().PutStr("interface.mac", interfaceMacAttributeValue)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.speed", interfaceSpeedAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoNetworkDropsTransmit) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoNetworkDropsTransmit) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoNetworkDropsTransmit(cfg MetricConfig) metricCiscoNetworkDropsTransmit {
	m := metricCiscoNetworkDropsTransmit{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoNetworkErrorsReceive struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.network.errors.receive metric with initial data.
func (m *metricCiscoNetworkErrorsReceive) init() {
	m.data.SetName("cisco.network.errors.receive")
	m.data.SetDescription("Number of input errors on interface")
	m.data.SetUnit("{errors}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoNetworkErrorsReceive) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.description", interfaceDescriptionAttributeValue)
	dp.Attributes().PutStr("interface.mac", interfaceMacAttributeValue)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.speed", interfaceSpeedAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoNetworkErrorsReceive) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoNetworkErrorsReceive) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoNetworkErrorsReceive(cfg MetricConfig) metricCiscoNetworkErrorsReceive {
	m := metricCiscoNetworkErrorsReceive{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoNetworkErrorsTransmit struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.network.errors.transmit metric with initial data.
func (m *metricCiscoNetworkErrorsTransmit) init() {
	m.data.SetName("cisco.network.errors.transmit")
	m.data.SetDescription("Number of output errors on interface")
	m.data.SetUnit("{errors}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoNetworkErrorsTransmit) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.description", interfaceDescriptionAttributeValue)
	dp.Attributes().PutStr("interface.mac", interfaceMacAttributeValue)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.speed", interfaceSpeedAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoNetworkErrorsTransmit) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoNetworkErrorsTransmit) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoNetworkErrorsTransmit(cfg MetricConfig) metricCiscoNetworkErrorsTransmit {
	m := metricCiscoNetworkErrorsTransmit{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoNetworkIoReceive struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.network.io.receive metric with initial data.
func (m *metricCiscoNetworkIoReceive) init() {
	m.data.SetName("cisco.network.io.receive")
	m.data.SetDescription("Number of bytes received on interface")
	m.data.SetUnit("By")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoNetworkIoReceive) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.description", interfaceDescriptionAttributeValue)
	dp.Attributes().PutStr("interface.mac", interfaceMacAttributeValue)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.speed", interfaceSpeedAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoNetworkIoReceive) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoNetworkIoReceive) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoNetworkIoReceive(cfg MetricConfig) metricCiscoNetworkIoReceive {
	m := metricCiscoNetworkIoReceive{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoNetworkIoTransmit struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.network.io.transmit metric with initial data.
func (m *metricCiscoNetworkIoTransmit) init() {
	m.data.SetName("cisco.network.io.transmit")
	m.data.SetDescription("Number of bytes transmitted on interface")
	m.data.SetUnit("By")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoNetworkIoTransmit) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.description", interfaceDescriptionAttributeValue)
	dp.Attributes().PutStr("interface.mac", interfaceMacAttributeValue)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.speed", interfaceSpeedAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoNetworkIoTransmit) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoNetworkIoTransmit) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoNetworkIoTransmit(cfg MetricConfig) metricCiscoNetworkIoTransmit {
	m := metricCiscoNetworkIoTransmit{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoNetworkPacketsBroadcast struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.network.packets.broadcast metric with initial data.
func (m *metricCiscoNetworkPacketsBroadcast) init() {
	m.data.SetName("cisco.network.packets.broadcast")
	m.data.SetDescription("Number of broadcast packets received on interface")
	m.data.SetUnit("{packets}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoNetworkPacketsBroadcast) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.description", interfaceDescriptionAttributeValue)
	dp.Attributes().PutStr("interface.mac", interfaceMacAttributeValue)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.speed", interfaceSpeedAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoNetworkPacketsBroadcast) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoNetworkPacketsBroadcast) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoNetworkPacketsBroadcast(cfg MetricConfig) metricCiscoNetworkPacketsBroadcast {
	m := metricCiscoNetworkPacketsBroadcast{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoNetworkPacketsMulticast struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.network.packets.multicast metric with initial data.
func (m *metricCiscoNetworkPacketsMulticast) init() {
	m.data.SetName("cisco.network.packets.multicast")
	m.data.SetDescription("Number of multicast packets received on interface")
	m.data.SetUnit("{packets}")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(true)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoNetworkPacketsMulticast) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.description", interfaceDescriptionAttributeValue)
	dp.Attributes().PutStr("interface.mac", interfaceMacAttributeValue)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.speed", interfaceSpeedAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoNetworkPacketsMulticast) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoNetworkPacketsMulticast) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoNetworkPacketsMulticast(cfg MetricConfig) metricCiscoNetworkPacketsMulticast {
	m := metricCiscoNetworkPacketsMulticast{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoNetworkUp struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.network.up metric with initial data.
func (m *metricCiscoNetworkUp) init() {
	m.data.SetName("cisco.network.up")
	m.data.SetDescription("Interface operational status (1 = up, 0 = down)")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoNetworkUp) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.description", interfaceDescriptionAttributeValue)
	dp.Attributes().PutStr("interface.mac", interfaceMacAttributeValue)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.speed", interfaceSpeedAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoNetworkUp) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoNetworkUp) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoNetworkUp(cfg MetricConfig) metricCiscoNetworkUp {
	m := metricCiscoNetworkUp{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                             MetricsBuilderConfig // config of the metrics builder.
	startTime                          pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity                    int                  // maximum observed number of metrics per resource.
	metricsBuffer                      pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                          component.BuildInfo  // contains version information.
	resourceAttributeIncludeFilter     map[string]filter.Filter
	resourceAttributeExcludeFilter     map[string]filter.Filter
	metricCiscoNetworkDropsReceive     metricCiscoNetworkDropsReceive
	metricCiscoNetworkDropsTransmit    metricCiscoNetworkDropsTransmit
	metricCiscoNetworkErrorsReceive    metricCiscoNetworkErrorsReceive
	metricCiscoNetworkErrorsTransmit   metricCiscoNetworkErrorsTransmit
	metricCiscoNetworkIoReceive        metricCiscoNetworkIoReceive
	metricCiscoNetworkIoTransmit       metricCiscoNetworkIoTransmit
	metricCiscoNetworkPacketsBroadcast metricCiscoNetworkPacketsBroadcast
	metricCiscoNetworkPacketsMulticast metricCiscoNetworkPacketsMulticast
	metricCiscoNetworkUp               metricCiscoNetworkUp
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}
func NewMetricsBuilder(mbc MetricsBuilderConfig, settings scraper.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                             mbc,
		startTime:                          pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                      pmetric.NewMetrics(),
		buildInfo:                          settings.BuildInfo,
		metricCiscoNetworkDropsReceive:     newMetricCiscoNetworkDropsReceive(mbc.Metrics.CiscoNetworkDropsReceive),
		metricCiscoNetworkDropsTransmit:    newMetricCiscoNetworkDropsTransmit(mbc.Metrics.CiscoNetworkDropsTransmit),
		metricCiscoNetworkErrorsReceive:    newMetricCiscoNetworkErrorsReceive(mbc.Metrics.CiscoNetworkErrorsReceive),
		metricCiscoNetworkErrorsTransmit:   newMetricCiscoNetworkErrorsTransmit(mbc.Metrics.CiscoNetworkErrorsTransmit),
		metricCiscoNetworkIoReceive:        newMetricCiscoNetworkIoReceive(mbc.Metrics.CiscoNetworkIoReceive),
		metricCiscoNetworkIoTransmit:       newMetricCiscoNetworkIoTransmit(mbc.Metrics.CiscoNetworkIoTransmit),
		metricCiscoNetworkPacketsBroadcast: newMetricCiscoNetworkPacketsBroadcast(mbc.Metrics.CiscoNetworkPacketsBroadcast),
		metricCiscoNetworkPacketsMulticast: newMetricCiscoNetworkPacketsMulticast(mbc.Metrics.CiscoNetworkPacketsMulticast),
		metricCiscoNetworkUp:               newMetricCiscoNetworkUp(mbc.Metrics.CiscoNetworkUp),
		resourceAttributeIncludeFilter:     make(map[string]filter.Filter),
		resourceAttributeExcludeFilter:     make(map[string]filter.Filter),
	}
	if mbc.ResourceAttributes.CiscoDeviceIP.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["cisco.device.ip"] = filter.CreateFilter(mbc.ResourceAttributes.CiscoDeviceIP.MetricsInclude)
	}
	if mbc.ResourceAttributes.CiscoDeviceIP.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["cisco.device.ip"] = filter.CreateFilter(mbc.ResourceAttributes.CiscoDeviceIP.MetricsExclude)
	}
	if mbc.ResourceAttributes.CiscoOsType.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["cisco.os.type"] = filter.CreateFilter(mbc.ResourceAttributes.CiscoOsType.MetricsInclude)
	}
	if mbc.ResourceAttributes.CiscoOsType.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["cisco.os.type"] = filter.CreateFilter(mbc.ResourceAttributes.CiscoOsType.MetricsExclude)
	}
	if mbc.ResourceAttributes.HwType.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["hw.type"] = filter.CreateFilter(mbc.ResourceAttributes.HwType.MetricsInclude)
	}
	if mbc.ResourceAttributes.HwType.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["hw.type"] = filter.CreateFilter(mbc.ResourceAttributes.HwType.MetricsExclude)
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// NewResourceBuilder returns a new resource builder that should be used to build a resource associated with for the emitted metrics.
func (mb *MetricsBuilder) NewResourceBuilder() *ResourceBuilder {
	return NewResourceBuilder(mb.config.ResourceAttributes)
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName(ScopeName)
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricCiscoNetworkDropsReceive.emit(ils.Metrics())
	mb.metricCiscoNetworkDropsTransmit.emit(ils.Metrics())
	mb.metricCiscoNetworkErrorsReceive.emit(ils.Metrics())
	mb.metricCiscoNetworkErrorsTransmit.emit(ils.Metrics())
	mb.metricCiscoNetworkIoReceive.emit(ils.Metrics())
	mb.metricCiscoNetworkIoTransmit.emit(ils.Metrics())
	mb.metricCiscoNetworkPacketsBroadcast.emit(ils.Metrics())
	mb.metricCiscoNetworkPacketsMulticast.emit(ils.Metrics())
	mb.metricCiscoNetworkUp.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}
	for attr, filter := range mb.resourceAttributeIncludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && !filter.Matches(val.AsString()) {
			return
		}
	}
	for attr, filter := range mb.resourceAttributeExcludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && filter.Matches(val.AsString()) {
			return
		}
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordCiscoNetworkDropsReceiveDataPoint adds a data point to cisco.network.drops.receive metric.
func (mb *MetricsBuilder) RecordCiscoNetworkDropsReceiveDataPoint(ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	mb.metricCiscoNetworkDropsReceive.recordDataPoint(mb.startTime, ts, val, interfaceDescriptionAttributeValue, interfaceMacAttributeValue, interfaceNameAttributeValue, interfaceSpeedAttributeValue)
}

// RecordCiscoNetworkDropsTransmitDataPoint adds a data point to cisco.network.drops.transmit metric.
func (mb *MetricsBuilder) RecordCiscoNetworkDropsTransmitDataPoint(ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	mb.metricCiscoNetworkDropsTransmit.recordDataPoint(mb.startTime, ts, val, interfaceDescriptionAttributeValue, interfaceMacAttributeValue, interfaceNameAttributeValue, interfaceSpeedAttributeValue)
}

// RecordCiscoNetworkErrorsReceiveDataPoint adds a data point to cisco.network.errors.receive metric.
func (mb *MetricsBuilder) RecordCiscoNetworkErrorsReceiveDataPoint(ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	mb.metricCiscoNetworkErrorsReceive.recordDataPoint(mb.startTime, ts, val, interfaceDescriptionAttributeValue, interfaceMacAttributeValue, interfaceNameAttributeValue, interfaceSpeedAttributeValue)
}

// RecordCiscoNetworkErrorsTransmitDataPoint adds a data point to cisco.network.errors.transmit metric.
func (mb *MetricsBuilder) RecordCiscoNetworkErrorsTransmitDataPoint(ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	mb.metricCiscoNetworkErrorsTransmit.recordDataPoint(mb.startTime, ts, val, interfaceDescriptionAttributeValue, interfaceMacAttributeValue, interfaceNameAttributeValue, interfaceSpeedAttributeValue)
}

// RecordCiscoNetworkIoReceiveDataPoint adds a data point to cisco.network.io.receive metric.
func (mb *MetricsBuilder) RecordCiscoNetworkIoReceiveDataPoint(ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	mb.metricCiscoNetworkIoReceive.recordDataPoint(mb.startTime, ts, val, interfaceDescriptionAttributeValue, interfaceMacAttributeValue, interfaceNameAttributeValue, interfaceSpeedAttributeValue)
}

// RecordCiscoNetworkIoTransmitDataPoint adds a data point to cisco.network.io.transmit metric.
func (mb *MetricsBuilder) RecordCiscoNetworkIoTransmitDataPoint(ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	mb.metricCiscoNetworkIoTransmit.recordDataPoint(mb.startTime, ts, val, interfaceDescriptionAttributeValue, interfaceMacAttributeValue, interfaceNameAttributeValue, interfaceSpeedAttributeValue)
}

// RecordCiscoNetworkPacketsBroadcastDataPoint adds a data point to cisco.network.packets.broadcast metric.
func (mb *MetricsBuilder) RecordCiscoNetworkPacketsBroadcastDataPoint(ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	mb.metricCiscoNetworkPacketsBroadcast.recordDataPoint(mb.startTime, ts, val, interfaceDescriptionAttributeValue, interfaceMacAttributeValue, interfaceNameAttributeValue, interfaceSpeedAttributeValue)
}

// RecordCiscoNetworkPacketsMulticastDataPoint adds a data point to cisco.network.packets.multicast metric.
func (mb *MetricsBuilder) RecordCiscoNetworkPacketsMulticastDataPoint(ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	mb.metricCiscoNetworkPacketsMulticast.recordDataPoint(mb.startTime, ts, val, interfaceDescriptionAttributeValue, interfaceMacAttributeValue, interfaceNameAttributeValue, interfaceSpeedAttributeValue)
}

// RecordCiscoNetworkUpDataPoint adds a data point to cisco.network.up metric.
func (mb *MetricsBuilder) RecordCiscoNetworkUpDataPoint(ts pcommon.Timestamp, val int64, interfaceDescriptionAttributeValue string, interfaceMacAttributeValue string, interfaceNameAttributeValue string, interfaceSpeedAttributeValue string) {
	mb.metricCiscoNetworkUp.recordDataPoint(mb.startTime, ts, val, interfaceDescriptionAttributeValue, interfaceMacAttributeValue, interfaceNameAttributeValue, interfaceSpeedAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
