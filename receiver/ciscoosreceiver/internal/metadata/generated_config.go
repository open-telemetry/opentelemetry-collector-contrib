// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for ciscoosreceiver metrics.
type MetricsConfig struct {
	CiscoBgpSessionMessagesInputCount    MetricConfig `mapstructure:"cisco_bgp_session_messages_input_count"`
	CiscoBgpSessionMessagesOutputCount   MetricConfig `mapstructure:"cisco_bgp_session_messages_output_count"`
	CiscoBgpSessionPrefixesReceivedCount MetricConfig `mapstructure:"cisco_bgp_session_prefixes_received_count"`
	CiscoBgpSessionUp                    MetricConfig `mapstructure:"cisco_bgp_session_up"`
	CiscoCollectDurationSeconds          MetricConfig `mapstructure:"cisco_collect_duration_seconds"`
	CiscoCollectorDurationSeconds        MetricConfig `mapstructure:"cisco_collector_duration_seconds"`
	CiscoEnvironmentPowerUp              MetricConfig `mapstructure:"cisco_environment_power_up"`
	CiscoEnvironmentSensorTemp           MetricConfig `mapstructure:"cisco_environment_sensor_temp"`
	CiscoFactsCPUFiveMinutesPercent      MetricConfig `mapstructure:"cisco_facts_cpu_five_minutes_percent"`
	CiscoFactsCPUFiveSecondsPercent      MetricConfig `mapstructure:"cisco_facts_cpu_five_seconds_percent"`
	CiscoFactsCPUInterruptPercent        MetricConfig `mapstructure:"cisco_facts_cpu_interrupt_percent"`
	CiscoFactsCPUOneMinutePercent        MetricConfig `mapstructure:"cisco_facts_cpu_one_minute_percent"`
	CiscoFactsMemoryFree                 MetricConfig `mapstructure:"cisco_facts_memory_free"`
	CiscoFactsMemoryTotal                MetricConfig `mapstructure:"cisco_facts_memory_total"`
	CiscoFactsMemoryUsed                 MetricConfig `mapstructure:"cisco_facts_memory_used"`
	CiscoFactsVersion                    MetricConfig `mapstructure:"cisco_facts_version"`
	CiscoInterfaceAdminUp                MetricConfig `mapstructure:"cisco_interface_admin_up"`
	CiscoInterfaceErrorStatus            MetricConfig `mapstructure:"cisco_interface_error_status"`
	CiscoInterfaceReceiveBroadcast       MetricConfig `mapstructure:"cisco_interface_receive_broadcast"`
	CiscoInterfaceReceiveBytes           MetricConfig `mapstructure:"cisco_interface_receive_bytes"`
	CiscoInterfaceReceiveDrops           MetricConfig `mapstructure:"cisco_interface_receive_drops"`
	CiscoInterfaceReceiveErrors          MetricConfig `mapstructure:"cisco_interface_receive_errors"`
	CiscoInterfaceReceiveMulticast       MetricConfig `mapstructure:"cisco_interface_receive_multicast"`
	CiscoInterfaceTransmitBytes          MetricConfig `mapstructure:"cisco_interface_transmit_bytes"`
	CiscoInterfaceTransmitDrops          MetricConfig `mapstructure:"cisco_interface_transmit_drops"`
	CiscoInterfaceTransmitErrors         MetricConfig `mapstructure:"cisco_interface_transmit_errors"`
	CiscoInterfaceUp                     MetricConfig `mapstructure:"cisco_interface_up"`
	CiscoOpticsRx                        MetricConfig `mapstructure:"cisco_optics_rx"`
	CiscoOpticsTx                        MetricConfig `mapstructure:"cisco_optics_tx"`
	CiscoUp                              MetricConfig `mapstructure:"cisco_up"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		CiscoBgpSessionMessagesInputCount: MetricConfig{
			Enabled: true,
		},
		CiscoBgpSessionMessagesOutputCount: MetricConfig{
			Enabled: true,
		},
		CiscoBgpSessionPrefixesReceivedCount: MetricConfig{
			Enabled: true,
		},
		CiscoBgpSessionUp: MetricConfig{
			Enabled: true,
		},
		CiscoCollectDurationSeconds: MetricConfig{
			Enabled: true,
		},
		CiscoCollectorDurationSeconds: MetricConfig{
			Enabled: true,
		},
		CiscoEnvironmentPowerUp: MetricConfig{
			Enabled: true,
		},
		CiscoEnvironmentSensorTemp: MetricConfig{
			Enabled: true,
		},
		CiscoFactsCPUFiveMinutesPercent: MetricConfig{
			Enabled: true,
		},
		CiscoFactsCPUFiveSecondsPercent: MetricConfig{
			Enabled: true,
		},
		CiscoFactsCPUInterruptPercent: MetricConfig{
			Enabled: true,
		},
		CiscoFactsCPUOneMinutePercent: MetricConfig{
			Enabled: true,
		},
		CiscoFactsMemoryFree: MetricConfig{
			Enabled: true,
		},
		CiscoFactsMemoryTotal: MetricConfig{
			Enabled: true,
		},
		CiscoFactsMemoryUsed: MetricConfig{
			Enabled: true,
		},
		CiscoFactsVersion: MetricConfig{
			Enabled: true,
		},
		CiscoInterfaceAdminUp: MetricConfig{
			Enabled: true,
		},
		CiscoInterfaceErrorStatus: MetricConfig{
			Enabled: true,
		},
		CiscoInterfaceReceiveBroadcast: MetricConfig{
			Enabled: true,
		},
		CiscoInterfaceReceiveBytes: MetricConfig{
			Enabled: true,
		},
		CiscoInterfaceReceiveDrops: MetricConfig{
			Enabled: true,
		},
		CiscoInterfaceReceiveErrors: MetricConfig{
			Enabled: true,
		},
		CiscoInterfaceReceiveMulticast: MetricConfig{
			Enabled: true,
		},
		CiscoInterfaceTransmitBytes: MetricConfig{
			Enabled: true,
		},
		CiscoInterfaceTransmitDrops: MetricConfig{
			Enabled: true,
		},
		CiscoInterfaceTransmitErrors: MetricConfig{
			Enabled: true,
		},
		CiscoInterfaceUp: MetricConfig{
			Enabled: true,
		},
		CiscoOpticsRx: MetricConfig{
			Enabled: true,
		},
		CiscoOpticsTx: MetricConfig{
			Enabled: true,
		},
		CiscoUp: MetricConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for ciscoosreceiver metrics builder.
type MetricsBuilderConfig struct {
	Metrics MetricsConfig `mapstructure:"metrics"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics: DefaultMetricsConfig(),
	}
}
