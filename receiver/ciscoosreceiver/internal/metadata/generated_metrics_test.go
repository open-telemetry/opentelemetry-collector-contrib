// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoBgpSessionMessagesInputCountDataPoint(ts, 1, "target-val", "asn-val", "ip-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoBgpSessionMessagesOutputCountDataPoint(ts, 1, "target-val", "asn-val", "ip-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoBgpSessionPrefixesReceivedCountDataPoint(ts, 1, "target-val", "asn-val", "ip-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoBgpSessionUpDataPoint(ts, 1, "target-val", "asn-val", "ip-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoCollectDurationSecondsDataPoint(ts, 1, "target-val", "collector-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoCollectorDurationSecondsDataPoint(ts, 1, "target-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoEnvironmentPowerUpDataPoint(ts, 1, "target-val", "item-val", "status-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoEnvironmentSensorTempDataPoint(ts, 1, "target-val", "item-val", "status-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoFactsCPUFiveMinutesPercentDataPoint(ts, 1, "target-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoFactsCPUFiveSecondsPercentDataPoint(ts, 1, "target-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoFactsCPUInterruptPercentDataPoint(ts, 1, "target-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoFactsCPUOneMinutePercentDataPoint(ts, 1, "target-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoFactsMemoryFreeDataPoint(ts, 1, "target-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoFactsMemoryTotalDataPoint(ts, 1, "target-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoFactsMemoryUsedDataPoint(ts, 1, "target-val", "type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoFactsVersionDataPoint(ts, 1, "target-val", "version-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoInterfaceAdminUpDataPoint(ts, 1, "target-val", "name-val", "description-val", "mac-val", "speed-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoInterfaceErrorStatusDataPoint(ts, 1, "target-val", "name-val", "description-val", "mac-val", "speed-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoInterfaceReceiveBroadcastDataPoint(ts, 1, "target-val", "name-val", "description-val", "mac-val", "speed-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoInterfaceReceiveBytesDataPoint(ts, 1, "target-val", "name-val", "description-val", "mac-val", "speed-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoInterfaceReceiveDropsDataPoint(ts, 1, "target-val", "name-val", "description-val", "mac-val", "speed-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoInterfaceReceiveErrorsDataPoint(ts, 1, "target-val", "name-val", "description-val", "mac-val", "speed-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoInterfaceReceiveMulticastDataPoint(ts, 1, "target-val", "name-val", "description-val", "mac-val", "speed-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoInterfaceTransmitBytesDataPoint(ts, 1, "target-val", "name-val", "description-val", "mac-val", "speed-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoInterfaceTransmitDropsDataPoint(ts, 1, "target-val", "name-val", "description-val", "mac-val", "speed-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoInterfaceTransmitErrorsDataPoint(ts, 1, "target-val", "name-val", "description-val", "mac-val", "speed-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoInterfaceUpDataPoint(ts, 1, "target-val", "name-val", "description-val", "mac-val", "speed-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoOpticsRxDataPoint(ts, 1, "target-val", "interface-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoOpticsTxDataPoint(ts, 1, "target-val", "interface-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordCiscoUpDataPoint(ts, 1, "target-val")

			res := pcommon.NewResource()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "cisco_bgp_session_messages_input_count":
					assert.False(t, validatedMetrics["cisco_bgp_session_messages_input_count"], "Found a duplicate in the metrics slice: cisco_bgp_session_messages_input_count")
					validatedMetrics["cisco_bgp_session_messages_input_count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of received BGP messages", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("asn")
					assert.True(t, ok)
					assert.Equal(t, "asn-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("ip")
					assert.True(t, ok)
					assert.Equal(t, "ip-val", attrVal.Str())
				case "cisco_bgp_session_messages_output_count":
					assert.False(t, validatedMetrics["cisco_bgp_session_messages_output_count"], "Found a duplicate in the metrics slice: cisco_bgp_session_messages_output_count")
					validatedMetrics["cisco_bgp_session_messages_output_count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of transmitted BGP messages", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("asn")
					assert.True(t, ok)
					assert.Equal(t, "asn-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("ip")
					assert.True(t, ok)
					assert.Equal(t, "ip-val", attrVal.Str())
				case "cisco_bgp_session_prefixes_received_count":
					assert.False(t, validatedMetrics["cisco_bgp_session_prefixes_received_count"], "Found a duplicate in the metrics slice: cisco_bgp_session_prefixes_received_count")
					validatedMetrics["cisco_bgp_session_prefixes_received_count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of received BGP prefixes", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("asn")
					assert.True(t, ok)
					assert.Equal(t, "asn-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("ip")
					assert.True(t, ok)
					assert.Equal(t, "ip-val", attrVal.Str())
				case "cisco_bgp_session_up":
					assert.False(t, validatedMetrics["cisco_bgp_session_up"], "Found a duplicate in the metrics slice: cisco_bgp_session_up")
					validatedMetrics["cisco_bgp_session_up"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "BGP session establishment status (1=up, 0=down)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("asn")
					assert.True(t, ok)
					assert.Equal(t, "asn-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("ip")
					assert.True(t, ok)
					assert.Equal(t, "ip-val", attrVal.Str())
				case "cisco_collect_duration_seconds":
					assert.False(t, validatedMetrics["cisco_collect_duration_seconds"], "Found a duplicate in the metrics slice: cisco_collect_duration_seconds")
					validatedMetrics["cisco_collect_duration_seconds"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Individual collector performance timing", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("collector")
					assert.True(t, ok)
					assert.Equal(t, "collector-val", attrVal.Str())
				case "cisco_collector_duration_seconds":
					assert.False(t, validatedMetrics["cisco_collector_duration_seconds"], "Found a duplicate in the metrics slice: cisco_collector_duration_seconds")
					validatedMetrics["cisco_collector_duration_seconds"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total scrape duration per device", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
				case "cisco_environment_power_up":
					assert.False(t, validatedMetrics["cisco_environment_power_up"], "Found a duplicate in the metrics slice: cisco_environment_power_up")
					validatedMetrics["cisco_environment_power_up"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Power supply operational status (1=up, 0=down)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("item")
					assert.True(t, ok)
					assert.Equal(t, "item-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("status")
					assert.True(t, ok)
					assert.Equal(t, "status-val", attrVal.Str())
				case "cisco_environment_sensor_temp":
					assert.False(t, validatedMetrics["cisco_environment_sensor_temp"], "Found a duplicate in the metrics slice: cisco_environment_sensor_temp")
					validatedMetrics["cisco_environment_sensor_temp"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Environment sensor temperature reading", ms.At(i).Description())
					assert.Equal(t, "Cel", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("item")
					assert.True(t, ok)
					assert.Equal(t, "item-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("status")
					assert.True(t, ok)
					assert.Equal(t, "status-val", attrVal.Str())
				case "cisco_facts_cpu_five_minutes_percent":
					assert.False(t, validatedMetrics["cisco_facts_cpu_five_minutes_percent"], "Found a duplicate in the metrics slice: cisco_facts_cpu_five_minutes_percent")
					validatedMetrics["cisco_facts_cpu_five_minutes_percent"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU utilization for five minutes", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
				case "cisco_facts_cpu_five_seconds_percent":
					assert.False(t, validatedMetrics["cisco_facts_cpu_five_seconds_percent"], "Found a duplicate in the metrics slice: cisco_facts_cpu_five_seconds_percent")
					validatedMetrics["cisco_facts_cpu_five_seconds_percent"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU utilization for five seconds", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
				case "cisco_facts_cpu_interrupt_percent":
					assert.False(t, validatedMetrics["cisco_facts_cpu_interrupt_percent"], "Found a duplicate in the metrics slice: cisco_facts_cpu_interrupt_percent")
					validatedMetrics["cisco_facts_cpu_interrupt_percent"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Interrupt percentage", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
				case "cisco_facts_cpu_one_minute_percent":
					assert.False(t, validatedMetrics["cisco_facts_cpu_one_minute_percent"], "Found a duplicate in the metrics slice: cisco_facts_cpu_one_minute_percent")
					validatedMetrics["cisco_facts_cpu_one_minute_percent"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU utilization for one minute", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
				case "cisco_facts_memory_free":
					assert.False(t, validatedMetrics["cisco_facts_memory_free"], "Found a duplicate in the metrics slice: cisco_facts_memory_free")
					validatedMetrics["cisco_facts_memory_free"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Free memory in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.Equal(t, "type-val", attrVal.Str())
				case "cisco_facts_memory_total":
					assert.False(t, validatedMetrics["cisco_facts_memory_total"], "Found a duplicate in the metrics slice: cisco_facts_memory_total")
					validatedMetrics["cisco_facts_memory_total"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total memory in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.Equal(t, "type-val", attrVal.Str())
				case "cisco_facts_memory_used":
					assert.False(t, validatedMetrics["cisco_facts_memory_used"], "Found a duplicate in the metrics slice: cisco_facts_memory_used")
					validatedMetrics["cisco_facts_memory_used"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Used memory in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("type")
					assert.True(t, ok)
					assert.Equal(t, "type-val", attrVal.Str())
				case "cisco_facts_version":
					assert.False(t, validatedMetrics["cisco_facts_version"], "Found a duplicate in the metrics slice: cisco_facts_version")
					validatedMetrics["cisco_facts_version"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Running OS version (binary indicator with version attribute)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("version")
					assert.True(t, ok)
					assert.Equal(t, "version-val", attrVal.Str())
				case "cisco_interface_admin_up":
					assert.False(t, validatedMetrics["cisco_interface_admin_up"], "Found a duplicate in the metrics slice: cisco_interface_admin_up")
					validatedMetrics["cisco_interface_admin_up"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Interface admin operational status (1=up, 0=down)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.Equal(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.Equal(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("mac")
					assert.True(t, ok)
					assert.Equal(t, "mac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("speed")
					assert.True(t, ok)
					assert.Equal(t, "speed-val", attrVal.Str())
				case "cisco_interface_error_status":
					assert.False(t, validatedMetrics["cisco_interface_error_status"], "Found a duplicate in the metrics slice: cisco_interface_error_status")
					validatedMetrics["cisco_interface_error_status"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Admin and operational status differ (1=error, 0=no error)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.Equal(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.Equal(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("mac")
					assert.True(t, ok)
					assert.Equal(t, "mac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("speed")
					assert.True(t, ok)
					assert.Equal(t, "speed-val", attrVal.Str())
				case "cisco_interface_receive_broadcast":
					assert.False(t, validatedMetrics["cisco_interface_receive_broadcast"], "Found a duplicate in the metrics slice: cisco_interface_receive_broadcast")
					validatedMetrics["cisco_interface_receive_broadcast"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Received broadcast packets", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.Equal(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.Equal(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("mac")
					assert.True(t, ok)
					assert.Equal(t, "mac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("speed")
					assert.True(t, ok)
					assert.Equal(t, "speed-val", attrVal.Str())
				case "cisco_interface_receive_bytes":
					assert.False(t, validatedMetrics["cisco_interface_receive_bytes"], "Found a duplicate in the metrics slice: cisco_interface_receive_bytes")
					validatedMetrics["cisco_interface_receive_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Received data in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.Equal(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.Equal(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("mac")
					assert.True(t, ok)
					assert.Equal(t, "mac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("speed")
					assert.True(t, ok)
					assert.Equal(t, "speed-val", attrVal.Str())
				case "cisco_interface_receive_drops":
					assert.False(t, validatedMetrics["cisco_interface_receive_drops"], "Found a duplicate in the metrics slice: cisco_interface_receive_drops")
					validatedMetrics["cisco_interface_receive_drops"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of dropped incoming packets", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.Equal(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.Equal(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("mac")
					assert.True(t, ok)
					assert.Equal(t, "mac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("speed")
					assert.True(t, ok)
					assert.Equal(t, "speed-val", attrVal.Str())
				case "cisco_interface_receive_errors":
					assert.False(t, validatedMetrics["cisco_interface_receive_errors"], "Found a duplicate in the metrics slice: cisco_interface_receive_errors")
					validatedMetrics["cisco_interface_receive_errors"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of errors caused by incoming packets", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.Equal(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.Equal(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("mac")
					assert.True(t, ok)
					assert.Equal(t, "mac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("speed")
					assert.True(t, ok)
					assert.Equal(t, "speed-val", attrVal.Str())
				case "cisco_interface_receive_multicast":
					assert.False(t, validatedMetrics["cisco_interface_receive_multicast"], "Found a duplicate in the metrics slice: cisco_interface_receive_multicast")
					validatedMetrics["cisco_interface_receive_multicast"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Received multicast packets", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.Equal(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.Equal(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("mac")
					assert.True(t, ok)
					assert.Equal(t, "mac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("speed")
					assert.True(t, ok)
					assert.Equal(t, "speed-val", attrVal.Str())
				case "cisco_interface_transmit_bytes":
					assert.False(t, validatedMetrics["cisco_interface_transmit_bytes"], "Found a duplicate in the metrics slice: cisco_interface_transmit_bytes")
					validatedMetrics["cisco_interface_transmit_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Transmitted data in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.Equal(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.Equal(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("mac")
					assert.True(t, ok)
					assert.Equal(t, "mac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("speed")
					assert.True(t, ok)
					assert.Equal(t, "speed-val", attrVal.Str())
				case "cisco_interface_transmit_drops":
					assert.False(t, validatedMetrics["cisco_interface_transmit_drops"], "Found a duplicate in the metrics slice: cisco_interface_transmit_drops")
					validatedMetrics["cisco_interface_transmit_drops"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of dropped outgoing packets", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.Equal(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.Equal(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("mac")
					assert.True(t, ok)
					assert.Equal(t, "mac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("speed")
					assert.True(t, ok)
					assert.Equal(t, "speed-val", attrVal.Str())
				case "cisco_interface_transmit_errors":
					assert.False(t, validatedMetrics["cisco_interface_transmit_errors"], "Found a duplicate in the metrics slice: cisco_interface_transmit_errors")
					validatedMetrics["cisco_interface_transmit_errors"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of errors caused by outgoing packets", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.Equal(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.Equal(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("mac")
					assert.True(t, ok)
					assert.Equal(t, "mac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("speed")
					assert.True(t, ok)
					assert.Equal(t, "speed-val", attrVal.Str())
				case "cisco_interface_up":
					assert.False(t, validatedMetrics["cisco_interface_up"], "Found a duplicate in the metrics slice: cisco_interface_up")
					validatedMetrics["cisco_interface_up"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Interface operational status (1=up, 0=down)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("name")
					assert.True(t, ok)
					assert.Equal(t, "name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("description")
					assert.True(t, ok)
					assert.Equal(t, "description-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("mac")
					assert.True(t, ok)
					assert.Equal(t, "mac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("speed")
					assert.True(t, ok)
					assert.Equal(t, "speed-val", attrVal.Str())
				case "cisco_optics_rx":
					assert.False(t, validatedMetrics["cisco_optics_rx"], "Found a duplicate in the metrics slice: cisco_optics_rx")
					validatedMetrics["cisco_optics_rx"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Optical receive power", ms.At(i).Description())
					assert.Equal(t, "dBm", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("interface")
					assert.True(t, ok)
					assert.Equal(t, "interface-val", attrVal.Str())
				case "cisco_optics_tx":
					assert.False(t, validatedMetrics["cisco_optics_tx"], "Found a duplicate in the metrics slice: cisco_optics_tx")
					validatedMetrics["cisco_optics_tx"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Optical transmit power", ms.At(i).Description())
					assert.Equal(t, "dBm", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("interface")
					assert.True(t, ok)
					assert.Equal(t, "interface-val", attrVal.Str())
				case "cisco_up":
					assert.False(t, validatedMetrics["cisco_up"], "Found a duplicate in the metrics slice: cisco_up")
					validatedMetrics["cisco_up"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Device connectivity status (1=connected, 0=disconnected)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("target")
					assert.True(t, ok)
					assert.Equal(t, "target-val", attrVal.Str())
				}
			}
		})
	}
}
