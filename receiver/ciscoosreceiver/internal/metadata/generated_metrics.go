// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/filter"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

var MetricsInfo = metricsInfo{
	CiscoInterfaceReceiveBytes: metricInfo{
		Name: "cisco.interface.receive.bytes",
	},
	CiscoInterfaceReceiveErrors: metricInfo{
		Name: "cisco.interface.receive.errors",
	},
	CiscoInterfaceTransmitBytes: metricInfo{
		Name: "cisco.interface.transmit.bytes",
	},
	CiscoInterfaceTransmitErrors: metricInfo{
		Name: "cisco.interface.transmit.errors",
	},
	CiscoInterfaceUp: metricInfo{
		Name: "cisco.interface.up",
	},
	CiscoSystemCPUUtilization: metricInfo{
		Name: "cisco.system.cpu.utilization",
	},
	CiscoSystemMemoryUtilization: metricInfo{
		Name: "cisco.system.memory.utilization",
	},
}

type metricsInfo struct {
	CiscoInterfaceReceiveBytes   metricInfo
	CiscoInterfaceReceiveErrors  metricInfo
	CiscoInterfaceTransmitBytes  metricInfo
	CiscoInterfaceTransmitErrors metricInfo
	CiscoInterfaceUp             metricInfo
	CiscoSystemCPUUtilization    metricInfo
	CiscoSystemMemoryUtilization metricInfo
}

type metricInfo struct {
	Name string
}

type metricCiscoInterfaceReceiveBytes struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.interface.receive.bytes metric with initial data.
func (m *metricCiscoInterfaceReceiveBytes) init() {
	m.data.SetName("cisco.interface.receive.bytes")
	m.data.SetDescription("Number of bytes received on the interface")
	m.data.SetUnit("By")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoInterfaceReceiveBytes) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceNameAttributeValue string, interfaceStateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.state", interfaceStateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoInterfaceReceiveBytes) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoInterfaceReceiveBytes) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoInterfaceReceiveBytes(cfg MetricConfig) metricCiscoInterfaceReceiveBytes {
	m := metricCiscoInterfaceReceiveBytes{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoInterfaceReceiveErrors struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.interface.receive.errors metric with initial data.
func (m *metricCiscoInterfaceReceiveErrors) init() {
	m.data.SetName("cisco.interface.receive.errors")
	m.data.SetDescription("Number of receive errors on the interface")
	m.data.SetUnit("{error}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoInterfaceReceiveErrors) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceNameAttributeValue string, interfaceStateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.state", interfaceStateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoInterfaceReceiveErrors) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoInterfaceReceiveErrors) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoInterfaceReceiveErrors(cfg MetricConfig) metricCiscoInterfaceReceiveErrors {
	m := metricCiscoInterfaceReceiveErrors{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoInterfaceTransmitBytes struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.interface.transmit.bytes metric with initial data.
func (m *metricCiscoInterfaceTransmitBytes) init() {
	m.data.SetName("cisco.interface.transmit.bytes")
	m.data.SetDescription("Number of bytes transmitted on the interface")
	m.data.SetUnit("By")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoInterfaceTransmitBytes) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceNameAttributeValue string, interfaceStateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.state", interfaceStateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoInterfaceTransmitBytes) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoInterfaceTransmitBytes) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoInterfaceTransmitBytes(cfg MetricConfig) metricCiscoInterfaceTransmitBytes {
	m := metricCiscoInterfaceTransmitBytes{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoInterfaceTransmitErrors struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.interface.transmit.errors metric with initial data.
func (m *metricCiscoInterfaceTransmitErrors) init() {
	m.data.SetName("cisco.interface.transmit.errors")
	m.data.SetDescription("Number of transmit errors on the interface")
	m.data.SetUnit("{error}")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoInterfaceTransmitErrors) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceNameAttributeValue string, interfaceStateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.state", interfaceStateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoInterfaceTransmitErrors) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoInterfaceTransmitErrors) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoInterfaceTransmitErrors(cfg MetricConfig) metricCiscoInterfaceTransmitErrors {
	m := metricCiscoInterfaceTransmitErrors{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoInterfaceUp struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.interface.up metric with initial data.
func (m *metricCiscoInterfaceUp) init() {
	m.data.SetName("cisco.interface.up")
	m.data.SetDescription("Interface operational status (1 for up, 0 for down)")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricCiscoInterfaceUp) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, interfaceNameAttributeValue string, interfaceStateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("interface.name", interfaceNameAttributeValue)
	dp.Attributes().PutStr("interface.state", interfaceStateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoInterfaceUp) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoInterfaceUp) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoInterfaceUp(cfg MetricConfig) metricCiscoInterfaceUp {
	m := metricCiscoInterfaceUp{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoSystemCPUUtilization struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.system.cpu.utilization metric with initial data.
func (m *metricCiscoSystemCPUUtilization) init() {
	m.data.SetName("cisco.system.cpu.utilization")
	m.data.SetDescription("CPU utilization as a fraction")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
}

func (m *metricCiscoSystemCPUUtilization) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoSystemCPUUtilization) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoSystemCPUUtilization) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoSystemCPUUtilization(cfg MetricConfig) metricCiscoSystemCPUUtilization {
	m := metricCiscoSystemCPUUtilization{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricCiscoSystemMemoryUtilization struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills cisco.system.memory.utilization metric with initial data.
func (m *metricCiscoSystemMemoryUtilization) init() {
	m.data.SetName("cisco.system.memory.utilization")
	m.data.SetDescription("Memory utilization as a fraction")
	m.data.SetUnit("1")
	m.data.SetEmptyGauge()
}

func (m *metricCiscoSystemMemoryUtilization) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricCiscoSystemMemoryUtilization) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricCiscoSystemMemoryUtilization) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricCiscoSystemMemoryUtilization(cfg MetricConfig) metricCiscoSystemMemoryUtilization {
	m := metricCiscoSystemMemoryUtilization{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                             MetricsBuilderConfig // config of the metrics builder.
	startTime                          pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity                    int                  // maximum observed number of metrics per resource.
	metricsBuffer                      pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                          component.BuildInfo  // contains version information.
	resourceAttributeIncludeFilter     map[string]filter.Filter
	resourceAttributeExcludeFilter     map[string]filter.Filter
	metricCiscoInterfaceReceiveBytes   metricCiscoInterfaceReceiveBytes
	metricCiscoInterfaceReceiveErrors  metricCiscoInterfaceReceiveErrors
	metricCiscoInterfaceTransmitBytes  metricCiscoInterfaceTransmitBytes
	metricCiscoInterfaceTransmitErrors metricCiscoInterfaceTransmitErrors
	metricCiscoInterfaceUp             metricCiscoInterfaceUp
	metricCiscoSystemCPUUtilization    metricCiscoSystemCPUUtilization
	metricCiscoSystemMemoryUtilization metricCiscoSystemMemoryUtilization
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}
func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                             mbc,
		startTime:                          pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                      pmetric.NewMetrics(),
		buildInfo:                          settings.BuildInfo,
		metricCiscoInterfaceReceiveBytes:   newMetricCiscoInterfaceReceiveBytes(mbc.Metrics.CiscoInterfaceReceiveBytes),
		metricCiscoInterfaceReceiveErrors:  newMetricCiscoInterfaceReceiveErrors(mbc.Metrics.CiscoInterfaceReceiveErrors),
		metricCiscoInterfaceTransmitBytes:  newMetricCiscoInterfaceTransmitBytes(mbc.Metrics.CiscoInterfaceTransmitBytes),
		metricCiscoInterfaceTransmitErrors: newMetricCiscoInterfaceTransmitErrors(mbc.Metrics.CiscoInterfaceTransmitErrors),
		metricCiscoInterfaceUp:             newMetricCiscoInterfaceUp(mbc.Metrics.CiscoInterfaceUp),
		metricCiscoSystemCPUUtilization:    newMetricCiscoSystemCPUUtilization(mbc.Metrics.CiscoSystemCPUUtilization),
		metricCiscoSystemMemoryUtilization: newMetricCiscoSystemMemoryUtilization(mbc.Metrics.CiscoSystemMemoryUtilization),
		resourceAttributeIncludeFilter:     make(map[string]filter.Filter),
		resourceAttributeExcludeFilter:     make(map[string]filter.Filter),
	}
	if mbc.ResourceAttributes.CiscoDeviceIP.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["cisco.device.ip"] = filter.CreateFilter(mbc.ResourceAttributes.CiscoDeviceIP.MetricsInclude)
	}
	if mbc.ResourceAttributes.CiscoDeviceIP.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["cisco.device.ip"] = filter.CreateFilter(mbc.ResourceAttributes.CiscoDeviceIP.MetricsExclude)
	}
	if mbc.ResourceAttributes.CiscoDeviceModel.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["cisco.device.model"] = filter.CreateFilter(mbc.ResourceAttributes.CiscoDeviceModel.MetricsInclude)
	}
	if mbc.ResourceAttributes.CiscoDeviceModel.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["cisco.device.model"] = filter.CreateFilter(mbc.ResourceAttributes.CiscoDeviceModel.MetricsExclude)
	}
	if mbc.ResourceAttributes.CiscoDeviceName.MetricsInclude != nil {
		mb.resourceAttributeIncludeFilter["cisco.device.name"] = filter.CreateFilter(mbc.ResourceAttributes.CiscoDeviceName.MetricsInclude)
	}
	if mbc.ResourceAttributes.CiscoDeviceName.MetricsExclude != nil {
		mb.resourceAttributeExcludeFilter["cisco.device.name"] = filter.CreateFilter(mbc.ResourceAttributes.CiscoDeviceName.MetricsExclude)
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// NewResourceBuilder returns a new resource builder that should be used to build a resource associated with for the emitted metrics.
func (mb *MetricsBuilder) NewResourceBuilder() *ResourceBuilder {
	return NewResourceBuilder(mb.config.ResourceAttributes)
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName(ScopeName)
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricCiscoInterfaceReceiveBytes.emit(ils.Metrics())
	mb.metricCiscoInterfaceReceiveErrors.emit(ils.Metrics())
	mb.metricCiscoInterfaceTransmitBytes.emit(ils.Metrics())
	mb.metricCiscoInterfaceTransmitErrors.emit(ils.Metrics())
	mb.metricCiscoInterfaceUp.emit(ils.Metrics())
	mb.metricCiscoSystemCPUUtilization.emit(ils.Metrics())
	mb.metricCiscoSystemMemoryUtilization.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}
	for attr, filter := range mb.resourceAttributeIncludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && !filter.Matches(val.AsString()) {
			return
		}
	}
	for attr, filter := range mb.resourceAttributeExcludeFilter {
		if val, ok := rm.Resource().Attributes().Get(attr); ok && filter.Matches(val.AsString()) {
			return
		}
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordCiscoInterfaceReceiveBytesDataPoint adds a data point to cisco.interface.receive.bytes metric.
func (mb *MetricsBuilder) RecordCiscoInterfaceReceiveBytesDataPoint(ts pcommon.Timestamp, val int64, interfaceNameAttributeValue string, interfaceStateAttributeValue string) {
	mb.metricCiscoInterfaceReceiveBytes.recordDataPoint(mb.startTime, ts, val, interfaceNameAttributeValue, interfaceStateAttributeValue)
}

// RecordCiscoInterfaceReceiveErrorsDataPoint adds a data point to cisco.interface.receive.errors metric.
func (mb *MetricsBuilder) RecordCiscoInterfaceReceiveErrorsDataPoint(ts pcommon.Timestamp, val int64, interfaceNameAttributeValue string, interfaceStateAttributeValue string) {
	mb.metricCiscoInterfaceReceiveErrors.recordDataPoint(mb.startTime, ts, val, interfaceNameAttributeValue, interfaceStateAttributeValue)
}

// RecordCiscoInterfaceTransmitBytesDataPoint adds a data point to cisco.interface.transmit.bytes metric.
func (mb *MetricsBuilder) RecordCiscoInterfaceTransmitBytesDataPoint(ts pcommon.Timestamp, val int64, interfaceNameAttributeValue string, interfaceStateAttributeValue string) {
	mb.metricCiscoInterfaceTransmitBytes.recordDataPoint(mb.startTime, ts, val, interfaceNameAttributeValue, interfaceStateAttributeValue)
}

// RecordCiscoInterfaceTransmitErrorsDataPoint adds a data point to cisco.interface.transmit.errors metric.
func (mb *MetricsBuilder) RecordCiscoInterfaceTransmitErrorsDataPoint(ts pcommon.Timestamp, val int64, interfaceNameAttributeValue string, interfaceStateAttributeValue string) {
	mb.metricCiscoInterfaceTransmitErrors.recordDataPoint(mb.startTime, ts, val, interfaceNameAttributeValue, interfaceStateAttributeValue)
}

// RecordCiscoInterfaceUpDataPoint adds a data point to cisco.interface.up metric.
func (mb *MetricsBuilder) RecordCiscoInterfaceUpDataPoint(ts pcommon.Timestamp, val int64, interfaceNameAttributeValue string, interfaceStateAttributeValue string) {
	mb.metricCiscoInterfaceUp.recordDataPoint(mb.startTime, ts, val, interfaceNameAttributeValue, interfaceStateAttributeValue)
}

// RecordCiscoSystemCPUUtilizationDataPoint adds a data point to cisco.system.cpu.utilization metric.
func (mb *MetricsBuilder) RecordCiscoSystemCPUUtilizationDataPoint(ts pcommon.Timestamp, val float64) {
	mb.metricCiscoSystemCPUUtilization.recordDataPoint(mb.startTime, ts, val)
}

// RecordCiscoSystemMemoryUtilizationDataPoint adds a data point to cisco.system.memory.utilization metric.
func (mb *MetricsBuilder) RecordCiscoSystemMemoryUtilizationDataPoint(ts pcommon.Timestamp, val float64) {
	mb.metricCiscoSystemMemoryUtilization.recordDataPoint(mb.startTime, ts, val)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
