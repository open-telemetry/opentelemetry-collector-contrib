// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver"
)

type MetricsBuilder struct {
	config          MetricsBuilderConfig
	startTime       pcommon.Timestamp
	metricsCapacity int
	metricsBuffer   pmetric.Metrics
}

func NewMetricsBuilder(mbc MetricsBuilderConfig, settings receiver.Settings) *MetricsBuilder {
	return &MetricsBuilder{
		config:        mbc,
		startTime:     pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer: pmetric.NewMetrics(),
	}
}

func (mb *MetricsBuilder) Emit() pmetric.Metrics {
	m := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return m
}

// Duration metrics
func (mb *MetricsBuilder) RecordCiscoCollectDurationSecondsDataPoint(ts pcommon.Timestamp, val float64, targetAttributeValue string, collectorAttributeValue string) {
	if !mb.config.Metrics.CiscoCollectDurationSeconds.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)
	rm.Resource().Attributes().PutStr("collector", collectorAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.collect.duration.seconds")
	metric.SetDescription("Duration of a scrape by collector and target")
	metric.SetUnit("s")

	gauge := metric.SetEmptyGauge()
	dp := gauge.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
}

func (mb *MetricsBuilder) RecordCiscoCollectorDurationSecondsDataPoint(ts pcommon.Timestamp, val float64, targetAttributeValue string) {
	if !mb.config.Metrics.CiscoCollectorDurationSeconds.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.collector.duration.seconds")
	metric.SetDescription("Duration of all collector scrapes for one target (total collection time)")
	metric.SetUnit("s")

	gauge := metric.SetEmptyGauge()
	dp := gauge.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
}

// Device metrics
func (mb *MetricsBuilder) RecordCiscoDeviceUpDataPoint(ts pcommon.Timestamp, val int64, targetAttributeValue string) {
	if !mb.config.Metrics.CiscoDeviceUp.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.device.up")
	metric.SetDescription("Device availability (1 = up, 0 = down)")
	metric.SetUnit("1")

	gauge := metric.SetEmptyGauge()
	dp := gauge.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// Interface metrics
func (mb *MetricsBuilder) RecordCiscoInterfaceReceiveBytesDataPoint(ts pcommon.Timestamp, val int64, targetAttributeValue string, nameAttributeValue string, macAttributeValue string, descriptionAttributeValue string, speedAttributeValue string) {
	if !mb.config.Metrics.CiscoInterfaceReceiveBytes.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)
	rm.Resource().Attributes().PutStr("name", nameAttributeValue)
	rm.Resource().Attributes().PutStr("mac", macAttributeValue)
	rm.Resource().Attributes().PutStr("description", descriptionAttributeValue)
	rm.Resource().Attributes().PutStr("speed", speedAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.interface.receive.bytes")
	metric.SetDescription("Number of bytes received on interface")
	metric.SetUnit("By")

	sum := metric.SetEmptySum()
	sum.SetIsMonotonic(true)
	dp := sum.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

func (mb *MetricsBuilder) RecordCiscoInterfaceTransmitBytesDataPoint(ts pcommon.Timestamp, val int64, targetAttributeValue string, nameAttributeValue string, macAttributeValue string, descriptionAttributeValue string, speedAttributeValue string) {
	if !mb.config.Metrics.CiscoInterfaceTransmitBytes.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)
	rm.Resource().Attributes().PutStr("name", nameAttributeValue)
	rm.Resource().Attributes().PutStr("mac", macAttributeValue)
	rm.Resource().Attributes().PutStr("description", descriptionAttributeValue)
	rm.Resource().Attributes().PutStr("speed", speedAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.interface.transmit.bytes")
	metric.SetDescription("Number of bytes transmitted on interface")
	metric.SetUnit("By")

	sum := metric.SetEmptySum()
	sum.SetIsMonotonic(true)
	dp := sum.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

func (mb *MetricsBuilder) RecordCiscoInterfaceUpDataPoint(ts pcommon.Timestamp, val int64, targetAttributeValue string, nameAttributeValue string, macAttributeValue string, descriptionAttributeValue string, speedAttributeValue string) {
	if !mb.config.Metrics.CiscoInterfaceUp.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)
	rm.Resource().Attributes().PutStr("name", nameAttributeValue)
	rm.Resource().Attributes().PutStr("mac", macAttributeValue)
	rm.Resource().Attributes().PutStr("description", descriptionAttributeValue)
	rm.Resource().Attributes().PutStr("speed", speedAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.interface.up")
	metric.SetDescription("Interface operational status (1 = up, 0 = down)")
	metric.SetUnit("1")

	gauge := metric.SetEmptyGauge()
	dp := gauge.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

// Error metrics
func (mb *MetricsBuilder) RecordCiscoInterfaceReceiveErrorsDataPoint(ts pcommon.Timestamp, val int64, targetAttributeValue string, nameAttributeValue string, macAttributeValue string, descriptionAttributeValue string, speedAttributeValue string) {
	if !mb.config.Metrics.CiscoInterfaceReceiveErrors.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)
	rm.Resource().Attributes().PutStr("name", nameAttributeValue)
	rm.Resource().Attributes().PutStr("mac", macAttributeValue)
	rm.Resource().Attributes().PutStr("description", descriptionAttributeValue)
	rm.Resource().Attributes().PutStr("speed", speedAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.interface.receive.errors")
	metric.SetDescription("Number of input errors on interface")
	metric.SetUnit("1")

	sum := metric.SetEmptySum()
	sum.SetIsMonotonic(true)
	dp := sum.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

func (mb *MetricsBuilder) RecordCiscoInterfaceTransmitErrorsDataPoint(ts pcommon.Timestamp, val int64, targetAttributeValue string, nameAttributeValue string, macAttributeValue string, descriptionAttributeValue string, speedAttributeValue string) {
	if !mb.config.Metrics.CiscoInterfaceTransmitErrors.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)
	rm.Resource().Attributes().PutStr("name", nameAttributeValue)
	rm.Resource().Attributes().PutStr("mac", macAttributeValue)
	rm.Resource().Attributes().PutStr("description", descriptionAttributeValue)
	rm.Resource().Attributes().PutStr("speed", speedAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.interface.transmit.errors")
	metric.SetDescription("Number of output errors on interface")
	metric.SetUnit("1")

	sum := metric.SetEmptySum()
	sum.SetIsMonotonic(true)
	dp := sum.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

func (mb *MetricsBuilder) RecordCiscoInterfaceReceiveDropsDataPoint(ts pcommon.Timestamp, val int64, targetAttributeValue string, nameAttributeValue string, macAttributeValue string, descriptionAttributeValue string, speedAttributeValue string) {
	if !mb.config.Metrics.CiscoInterfaceReceiveDrops.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)
	rm.Resource().Attributes().PutStr("name", nameAttributeValue)
	rm.Resource().Attributes().PutStr("mac", macAttributeValue)
	rm.Resource().Attributes().PutStr("description", descriptionAttributeValue)
	rm.Resource().Attributes().PutStr("speed", speedAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.interface.receive.drops")
	metric.SetDescription("Number of input drops on interface")
	metric.SetUnit("1")

	sum := metric.SetEmptySum()
	sum.SetIsMonotonic(true)
	dp := sum.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

func (mb *MetricsBuilder) RecordCiscoInterfaceTransmitDropsDataPoint(ts pcommon.Timestamp, val int64, targetAttributeValue string, nameAttributeValue string, macAttributeValue string, descriptionAttributeValue string, speedAttributeValue string) {
	if !mb.config.Metrics.CiscoInterfaceTransmitDrops.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)
	rm.Resource().Attributes().PutStr("name", nameAttributeValue)
	rm.Resource().Attributes().PutStr("mac", macAttributeValue)
	rm.Resource().Attributes().PutStr("description", descriptionAttributeValue)
	rm.Resource().Attributes().PutStr("speed", speedAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.interface.transmit.drops")
	metric.SetDescription("Number of output drops on interface")
	metric.SetUnit("1")

	sum := metric.SetEmptySum()
	sum.SetIsMonotonic(true)
	dp := sum.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

func (mb *MetricsBuilder) RecordCiscoInterfaceReceiveMulticastDataPoint(ts pcommon.Timestamp, val int64, targetAttributeValue string, nameAttributeValue string, macAttributeValue string, descriptionAttributeValue string, speedAttributeValue string) {
	if !mb.config.Metrics.CiscoInterfaceReceiveMulticast.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)
	rm.Resource().Attributes().PutStr("name", nameAttributeValue)
	rm.Resource().Attributes().PutStr("mac", macAttributeValue)
	rm.Resource().Attributes().PutStr("description", descriptionAttributeValue)
	rm.Resource().Attributes().PutStr("speed", speedAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.interface.receive.multicast")
	metric.SetDescription("Number of multicast packets received on interface")
	metric.SetUnit("1")

	sum := metric.SetEmptySum()
	sum.SetIsMonotonic(true)
	dp := sum.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

func (mb *MetricsBuilder) RecordCiscoInterfaceReceiveBroadcastDataPoint(ts pcommon.Timestamp, val int64, targetAttributeValue string, nameAttributeValue string, macAttributeValue string, descriptionAttributeValue string, speedAttributeValue string) {
	if !mb.config.Metrics.CiscoInterfaceReceiveBroadcast.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)
	rm.Resource().Attributes().PutStr("name", nameAttributeValue)
	rm.Resource().Attributes().PutStr("mac", macAttributeValue)
	rm.Resource().Attributes().PutStr("description", descriptionAttributeValue)
	rm.Resource().Attributes().PutStr("speed", speedAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.interface.receive.broadcast")
	metric.SetDescription("Number of broadcast packets received on interface")
	metric.SetUnit("1")

	sum := metric.SetEmptySum()
	sum.SetIsMonotonic(true)
	dp := sum.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}

func (mb *MetricsBuilder) RecordCiscoInterfaceErrorStatusDataPoint(ts pcommon.Timestamp, val int64, targetAttributeValue string, nameAttributeValue string, macAttributeValue string, descriptionAttributeValue string, speedAttributeValue string) {
	if !mb.config.Metrics.CiscoInterfaceErrorStatus.Enabled {
		return
	}
	rm := mb.metricsBuffer.ResourceMetrics().AppendEmpty()
	rm.Resource().Attributes().PutStr("target", targetAttributeValue)
	rm.Resource().Attributes().PutStr("name", nameAttributeValue)
	rm.Resource().Attributes().PutStr("mac", macAttributeValue)
	rm.Resource().Attributes().PutStr("description", descriptionAttributeValue)
	rm.Resource().Attributes().PutStr("speed", speedAttributeValue)

	metrics := rm.ScopeMetrics().AppendEmpty().Metrics()
	metric := metrics.AppendEmpty()
	metric.SetName("cisco.interface.error.status")
	metric.SetDescription("Admin and operational status differ (1 = mismatch, 0 = match)")
	metric.SetUnit("1")

	gauge := metric.SetEmptyGauge()
	dp := gauge.DataPoints().AppendEmpty()
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
}
