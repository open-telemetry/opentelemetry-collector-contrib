// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"

	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					CiscoBgpSessionMessagesInputCount:    MetricConfig{Enabled: true},
					CiscoBgpSessionMessagesOutputCount:   MetricConfig{Enabled: true},
					CiscoBgpSessionPrefixesReceivedCount: MetricConfig{Enabled: true},
					CiscoBgpSessionUp:                    MetricConfig{Enabled: true},
					CiscoCollectDurationSeconds:          MetricConfig{Enabled: true},
					CiscoCollectorDurationSeconds:        MetricConfig{Enabled: true},
					CiscoEnvironmentPowerUp:              MetricConfig{Enabled: true},
					CiscoEnvironmentSensorTemp:           MetricConfig{Enabled: true},
					CiscoFactsCPUFiveMinutesPercent:      MetricConfig{Enabled: true},
					CiscoFactsCPUFiveSecondsPercent:      MetricConfig{Enabled: true},
					CiscoFactsCPUInterruptPercent:        MetricConfig{Enabled: true},
					CiscoFactsCPUOneMinutePercent:        MetricConfig{Enabled: true},
					CiscoFactsMemoryFree:                 MetricConfig{Enabled: true},
					CiscoFactsMemoryTotal:                MetricConfig{Enabled: true},
					CiscoFactsMemoryUsed:                 MetricConfig{Enabled: true},
					CiscoFactsVersion:                    MetricConfig{Enabled: true},
					CiscoInterfaceAdminUp:                MetricConfig{Enabled: true},
					CiscoInterfaceErrorStatus:            MetricConfig{Enabled: true},
					CiscoInterfaceReceiveBroadcast:       MetricConfig{Enabled: true},
					CiscoInterfaceReceiveBytes:           MetricConfig{Enabled: true},
					CiscoInterfaceReceiveDrops:           MetricConfig{Enabled: true},
					CiscoInterfaceReceiveErrors:          MetricConfig{Enabled: true},
					CiscoInterfaceReceiveMulticast:       MetricConfig{Enabled: true},
					CiscoInterfaceTransmitBytes:          MetricConfig{Enabled: true},
					CiscoInterfaceTransmitDrops:          MetricConfig{Enabled: true},
					CiscoInterfaceTransmitErrors:         MetricConfig{Enabled: true},
					CiscoInterfaceUp:                     MetricConfig{Enabled: true},
					CiscoOpticsRx:                        MetricConfig{Enabled: true},
					CiscoOpticsTx:                        MetricConfig{Enabled: true},
					CiscoUp:                              MetricConfig{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					CiscoBgpSessionMessagesInputCount:    MetricConfig{Enabled: false},
					CiscoBgpSessionMessagesOutputCount:   MetricConfig{Enabled: false},
					CiscoBgpSessionPrefixesReceivedCount: MetricConfig{Enabled: false},
					CiscoBgpSessionUp:                    MetricConfig{Enabled: false},
					CiscoCollectDurationSeconds:          MetricConfig{Enabled: false},
					CiscoCollectorDurationSeconds:        MetricConfig{Enabled: false},
					CiscoEnvironmentPowerUp:              MetricConfig{Enabled: false},
					CiscoEnvironmentSensorTemp:           MetricConfig{Enabled: false},
					CiscoFactsCPUFiveMinutesPercent:      MetricConfig{Enabled: false},
					CiscoFactsCPUFiveSecondsPercent:      MetricConfig{Enabled: false},
					CiscoFactsCPUInterruptPercent:        MetricConfig{Enabled: false},
					CiscoFactsCPUOneMinutePercent:        MetricConfig{Enabled: false},
					CiscoFactsMemoryFree:                 MetricConfig{Enabled: false},
					CiscoFactsMemoryTotal:                MetricConfig{Enabled: false},
					CiscoFactsMemoryUsed:                 MetricConfig{Enabled: false},
					CiscoFactsVersion:                    MetricConfig{Enabled: false},
					CiscoInterfaceAdminUp:                MetricConfig{Enabled: false},
					CiscoInterfaceErrorStatus:            MetricConfig{Enabled: false},
					CiscoInterfaceReceiveBroadcast:       MetricConfig{Enabled: false},
					CiscoInterfaceReceiveBytes:           MetricConfig{Enabled: false},
					CiscoInterfaceReceiveDrops:           MetricConfig{Enabled: false},
					CiscoInterfaceReceiveErrors:          MetricConfig{Enabled: false},
					CiscoInterfaceReceiveMulticast:       MetricConfig{Enabled: false},
					CiscoInterfaceTransmitBytes:          MetricConfig{Enabled: false},
					CiscoInterfaceTransmitDrops:          MetricConfig{Enabled: false},
					CiscoInterfaceTransmitErrors:         MetricConfig{Enabled: false},
					CiscoInterfaceUp:                     MetricConfig{Enabled: false},
					CiscoOpticsRx:                        MetricConfig{Enabled: false},
					CiscoOpticsTx:                        MetricConfig{Enabled: false},
					CiscoUp:                              MetricConfig{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, sub.Unmarshal(&cfg, confmap.WithIgnoreUnused()))
	return cfg
}
