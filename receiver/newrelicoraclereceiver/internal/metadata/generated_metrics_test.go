// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: testDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskBlocksReadDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskBlocksWrittenDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskReadTimeMillisecondsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskReadsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskWriteTimeMillisecondsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskWritesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbGlobalNameDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val", "global.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbLockedAccountsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaAllocatedBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaFreeableBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaInUseBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaMaxSizeBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSessionsCountDataPoint(ts, 1, "newrelic.entity_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceDbIDDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceGlobalNameDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceIsOfflineDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceOfflineCdbDatafilesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceOfflinePdbDatafilesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespacePdbNonWriteModeDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceConsumedBytesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceReservedBytesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceUsedPercentageDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			rb := mb.NewResourceBuilder()
			rb.SetHostName("host.name-val")
			rb.SetNewrelicoracledbInstanceName("newrelicoracledb.instance.name-val")
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "newrelicoracledb.disk.blocks_read":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.blocks_read"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.blocks_read")
					validatedMetrics["newrelicoracledb.disk.blocks_read"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical blocks read from disk", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.blocks_written":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.blocks_written"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.blocks_written")
					validatedMetrics["newrelicoracledb.disk.blocks_written"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical blocks written to disk", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.read_time_milliseconds":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.read_time_milliseconds"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.read_time_milliseconds")
					validatedMetrics["newrelicoracledb.disk.read_time_milliseconds"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time spent reading from disk in milliseconds", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.reads":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.reads"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.reads")
					validatedMetrics["newrelicoracledb.disk.reads"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical disk reads", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.write_time_milliseconds":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.write_time_milliseconds"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.write_time_milliseconds")
					validatedMetrics["newrelicoracledb.disk.write_time_milliseconds"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time spent writing to disk in milliseconds", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.writes":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.writes"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.writes")
					validatedMetrics["newrelicoracledb.disk.writes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical disk writes", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.global_name":
					assert.False(t, validatedMetrics["newrelicoracledb.global_name"], "Found a duplicate in the metrics slice: newrelicoracledb.global_name")
					validatedMetrics["newrelicoracledb.global_name"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Oracle database global name information", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("global.name")
					assert.True(t, ok)
					assert.Equal(t, "global.name-val", attrVal.Str())
				case "newrelicoracledb.locked_accounts":
					assert.False(t, validatedMetrics["newrelicoracledb.locked_accounts"], "Found a duplicate in the metrics slice: newrelicoracledb.locked_accounts")
					validatedMetrics["newrelicoracledb.locked_accounts"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of locked user accounts in the database", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_allocated_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_allocated_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_allocated_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_allocated_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total PGA memory allocated in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_freeable_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_freeable_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_freeable_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_freeable_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total freeable PGA memory in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_in_use_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_in_use_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_in_use_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_in_use_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total PGA memory currently in use in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_max_size_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_max_size_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_max_size_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_max_size_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Global memory bound for PGA in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sessions.count":
					assert.False(t, validatedMetrics["newrelicoracledb.sessions.count"], "Found a duplicate in the metrics slice: newrelicoracledb.sessions.count")
					validatedMetrics["newrelicoracledb.sessions.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of active Oracle database sessions", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.db_id":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.db_id"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.db_id")
					validatedMetrics["newrelicoracledb.tablespace.db_id"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database ID information for tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.global_name":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.global_name"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.global_name")
					validatedMetrics["newrelicoracledb.tablespace.global_name"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Global name information for tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.is_offline":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.is_offline"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.is_offline")
					validatedMetrics["newrelicoracledb.tablespace.is_offline"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Whether the tablespace is offline (1) or online (0)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.offline_cdb_datafiles":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.offline_cdb_datafiles"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.offline_cdb_datafiles")
					validatedMetrics["newrelicoracledb.tablespace.offline_cdb_datafiles"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of offline CDB datafiles by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.offline_pdb_datafiles":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.offline_pdb_datafiles"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.offline_pdb_datafiles")
					validatedMetrics["newrelicoracledb.tablespace.offline_pdb_datafiles"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of offline PDB datafiles by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.pdb_non_write_mode":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.pdb_non_write_mode"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.pdb_non_write_mode")
					validatedMetrics["newrelicoracledb.tablespace.pdb_non_write_mode"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of PDB datafiles in non-write mode by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_consumed_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_consumed_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_consumed_bytes")
					validatedMetrics["newrelicoracledb.tablespace.space_consumed_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total bytes consumed by the tablespace", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_reserved_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_reserved_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_reserved_bytes")
					validatedMetrics["newrelicoracledb.tablespace.space_reserved_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total bytes reserved by the tablespace", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_used_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_used_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_used_percentage")
					validatedMetrics["newrelicoracledb.tablespace.space_used_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Percentage of tablespace space currently used", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				}
			}
		})
	}
}
