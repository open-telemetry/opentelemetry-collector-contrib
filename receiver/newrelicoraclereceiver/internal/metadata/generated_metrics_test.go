// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: testDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDbIDDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val", "db.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskBlocksReadDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskBlocksWrittenDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskReadTimeMillisecondsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskReadsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskWriteTimeMillisecondsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskWritesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbGlobalNameDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val", "global.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbLockedAccountsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbLongRunningQueriesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaAllocatedBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaFreeableBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaInUseBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaMaxSizeBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemorySgaSharedPoolLibraryCacheSharableBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemorySgaSharedPoolLibraryCacheUserBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemorySgaUgaTotalBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbActiveParallelSessionsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbActiveSerialSessionsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbAverageActiveSessionsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbBackgroundCPUUsagePerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbBackgroundTimePerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbBlockChangesPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbBlockChangesPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCPUTimeRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCPUUsagePerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCPUUsagePerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCurrentLogonsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCurrentOpenCursorsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbDbPhysicalReadBytesPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbDbPhysicalReadsPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbDbPhysicalWriteBytesPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbDbPhysicalWritesPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbExecuteWithoutParseRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbExecutionsPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbExecutionsPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbHardParseCountPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbHardParseCountPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbLogicalReadsPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbLogicalReadsPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbLogonsPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbLogonsPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbNetworkTrafficBytePerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbOpenCursorsPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbOpenCursorsPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbParseFailureCountPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbPhysicalReadBytesPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbPhysicalReadsPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbPhysicalWriteBytesPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbPhysicalWritesPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbRedoGeneratedBytesPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbRedoGeneratedBytesPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbResponseTimePerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSessionCountDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSoftParseRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSQLServiceResponseTimeDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbTotalParseCountPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbTotalParseCountPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbTransactionsPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserCallsPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserCallsPerTransactionDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserCommitsPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserCommitsPercentageDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserRollbacksPerSecondDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserRollbacksPercentageDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			allMetricsCount++
			mb.RecordNewrelicoracledbPdbWaitTimeRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogParallelWriteWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogSwitchArchivingNeededWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogSwitchCheckpointIncompleteWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogSwitchCompletionWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRollbackSegmentsGetsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRollbackSegmentsWaitRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRollbackSegmentsWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSessionsCountDataPoint(ts, 1, "newrelic.entity_name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaBufferBusyWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaFixedSizeBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaFreeBufferInspectedWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaFreeBufferWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaHitRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaLogAllocationRetriesRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaLogBufferRedoAllocationRetriesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaLogBufferRedoEntriesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaLogBufferSpaceWaitsDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaRedoBuffersBytesDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaSharedPoolDictCacheMissRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaSharedPoolLibraryCacheHitRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaSharedPoolLibraryCacheReloadRatioDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSortsDiskDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSortsMemoryDataPoint(ts, 1, "newrelic.entity_name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceDbIDDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceGlobalNameDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceIsOfflineDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceOfflineCdbDatafilesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceOfflinePdbDatafilesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespacePdbNonWriteModeDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceConsumedBytesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceReservedBytesDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceUsedPercentageDataPoint(ts, 1, "newrelic.entity_name-val", "tablespace.name-val")

			rb := mb.NewResourceBuilder()
			rb.SetHostName("host.name-val")
			rb.SetNewrelicoracledbInstanceName("newrelicoracledb.instance.name-val")
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "newrelicoracledb.db_id":
					assert.False(t, validatedMetrics["newrelicoracledb.db_id"], "Found a duplicate in the metrics slice: newrelicoracledb.db_id")
					validatedMetrics["newrelicoracledb.db_id"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Oracle database ID information", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("db.id")
					assert.True(t, ok)
					assert.Equal(t, "db.id-val", attrVal.Str())
				case "newrelicoracledb.disk.blocks_read":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.blocks_read"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.blocks_read")
					validatedMetrics["newrelicoracledb.disk.blocks_read"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical blocks read from disk", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.blocks_written":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.blocks_written"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.blocks_written")
					validatedMetrics["newrelicoracledb.disk.blocks_written"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical blocks written to disk", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.read_time_milliseconds":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.read_time_milliseconds"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.read_time_milliseconds")
					validatedMetrics["newrelicoracledb.disk.read_time_milliseconds"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time spent reading from disk in milliseconds", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.reads":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.reads"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.reads")
					validatedMetrics["newrelicoracledb.disk.reads"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical disk reads", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.write_time_milliseconds":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.write_time_milliseconds"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.write_time_milliseconds")
					validatedMetrics["newrelicoracledb.disk.write_time_milliseconds"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time spent writing to disk in milliseconds", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.writes":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.writes"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.writes")
					validatedMetrics["newrelicoracledb.disk.writes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical disk writes", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.global_name":
					assert.False(t, validatedMetrics["newrelicoracledb.global_name"], "Found a duplicate in the metrics slice: newrelicoracledb.global_name")
					validatedMetrics["newrelicoracledb.global_name"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Oracle database global name information", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("global.name")
					assert.True(t, ok)
					assert.Equal(t, "global.name-val", attrVal.Str())
				case "newrelicoracledb.locked_accounts":
					assert.False(t, validatedMetrics["newrelicoracledb.locked_accounts"], "Found a duplicate in the metrics slice: newrelicoracledb.locked_accounts")
					validatedMetrics["newrelicoracledb.locked_accounts"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of locked user accounts in the database", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.long_running_queries":
					assert.False(t, validatedMetrics["newrelicoracledb.long_running_queries"], "Found a duplicate in the metrics slice: newrelicoracledb.long_running_queries")
					validatedMetrics["newrelicoracledb.long_running_queries"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of long running queries (active sessions running for more than 60 seconds)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_allocated_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_allocated_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_allocated_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_allocated_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total PGA memory allocated in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_freeable_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_freeable_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_freeable_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_freeable_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total freeable PGA memory in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_in_use_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_in_use_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_in_use_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_in_use_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total PGA memory currently in use in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_max_size_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_max_size_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_max_size_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_max_size_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Global memory bound for PGA in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.sga_shared_pool_library_cache_sharable_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.sga_shared_pool_library_cache_sharable_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.sga_shared_pool_library_cache_sharable_bytes")
					validatedMetrics["newrelicoracledb.memory.sga_shared_pool_library_cache_sharable_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA shared pool library cache sharable memory in bytes for statements with more than 5 executions", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.sga_shared_pool_library_cache_user_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.sga_shared_pool_library_cache_user_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.sga_shared_pool_library_cache_user_bytes")
					validatedMetrics["newrelicoracledb.memory.sga_shared_pool_library_cache_user_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA shared pool library cache shareable memory per user in bytes (250 * users_opening)", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.sga_uga_total_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.sga_uga_total_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.sga_uga_total_bytes")
					validatedMetrics["newrelicoracledb.memory.sga_uga_total_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total SGA UGA memory in bytes (session uga memory max)", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.active_parallel_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.active_parallel_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.active_parallel_sessions")
					validatedMetrics["newrelicoracledb.pdb.active_parallel_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of active parallel sessions in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.active_serial_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.active_serial_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.active_serial_sessions")
					validatedMetrics["newrelicoracledb.pdb.active_serial_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of active serial sessions in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.average_active_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.average_active_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.average_active_sessions")
					validatedMetrics["newrelicoracledb.pdb.average_active_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average number of active sessions in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.background_cpu_usage_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.background_cpu_usage_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.background_cpu_usage_per_second")
					validatedMetrics["newrelicoracledb.pdb.background_cpu_usage_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Background CPU usage per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.background_time_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.background_time_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.background_time_per_second")
					validatedMetrics["newrelicoracledb.pdb.background_time_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Background time per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.block_changes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.block_changes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.block_changes_per_second")
					validatedMetrics["newrelicoracledb.pdb.block_changes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "DB block changes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.block_changes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.block_changes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.block_changes_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.block_changes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "DB block changes per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.cpu_time_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.cpu_time_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.cpu_time_ratio")
					validatedMetrics["newrelicoracledb.pdb.cpu_time_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database CPU time ratio in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.cpu_usage_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.cpu_usage_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.cpu_usage_per_second")
					validatedMetrics["newrelicoracledb.pdb.cpu_usage_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU usage per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.cpu_usage_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.cpu_usage_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.cpu_usage_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.cpu_usage_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU usage per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.current_logons":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.current_logons"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.current_logons")
					validatedMetrics["newrelicoracledb.pdb.current_logons"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of logons in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.current_open_cursors":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.current_open_cursors"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.current_open_cursors")
					validatedMetrics["newrelicoracledb.pdb.current_open_cursors"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of open cursors in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.db_physical_read_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.db_physical_read_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.db_physical_read_bytes_per_second")
					validatedMetrics["newrelicoracledb.pdb.db_physical_read_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical read bytes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.db_physical_reads_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.db_physical_reads_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.db_physical_reads_per_second")
					validatedMetrics["newrelicoracledb.pdb.db_physical_reads_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical reads per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.db_physical_write_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.db_physical_write_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.db_physical_write_bytes_per_second")
					validatedMetrics["newrelicoracledb.pdb.db_physical_write_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical write bytes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.db_physical_writes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.db_physical_writes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.db_physical_writes_per_second")
					validatedMetrics["newrelicoracledb.pdb.db_physical_writes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical writes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.execute_without_parse_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.execute_without_parse_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.execute_without_parse_ratio")
					validatedMetrics["newrelicoracledb.pdb.execute_without_parse_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Execute without parse ratio in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.executions_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.executions_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.executions_per_second")
					validatedMetrics["newrelicoracledb.pdb.executions_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Executions per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.executions_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.executions_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.executions_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.executions_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Executions per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.hard_parse_count_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.hard_parse_count_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.hard_parse_count_per_second")
					validatedMetrics["newrelicoracledb.pdb.hard_parse_count_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Hard parse count per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.hard_parse_count_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.hard_parse_count_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.hard_parse_count_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.hard_parse_count_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Hard parse count per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.logical_reads_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.logical_reads_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.logical_reads_per_second")
					validatedMetrics["newrelicoracledb.pdb.logical_reads_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logical reads per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.logical_reads_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.logical_reads_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.logical_reads_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.logical_reads_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logical reads per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.logons_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.logons_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.logons_per_second")
					validatedMetrics["newrelicoracledb.pdb.logons_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logons per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.logons_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.logons_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.logons_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.logons_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logons per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.network_traffic_byte_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.network_traffic_byte_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.network_traffic_byte_per_second")
					validatedMetrics["newrelicoracledb.pdb.network_traffic_byte_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Network traffic volume per second in bytes in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.open_cursors_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.open_cursors_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.open_cursors_per_second")
					validatedMetrics["newrelicoracledb.pdb.open_cursors_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Open cursors per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.open_cursors_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.open_cursors_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.open_cursors_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.open_cursors_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Open cursors per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.parse_failure_count_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.parse_failure_count_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.parse_failure_count_per_second")
					validatedMetrics["newrelicoracledb.pdb.parse_failure_count_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Parse failure count per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.physical_read_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.physical_read_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.physical_read_bytes_per_second")
					validatedMetrics["newrelicoracledb.pdb.physical_read_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical read total bytes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.physical_reads_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.physical_reads_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.physical_reads_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.physical_reads_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical reads per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.physical_write_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.physical_write_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.physical_write_bytes_per_second")
					validatedMetrics["newrelicoracledb.pdb.physical_write_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical write total bytes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.physical_writes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.physical_writes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.physical_writes_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.physical_writes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical writes per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.redo_generated_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.redo_generated_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.redo_generated_bytes_per_second")
					validatedMetrics["newrelicoracledb.pdb.redo_generated_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Redo generated per second in bytes in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.redo_generated_bytes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.redo_generated_bytes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.redo_generated_bytes_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.redo_generated_bytes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Redo generated per transaction in bytes in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.response_time_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.response_time_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.response_time_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.response_time_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Response time per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.session_count":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.session_count"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.session_count")
					validatedMetrics["newrelicoracledb.pdb.session_count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Session count in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.soft_parse_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.soft_parse_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.soft_parse_ratio")
					validatedMetrics["newrelicoracledb.pdb.soft_parse_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Soft parse ratio in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.sql_service_response_time":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.sql_service_response_time"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.sql_service_response_time")
					validatedMetrics["newrelicoracledb.pdb.sql_service_response_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SQL service response time in PDB", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.total_parse_count_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.total_parse_count_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.total_parse_count_per_second")
					validatedMetrics["newrelicoracledb.pdb.total_parse_count_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total parse count per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.total_parse_count_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.total_parse_count_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.total_parse_count_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.total_parse_count_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total parse count per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.transactions_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.transactions_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.transactions_per_second")
					validatedMetrics["newrelicoracledb.pdb.transactions_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User transactions per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_calls_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_calls_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_calls_per_second")
					validatedMetrics["newrelicoracledb.pdb.user_calls_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User calls per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_calls_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_calls_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_calls_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.user_calls_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User calls per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_commits_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_commits_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_commits_per_second")
					validatedMetrics["newrelicoracledb.pdb.user_commits_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User commits per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_commits_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_commits_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_commits_percentage")
					validatedMetrics["newrelicoracledb.pdb.user_commits_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User commits percentage in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_rollbacks_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_rollbacks_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_rollbacks_per_second")
					validatedMetrics["newrelicoracledb.pdb.user_rollbacks_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User rollbacks per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_rollbacks_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_rollbacks_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_rollbacks_percentage")
					validatedMetrics["newrelicoracledb.pdb.user_rollbacks_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User rollbacks percentage in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.wait_time_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.wait_time_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.wait_time_ratio")
					validatedMetrics["newrelicoracledb.pdb.wait_time_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database wait time ratio in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log_parallel_write_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log_parallel_write_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log_parallel_write_waits")
					validatedMetrics["newrelicoracledb.redo_log_parallel_write_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of waits for log file parallel write events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log_switch_archiving_needed_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log_switch_archiving_needed_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log_switch_archiving_needed_waits")
					validatedMetrics["newrelicoracledb.redo_log_switch_archiving_needed_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of waits for log file switch (archiving needed) events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log_switch_checkpoint_incomplete_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log_switch_checkpoint_incomplete_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log_switch_checkpoint_incomplete_waits")
					validatedMetrics["newrelicoracledb.redo_log_switch_checkpoint_incomplete_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of waits for log file switch (checkpoint incomplete) events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log_switch_completion_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log_switch_completion_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log_switch_completion_waits")
					validatedMetrics["newrelicoracledb.redo_log_switch_completion_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of waits for log file switch completion events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rollback_segments_gets":
					assert.False(t, validatedMetrics["newrelicoracledb.rollback_segments_gets"], "Found a duplicate in the metrics slice: newrelicoracledb.rollback_segments_gets")
					validatedMetrics["newrelicoracledb.rollback_segments_gets"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of gets on rollback segments", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rollback_segments_wait_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.rollback_segments_wait_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.rollback_segments_wait_ratio")
					validatedMetrics["newrelicoracledb.rollback_segments_wait_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Rollback segments wait ratio (waits/gets)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rollback_segments_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.rollback_segments_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.rollback_segments_waits")
					validatedMetrics["newrelicoracledb.rollback_segments_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of waits on rollback segments", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sessions.count":
					assert.False(t, validatedMetrics["newrelicoracledb.sessions.count"], "Found a duplicate in the metrics slice: newrelicoracledb.sessions.count")
					validatedMetrics["newrelicoracledb.sessions.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of active Oracle database sessions", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
				case "newrelicoracledb.sga_buffer_busy_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_buffer_busy_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_buffer_busy_waits")
					validatedMetrics["newrelicoracledb.sga_buffer_busy_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of buffer busy waits events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_fixed_size_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_fixed_size_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_fixed_size_bytes")
					validatedMetrics["newrelicoracledb.sga_fixed_size_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA fixed size memory in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_free_buffer_inspected_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_free_buffer_inspected_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_free_buffer_inspected_waits")
					validatedMetrics["newrelicoracledb.sga_free_buffer_inspected_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of free buffer inspected waits events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_free_buffer_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_free_buffer_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_free_buffer_waits")
					validatedMetrics["newrelicoracledb.sga_free_buffer_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of free buffer waits events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_hit_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_hit_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_hit_ratio")
					validatedMetrics["newrelicoracledb.sga_hit_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA hit ratio (session logical reads minus physical reads / session logical reads)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_log_allocation_retries_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_log_allocation_retries_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_log_allocation_retries_ratio")
					validatedMetrics["newrelicoracledb.sga_log_allocation_retries_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA log allocation retries ratio (redo buffer allocation retries / redo entries)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_log_buffer_redo_allocation_retries":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_log_buffer_redo_allocation_retries"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_log_buffer_redo_allocation_retries")
					validatedMetrics["newrelicoracledb.sga_log_buffer_redo_allocation_retries"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of redo buffer allocation retries from sysstat", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_log_buffer_redo_entries":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_log_buffer_redo_entries"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_log_buffer_redo_entries")
					validatedMetrics["newrelicoracledb.sga_log_buffer_redo_entries"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of redo entries from sysstat", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_log_buffer_space_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_log_buffer_space_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_log_buffer_space_waits")
					validatedMetrics["newrelicoracledb.sga_log_buffer_space_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of sessions waiting for log buffer space", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_redo_buffers_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_redo_buffers_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_redo_buffers_bytes")
					validatedMetrics["newrelicoracledb.sga_redo_buffers_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA redo buffers memory in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_shared_pool_dict_cache_miss_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_shared_pool_dict_cache_miss_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_shared_pool_dict_cache_miss_ratio")
					validatedMetrics["newrelicoracledb.sga_shared_pool_dict_cache_miss_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA shared pool dictionary cache miss ratio (getmisses/gets)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_shared_pool_library_cache_hit_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_shared_pool_library_cache_hit_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_shared_pool_library_cache_hit_ratio")
					validatedMetrics["newrelicoracledb.sga_shared_pool_library_cache_hit_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA shared pool library cache hit ratio for SQL AREA namespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_shared_pool_library_cache_reload_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_shared_pool_library_cache_reload_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_shared_pool_library_cache_reload_ratio")
					validatedMetrics["newrelicoracledb.sga_shared_pool_library_cache_reload_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA shared pool library cache reload ratio (reloads/pins)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sorts_disk":
					assert.False(t, validatedMetrics["newrelicoracledb.sorts_disk"], "Found a duplicate in the metrics slice: newrelicoracledb.sorts_disk")
					validatedMetrics["newrelicoracledb.sorts_disk"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of sorts performed on disk from sysstat", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sorts_memory":
					assert.False(t, validatedMetrics["newrelicoracledb.sorts_memory"], "Found a duplicate in the metrics slice: newrelicoracledb.sorts_memory")
					validatedMetrics["newrelicoracledb.sorts_memory"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of sorts performed in memory from sysstat", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.tablespace.db_id":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.db_id"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.db_id")
					validatedMetrics["newrelicoracledb.tablespace.db_id"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database ID information for tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.global_name":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.global_name"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.global_name")
					validatedMetrics["newrelicoracledb.tablespace.global_name"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Global name information for tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.is_offline":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.is_offline"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.is_offline")
					validatedMetrics["newrelicoracledb.tablespace.is_offline"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Whether the tablespace is offline (1) or online (0)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.offline_cdb_datafiles":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.offline_cdb_datafiles"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.offline_cdb_datafiles")
					validatedMetrics["newrelicoracledb.tablespace.offline_cdb_datafiles"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of offline CDB datafiles by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.offline_pdb_datafiles":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.offline_pdb_datafiles"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.offline_pdb_datafiles")
					validatedMetrics["newrelicoracledb.tablespace.offline_pdb_datafiles"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of offline PDB datafiles by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.pdb_non_write_mode":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.pdb_non_write_mode"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.pdb_non_write_mode")
					validatedMetrics["newrelicoracledb.tablespace.pdb_non_write_mode"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of PDB datafiles in non-write mode by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_consumed_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_consumed_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_consumed_bytes")
					validatedMetrics["newrelicoracledb.tablespace.space_consumed_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total bytes consumed by the tablespace", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_reserved_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_reserved_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_reserved_bytes")
					validatedMetrics["newrelicoracledb.tablespace.space_reserved_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total bytes reserved by the tablespace", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_used_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_used_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_used_percentage")
					validatedMetrics["newrelicoracledb.tablespace.space_used_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Percentage of tablespace space currently used", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("newrelic.entity_name")
					assert.True(t, ok)
					assert.Equal(t, "newrelic.entity_name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				}
			}
		})
	}
}
