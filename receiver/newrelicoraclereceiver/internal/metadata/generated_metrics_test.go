// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: testDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings(receivertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbAsmDiskgroupFreeMbDataPoint(ts, 1, "db.instance.name-val", "diskgroup.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbAsmDiskgroupOfflineDisksDataPoint(ts, 1, "db.instance.name-val", "diskgroup.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbAsmDiskgroupTotalMbDataPoint(ts, 1, "db.instance.name-val", "diskgroup.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionActiveSessionsDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionBlockingSessionsDataPoint(ts, 1, "db.instance.name-val", "session.id-val", "blocking.session.id-val", "username-val", "wait.event-val", "program-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionBytesReceivedDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionBytesSentDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionCircuitsDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionDispatchersDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionExecuteCountDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionInactiveSessionsDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionLogonsCumulativeDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionLogonsCurrentDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionParseCountHardDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionParseCountTotalDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionResourceCurrentUtilizationDataPoint(ts, 1, "db.instance.name-val", "resource.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionResourceLimitDataPoint(ts, 1, "db.instance.name-val", "resource.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionResourceMaxUtilizationDataPoint(ts, 1, "db.instance.name-val", "resource.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionSessionCPUUsageDataPoint(ts, 1, "db.instance.name-val", "session.id-val", "username-val", "session.status-val", "program-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionSessionIdleTimeDataPoint(ts, 1, "db.instance.name-val", "session.id-val", "username-val", "session.status-val", "program-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionSessionLogicalReadsDataPoint(ts, 1, "db.instance.name-val", "session.id-val", "username-val", "session.status-val", "program-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionSessionPgaMemoryDataPoint(ts, 1, "db.instance.name-val", "session.id-val", "username-val", "session.status-val", "program-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionSessionsByStatusDataPoint(ts, 1, "db.instance.name-val", "session.status-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionSessionsByTypeDataPoint(ts, 1, "db.instance.name-val", "session.type-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionSharedServersDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionSqlnetRoundtripsDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionTotalSessionsDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionUserCommitsDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionUserRollbacksDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionWaitEventAvgWaitTimeDataPoint(ts, 1, "db.instance.name-val", "wait.event-val", "wait.class-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionWaitEventTimeWaitedDataPoint(ts, 1, "db.instance.name-val", "wait.event-val", "wait.class-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionWaitEventTotalWaitsDataPoint(ts, 1, "db.instance.name-val", "wait.event-val", "wait.class-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbConnectionWaitEventsDataPoint(ts, 1, "db.instance.name-val", "session.id-val", "username-val", "wait.event-val", "wait.state-val", "wait.class-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbContainerRestrictedDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "container.name-val", "restricted.status-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbContainerStatusDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "container.name-val", "open.mode-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDatafileAutoextensibleDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "tablespace.name-val", "file.name-val", "container.status-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDatafileSizeBytesDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "tablespace.name-val", "file.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDatafileUsedBytesDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "tablespace.name-val", "file.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDbIDDataPoint(ts, 1, "db.instance.name-val", "instance.id-val", "db.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskBlocksReadDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskBlocksWrittenDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskReadTimeMillisecondsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskReadsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskWriteTimeMillisecondsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbDiskWritesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbGlobalNameDataPoint(ts, 1, "db.instance.name-val", "instance.id-val", "global.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbLockedAccountsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbLongRunningQueriesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaAllocatedBytesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaFreeableBytesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaInUseBytesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemoryPgaMaxSizeBytesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemorySgaSharedPoolLibraryCacheSharableBytesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemorySgaSharedPoolLibraryCacheUserBytesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbMemorySgaUgaTotalBytesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbActiveParallelSessionsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbActiveSerialSessionsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbAverageActiveSessionsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbBackgroundCPUUsagePerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbBackgroundTimePerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbBlockChangesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbBlockChangesPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCPUTimeRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCPUUsagePerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCPUUsagePerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCurrentLogonsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbCurrentOpenCursorsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbDbPhysicalReadBytesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbDbPhysicalReadsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbDbPhysicalWriteBytesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbDbPhysicalWritesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbExecuteWithoutParseRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbExecutionsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbExecutionsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbHardParseCountPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbHardParseCountPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbLogicalReadsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbLogicalReadsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbLogonsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbLogonsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbNetworkTrafficBytePerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbOpenCursorsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbOpenCursorsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbOpenModeDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "pdb.name-val", "open.mode-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbParseFailureCountPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbPhysicalReadBytesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbPhysicalReadsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbPhysicalWriteBytesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbPhysicalWritesPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbRedoGeneratedBytesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbRedoGeneratedBytesPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbResponseTimePerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSessionCountDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSoftParseRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbSQLServiceResponseTimeDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbStatusDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "pdb.name-val", "container.status-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbTotalParseCountPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbTotalParseCountPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbTotalSizeBytesDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "pdb.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbTransactionsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserCallsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserCallsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserCommitsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserCommitsPercentageDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserRollbacksPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbUserRollbacksPercentageDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbPdbWaitTimeRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacInstanceActiveStateDataPoint(ts, 1, "db.instance.name-val", "instance.id-val", "rac.instance.name-val", "host.name.rac-val", "active.state-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacInstanceArchiverStartedDataPoint(ts, 1, "db.instance.name-val", "instance.id-val", "rac.instance.name-val", "host.name.rac-val", "archiver.status-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacInstanceDatabaseStatusDataPoint(ts, 1, "db.instance.name-val", "instance.id-val", "rac.instance.name-val", "host.name.rac-val", "database.status-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacInstanceLoginsAllowedDataPoint(ts, 1, "db.instance.name-val", "instance.id-val", "rac.instance.name-val", "host.name.rac-val", "logins.status-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacInstanceStatusDataPoint(ts, 1, "db.instance.name-val", "instance.id-val", "rac.instance.name-val", "host.name.rac-val", "instance.status-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacInstanceUptimeSecondsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val", "rac.instance.name-val", "host.name.rac-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacInstanceVersionInfoDataPoint(ts, 1, "db.instance.name-val", "instance.id-val", "rac.instance.name-val", "host.name.rac-val", "oracle.version-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacServiceClbConfigDataPoint(ts, 1, "db.instance.name-val", "service.name-val", "instance.id-val", "clb.goal-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacServiceCreationAgeDaysDataPoint(ts, 1, "db.instance.name-val", "service.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacServiceFailoverConfigDataPoint(ts, 1, "db.instance.name-val", "service.name-val", "instance.id-val", "failover.method-val", "failover.type-val", "service.goal-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacServiceFailoverDelaySecondsDataPoint(ts, 1, "db.instance.name-val", "service.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacServiceFailoverRetriesDataPoint(ts, 1, "db.instance.name-val", "service.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacServiceInstanceIDDataPoint(ts, 1, "db.instance.name-val", "service.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacServiceNetworkConfigDataPoint(ts, 1, "db.instance.name-val", "service.name-val", "instance.id-val", "network.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacTotalWaitsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val", "wait.event-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRacWaitTimeDataPoint(ts, 1, "db.instance.name-val", "instance.id-val", "wait.event-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogParallelWriteWaitsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogSwitchArchivingNeededWaitsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogSwitchCheckpointIncompleteWaitsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRedoLogSwitchCompletionWaitsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRollbackSegmentsGetsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRollbackSegmentsWaitRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbRollbackSegmentsWaitsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbServiceCountDataPoint(ts, 1, "db.instance.name-val", "con.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbServiceStatusDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "service.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSessionsCountDataPoint(ts, 1, "db.instance.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaBufferBusyWaitsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaFixedSizeBytesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaFreeBufferInspectedWaitsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaFreeBufferWaitsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaHitRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaLogAllocationRetriesRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaLogBufferRedoAllocationRetriesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaLogBufferRedoEntriesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaLogBufferSpaceWaitsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaRedoBuffersBytesDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaSharedPoolDictCacheMissRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaSharedPoolLibraryCacheHitRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSgaSharedPoolLibraryCacheReloadRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSortsDiskDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSortsMemoryDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemActiveParallelSessionsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemActiveSerialSessionsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemAverageActiveSessionsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemBackgroundCheckpointsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemBackgroundCPUUsagePerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemBackgroundTimePerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemBranchNodeSplitsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemBranchNodeSplitsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemBufferCacheHitRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemCapturedUserCallsDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemConsistentReadChangesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemConsistentReadChangesPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemConsistentReadGetsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemConsistentReadGetsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemCPUUsagePerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemCPUUsagePerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemCrBlocksCreatedPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemCrBlocksCreatedPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemCrUndoRecordsAppliedPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemCrUndoRecordsAppliedPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemCurrentLogonsCountDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemCurrentOpenCursorsCountDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemCurrentOsLoadDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemCursorCacheHitRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDatabaseCPUTimeRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDatabaseTimePerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDatabaseWaitTimeRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDbBlockChangesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDbBlockChangesPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDbBlockChangesPerUserCallDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDbBlockGetsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDbBlockGetsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDbBlockGetsPerUserCallDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDbwrCheckpointsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDiskSortPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemDiskSortPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemEnqueueDeadlocksPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemEnqueueDeadlocksPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemEnqueueRequestsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemEnqueueRequestsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemEnqueueTimeoutsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemEnqueueTimeoutsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemEnqueueWaitsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemEnqueueWaitsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemExecuteWithoutParseRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemExecutionsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemExecutionsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemExecutionsPerUserCallDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemFullIndexScansPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemFullIndexScansPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemGcCrBlockReceivedPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemGcCrBlockReceivedPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemGcCurrentBlockReceivedPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemGcCurrentBlockReceivedPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemGlobalCacheAverageCrGetTimeDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemGlobalCacheAverageCurrentGetTimeDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemGlobalCacheBlocksCorruptedDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemGlobalCacheBlocksLostDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemHardParseCountPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemHardParseCountPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemHostCPUUsagePerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemHostCPUUtilizationDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemIoMegabytesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemIoRequestsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemLeafNodeSplitsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemLeafNodeSplitsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemLibraryCacheHitRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemLibraryCacheMissRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemLogicalReadsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemLogicalReadsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemLogicalReadsPerUserCallDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemLogonsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemLogonsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemLongTableScansPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemLongTableScansPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemMemorySortsRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemNetworkTrafficVolumePerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemOpenCursorsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemOpenCursorsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemParseFailureCountPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemParseFailureCountPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPgaCacheHitPercentageDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalLobsReadsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalLobsReadsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalLobsWritesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalLobsWritesPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalReadBytesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalReadIoRequestsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalReadTotalBytesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalReadTotalIoRequestsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalReadsDirectPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalReadsDirectPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalReadsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalReadsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalWriteBytesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalWriteIoRequestsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalWriteTotalBytesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalWriteTotalIoRequestsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalWritesDirectPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalWritesDirectPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalWritesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemPhysicalWritesPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemProcessLimitPercentageDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemRecursiveCallsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemRecursiveCallsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemRedoAllocationHitRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemRedoGeneratedBytesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemRedoGeneratedBytesPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemRedoWritesPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemRedoWritesPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemResponseTimePerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemRowCacheHitRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemRowCacheMissRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemRowsPerSortDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemSessionCountDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemSessionLimitPercentageDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemSharedPoolFreePercentageDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemSoftParseRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemSQLServiceResponseTimeDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemStreamsPoolUsagePercentageDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemTempSpaceUsedDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemTotalIndexScansPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemTotalIndexScansPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemTotalParseCountPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemTotalParseCountPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemTotalSortsPerUserCallDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemTotalTableScansPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemTotalTableScansPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemTotalTableScansPerUserCallDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemTransactionsPerLogonDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemTransactionsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemUserCallsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemUserCallsPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemUserCallsRatioDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemUserCommitsPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemUserCommitsPercentageDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemUserLimitPercentageDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemUserRollbackUndoRecordsAppliedPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemUserRollbackUndoRecordsAppliedPerTransactionDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemUserRollbacksPerSecondDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbSystemUserRollbacksPercentageDataPoint(ts, 1, "db.instance.name-val", "instance.id-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceDbIDDataPoint(ts, 1, "db.instance.name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceGlobalNameDataPoint(ts, 1, "db.instance.name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceIsOfflineDataPoint(ts, 1, "db.instance.name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceOfflineCdbDatafilesDataPoint(ts, 1, "db.instance.name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceOfflinePdbDatafilesDataPoint(ts, 1, "db.instance.name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespacePdbNonWriteModeDataPoint(ts, 1, "db.instance.name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceConsumedBytesDataPoint(ts, 1, "db.instance.name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceReservedBytesDataPoint(ts, 1, "db.instance.name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceSpaceUsedPercentageDataPoint(ts, 1, "db.instance.name-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceTotalBytesDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceUsedBytesDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "tablespace.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNewrelicoracledbTablespaceUsedPercentDataPoint(ts, 1, "db.instance.name-val", "con.id-val", "tablespace.name-val")

			rb := mb.NewResourceBuilder()
			rb.SetHostName("host.name-val")
			rb.SetNewrelicoracledbInstanceName("newrelicoracledb.instance.name-val")
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "newrelicoracledb.asm.diskgroup.free_mb":
					assert.False(t, validatedMetrics["newrelicoracledb.asm.diskgroup.free_mb"], "Found a duplicate in the metrics slice: newrelicoracledb.asm.diskgroup.free_mb")
					validatedMetrics["newrelicoracledb.asm.diskgroup.free_mb"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Available free space in the ASM disk group in MB", ms.At(i).Description())
					assert.Equal(t, "MB", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("diskgroup.name")
					assert.True(t, ok)
					assert.Equal(t, "diskgroup.name-val", attrVal.Str())
				case "newrelicoracledb.asm.diskgroup.offline_disks":
					assert.False(t, validatedMetrics["newrelicoracledb.asm.diskgroup.offline_disks"], "Found a duplicate in the metrics slice: newrelicoracledb.asm.diskgroup.offline_disks")
					validatedMetrics["newrelicoracledb.asm.diskgroup.offline_disks"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of offline disks in the ASM disk group", ms.At(i).Description())
					assert.Equal(t, "{disks}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("diskgroup.name")
					assert.True(t, ok)
					assert.Equal(t, "diskgroup.name-val", attrVal.Str())
				case "newrelicoracledb.asm.diskgroup.total_mb":
					assert.False(t, validatedMetrics["newrelicoracledb.asm.diskgroup.total_mb"], "Found a duplicate in the metrics slice: newrelicoracledb.asm.diskgroup.total_mb")
					validatedMetrics["newrelicoracledb.asm.diskgroup.total_mb"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total capacity of the ASM disk group in MB", ms.At(i).Description())
					assert.Equal(t, "MB", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("diskgroup.name")
					assert.True(t, ok)
					assert.Equal(t, "diskgroup.name-val", attrVal.Str())
				case "newrelicoracledb.connection.active_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.active_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.active_sessions")
					validatedMetrics["newrelicoracledb.connection.active_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of active Oracle database sessions", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.blocking_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.blocking_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.blocking_sessions")
					validatedMetrics["newrelicoracledb.connection.blocking_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Sessions blocked by other sessions", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.id")
					assert.True(t, ok)
					assert.Equal(t, "session.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("blocking.session.id")
					assert.True(t, ok)
					assert.Equal(t, "blocking.session.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("username")
					assert.True(t, ok)
					assert.Equal(t, "username-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.event")
					assert.True(t, ok)
					assert.Equal(t, "wait.event-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("program")
					assert.True(t, ok)
					assert.Equal(t, "program-val", attrVal.Str())
				case "newrelicoracledb.connection.bytes_received":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.bytes_received"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.bytes_received")
					validatedMetrics["newrelicoracledb.connection.bytes_received"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Bytes received via SQL*Net from client", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.bytes_sent":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.bytes_sent"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.bytes_sent")
					validatedMetrics["newrelicoracledb.connection.bytes_sent"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Bytes sent via SQL*Net to client", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.circuits":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.circuits"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.circuits")
					validatedMetrics["newrelicoracledb.connection.circuits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of active circuits", ms.At(i).Description())
					assert.Equal(t, "{circuits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.dispatchers":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.dispatchers"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.dispatchers")
					validatedMetrics["newrelicoracledb.connection.dispatchers"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of dispatchers", ms.At(i).Description())
					assert.Equal(t, "{dispatchers}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.execute_count":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.execute_count"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.execute_count")
					validatedMetrics["newrelicoracledb.connection.execute_count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of SQL executions", ms.At(i).Description())
					assert.Equal(t, "{executions}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.inactive_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.inactive_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.inactive_sessions")
					validatedMetrics["newrelicoracledb.connection.inactive_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of inactive Oracle database sessions", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.logons_cumulative":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.logons_cumulative"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.logons_cumulative")
					validatedMetrics["newrelicoracledb.connection.logons_cumulative"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Cumulative number of logons since instance startup", ms.At(i).Description())
					assert.Equal(t, "{logons}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.logons_current":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.logons_current"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.logons_current")
					validatedMetrics["newrelicoracledb.connection.logons_current"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of active logons", ms.At(i).Description())
					assert.Equal(t, "{logons}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.parse_count_hard":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.parse_count_hard"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.parse_count_hard")
					validatedMetrics["newrelicoracledb.connection.parse_count_hard"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of hard parse calls", ms.At(i).Description())
					assert.Equal(t, "{parses}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.parse_count_total":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.parse_count_total"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.parse_count_total")
					validatedMetrics["newrelicoracledb.connection.parse_count_total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total number of parse calls", ms.At(i).Description())
					assert.Equal(t, "{parses}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.resource_current_utilization":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.resource_current_utilization"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.resource_current_utilization")
					validatedMetrics["newrelicoracledb.connection.resource_current_utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current utilization of Oracle resources", ms.At(i).Description())
					assert.Equal(t, "{resources}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("resource.name")
					assert.True(t, ok)
					assert.Equal(t, "resource.name-val", attrVal.Str())
				case "newrelicoracledb.connection.resource_limit":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.resource_limit"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.resource_limit")
					validatedMetrics["newrelicoracledb.connection.resource_limit"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Limit value for Oracle resources", ms.At(i).Description())
					assert.Equal(t, "{resources}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("resource.name")
					assert.True(t, ok)
					assert.Equal(t, "resource.name-val", attrVal.Str())
				case "newrelicoracledb.connection.resource_max_utilization":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.resource_max_utilization"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.resource_max_utilization")
					validatedMetrics["newrelicoracledb.connection.resource_max_utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Maximum utilization of Oracle resources since startup", ms.At(i).Description())
					assert.Equal(t, "{resources}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("resource.name")
					assert.True(t, ok)
					assert.Equal(t, "resource.name-val", attrVal.Str())
				case "newrelicoracledb.connection.session_cpu_usage":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.session_cpu_usage"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.session_cpu_usage")
					validatedMetrics["newrelicoracledb.connection.session_cpu_usage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU usage by session in seconds", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.id")
					assert.True(t, ok)
					assert.Equal(t, "session.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("username")
					assert.True(t, ok)
					assert.Equal(t, "username-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.status")
					assert.True(t, ok)
					assert.Equal(t, "session.status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("program")
					assert.True(t, ok)
					assert.Equal(t, "program-val", attrVal.Str())
				case "newrelicoracledb.connection.session_idle_time":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.session_idle_time"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.session_idle_time")
					validatedMetrics["newrelicoracledb.connection.session_idle_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Session idle time in seconds", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.id")
					assert.True(t, ok)
					assert.Equal(t, "session.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("username")
					assert.True(t, ok)
					assert.Equal(t, "username-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.status")
					assert.True(t, ok)
					assert.Equal(t, "session.status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("program")
					assert.True(t, ok)
					assert.Equal(t, "program-val", attrVal.Str())
				case "newrelicoracledb.connection.session_logical_reads":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.session_logical_reads"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.session_logical_reads")
					validatedMetrics["newrelicoracledb.connection.session_logical_reads"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logical reads by session", ms.At(i).Description())
					assert.Equal(t, "{reads}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.id")
					assert.True(t, ok)
					assert.Equal(t, "session.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("username")
					assert.True(t, ok)
					assert.Equal(t, "username-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.status")
					assert.True(t, ok)
					assert.Equal(t, "session.status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("program")
					assert.True(t, ok)
					assert.Equal(t, "program-val", attrVal.Str())
				case "newrelicoracledb.connection.session_pga_memory":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.session_pga_memory"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.session_pga_memory")
					validatedMetrics["newrelicoracledb.connection.session_pga_memory"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "PGA memory usage by session", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.id")
					assert.True(t, ok)
					assert.Equal(t, "session.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("username")
					assert.True(t, ok)
					assert.Equal(t, "username-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.status")
					assert.True(t, ok)
					assert.Equal(t, "session.status-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("program")
					assert.True(t, ok)
					assert.Equal(t, "program-val", attrVal.Str())
				case "newrelicoracledb.connection.sessions_by_status":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.sessions_by_status"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.sessions_by_status")
					validatedMetrics["newrelicoracledb.connection.sessions_by_status"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of sessions grouped by status", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.status")
					assert.True(t, ok)
					assert.Equal(t, "session.status-val", attrVal.Str())
				case "newrelicoracledb.connection.sessions_by_type":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.sessions_by_type"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.sessions_by_type")
					validatedMetrics["newrelicoracledb.connection.sessions_by_type"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of sessions grouped by type", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.type")
					assert.True(t, ok)
					assert.Equal(t, "session.type-val", attrVal.Str())
				case "newrelicoracledb.connection.shared_servers":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.shared_servers"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.shared_servers")
					validatedMetrics["newrelicoracledb.connection.shared_servers"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of shared servers", ms.At(i).Description())
					assert.Equal(t, "{servers}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.sqlnet_roundtrips":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.sqlnet_roundtrips"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.sqlnet_roundtrips")
					validatedMetrics["newrelicoracledb.connection.sqlnet_roundtrips"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of SQL*Net roundtrips to/from client", ms.At(i).Description())
					assert.Equal(t, "{roundtrips}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.total_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.total_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.total_sessions")
					validatedMetrics["newrelicoracledb.connection.total_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of Oracle database sessions", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.user_commits":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.user_commits"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.user_commits")
					validatedMetrics["newrelicoracledb.connection.user_commits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of user commits", ms.At(i).Description())
					assert.Equal(t, "{commits}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.user_rollbacks":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.user_rollbacks"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.user_rollbacks")
					validatedMetrics["newrelicoracledb.connection.user_rollbacks"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Number of user rollbacks", ms.At(i).Description())
					assert.Equal(t, "{rollbacks}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.connection.wait_event_avg_wait_time":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.wait_event_avg_wait_time"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.wait_event_avg_wait_time")
					validatedMetrics["newrelicoracledb.connection.wait_event_avg_wait_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average wait time for each wait event", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.event")
					assert.True(t, ok)
					assert.Equal(t, "wait.event-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.class")
					assert.True(t, ok)
					assert.Equal(t, "wait.class-val", attrVal.Str())
				case "newrelicoracledb.connection.wait_event_time_waited":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.wait_event_time_waited"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.wait_event_time_waited")
					validatedMetrics["newrelicoracledb.connection.wait_event_time_waited"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total time waited for each wait event", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.event")
					assert.True(t, ok)
					assert.Equal(t, "wait.event-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.class")
					assert.True(t, ok)
					assert.Equal(t, "wait.class-val", attrVal.Str())
				case "newrelicoracledb.connection.wait_event_total_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.wait_event_total_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.wait_event_total_waits")
					validatedMetrics["newrelicoracledb.connection.wait_event_total_waits"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Total number of waits for each wait event", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.event")
					assert.True(t, ok)
					assert.Equal(t, "wait.event-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.class")
					assert.True(t, ok)
					assert.Equal(t, "wait.class-val", attrVal.Str())
				case "newrelicoracledb.connection.wait_events":
					assert.False(t, validatedMetrics["newrelicoracledb.connection.wait_events"], "Found a duplicate in the metrics slice: newrelicoracledb.connection.wait_events")
					validatedMetrics["newrelicoracledb.connection.wait_events"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current wait events and wait time", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("session.id")
					assert.True(t, ok)
					assert.Equal(t, "session.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("username")
					assert.True(t, ok)
					assert.Equal(t, "username-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.event")
					assert.True(t, ok)
					assert.Equal(t, "wait.event-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.state")
					assert.True(t, ok)
					assert.Equal(t, "wait.state-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.class")
					assert.True(t, ok)
					assert.Equal(t, "wait.class-val", attrVal.Str())
				case "newrelicoracledb.container.restricted":
					assert.False(t, validatedMetrics["newrelicoracledb.container.restricted"], "Found a duplicate in the metrics slice: newrelicoracledb.container.restricted")
					validatedMetrics["newrelicoracledb.container.restricted"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Oracle container restricted status (1=YES, 0=NO)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("container.name")
					assert.True(t, ok)
					assert.Equal(t, "container.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("restricted.status")
					assert.True(t, ok)
					assert.Equal(t, "restricted.status-val", attrVal.Str())
				case "newrelicoracledb.container.status":
					assert.False(t, validatedMetrics["newrelicoracledb.container.status"], "Found a duplicate in the metrics slice: newrelicoracledb.container.status")
					validatedMetrics["newrelicoracledb.container.status"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Oracle container status (1=READ WRITE, 0=other)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("container.name")
					assert.True(t, ok)
					assert.Equal(t, "container.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("open.mode")
					assert.True(t, ok)
					assert.Equal(t, "open.mode-val", attrVal.Str())
				case "newrelicoracledb.datafile.autoextensible":
					assert.False(t, validatedMetrics["newrelicoracledb.datafile.autoextensible"], "Found a duplicate in the metrics slice: newrelicoracledb.datafile.autoextensible")
					validatedMetrics["newrelicoracledb.datafile.autoextensible"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Data file autoextensible status (1=YES, 0=NO)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("file.name")
					assert.True(t, ok)
					assert.Equal(t, "file.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("container.status")
					assert.True(t, ok)
					assert.Equal(t, "container.status-val", attrVal.Str())
				case "newrelicoracledb.datafile.size_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.datafile.size_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.datafile.size_bytes")
					validatedMetrics["newrelicoracledb.datafile.size_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Size of data file in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("file.name")
					assert.True(t, ok)
					assert.Equal(t, "file.name-val", attrVal.Str())
				case "newrelicoracledb.datafile.used_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.datafile.used_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.datafile.used_bytes")
					validatedMetrics["newrelicoracledb.datafile.used_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Used bytes in data file", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("file.name")
					assert.True(t, ok)
					assert.Equal(t, "file.name-val", attrVal.Str())
				case "newrelicoracledb.db_id":
					assert.False(t, validatedMetrics["newrelicoracledb.db_id"], "Found a duplicate in the metrics slice: newrelicoracledb.db_id")
					validatedMetrics["newrelicoracledb.db_id"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Oracle database ID information", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("db.id")
					assert.True(t, ok)
					assert.Equal(t, "db.id-val", attrVal.Str())
				case "newrelicoracledb.disk.blocks_read":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.blocks_read"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.blocks_read")
					validatedMetrics["newrelicoracledb.disk.blocks_read"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical blocks read from disk", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.blocks_written":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.blocks_written"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.blocks_written")
					validatedMetrics["newrelicoracledb.disk.blocks_written"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical blocks written to disk", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.read_time_milliseconds":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.read_time_milliseconds"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.read_time_milliseconds")
					validatedMetrics["newrelicoracledb.disk.read_time_milliseconds"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time spent reading from disk in milliseconds", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.reads":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.reads"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.reads")
					validatedMetrics["newrelicoracledb.disk.reads"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical disk reads", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.write_time_milliseconds":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.write_time_milliseconds"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.write_time_milliseconds")
					validatedMetrics["newrelicoracledb.disk.write_time_milliseconds"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Time spent writing to disk in milliseconds", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.disk.writes":
					assert.False(t, validatedMetrics["newrelicoracledb.disk.writes"], "Found a duplicate in the metrics slice: newrelicoracledb.disk.writes")
					validatedMetrics["newrelicoracledb.disk.writes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of physical disk writes", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.global_name":
					assert.False(t, validatedMetrics["newrelicoracledb.global_name"], "Found a duplicate in the metrics slice: newrelicoracledb.global_name")
					validatedMetrics["newrelicoracledb.global_name"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Oracle database global name information", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("global.name")
					assert.True(t, ok)
					assert.Equal(t, "global.name-val", attrVal.Str())
				case "newrelicoracledb.locked_accounts":
					assert.False(t, validatedMetrics["newrelicoracledb.locked_accounts"], "Found a duplicate in the metrics slice: newrelicoracledb.locked_accounts")
					validatedMetrics["newrelicoracledb.locked_accounts"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of locked user accounts in the database", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.long_running_queries":
					assert.False(t, validatedMetrics["newrelicoracledb.long_running_queries"], "Found a duplicate in the metrics slice: newrelicoracledb.long_running_queries")
					validatedMetrics["newrelicoracledb.long_running_queries"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of long running queries (active sessions running for more than 60 seconds)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_allocated_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_allocated_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_allocated_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_allocated_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total PGA memory allocated in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_freeable_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_freeable_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_freeable_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_freeable_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total freeable PGA memory in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_in_use_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_in_use_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_in_use_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_in_use_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total PGA memory currently in use in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.pga_max_size_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.pga_max_size_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.pga_max_size_bytes")
					validatedMetrics["newrelicoracledb.memory.pga_max_size_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Global memory bound for PGA in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.sga_shared_pool_library_cache_sharable_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.sga_shared_pool_library_cache_sharable_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.sga_shared_pool_library_cache_sharable_bytes")
					validatedMetrics["newrelicoracledb.memory.sga_shared_pool_library_cache_sharable_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA shared pool library cache sharable memory in bytes for statements with more than 5 executions", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.sga_shared_pool_library_cache_user_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.sga_shared_pool_library_cache_user_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.sga_shared_pool_library_cache_user_bytes")
					validatedMetrics["newrelicoracledb.memory.sga_shared_pool_library_cache_user_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA shared pool library cache shareable memory per user in bytes (250 * users_opening)", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.memory.sga_uga_total_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.memory.sga_uga_total_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.memory.sga_uga_total_bytes")
					validatedMetrics["newrelicoracledb.memory.sga_uga_total_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total SGA UGA memory in bytes (session uga memory max)", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.active_parallel_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.active_parallel_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.active_parallel_sessions")
					validatedMetrics["newrelicoracledb.pdb.active_parallel_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of active parallel sessions in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.active_serial_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.active_serial_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.active_serial_sessions")
					validatedMetrics["newrelicoracledb.pdb.active_serial_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of active serial sessions in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.average_active_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.average_active_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.average_active_sessions")
					validatedMetrics["newrelicoracledb.pdb.average_active_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average number of active sessions in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.background_cpu_usage_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.background_cpu_usage_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.background_cpu_usage_per_second")
					validatedMetrics["newrelicoracledb.pdb.background_cpu_usage_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Background CPU usage per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.background_time_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.background_time_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.background_time_per_second")
					validatedMetrics["newrelicoracledb.pdb.background_time_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Background time per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.block_changes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.block_changes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.block_changes_per_second")
					validatedMetrics["newrelicoracledb.pdb.block_changes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "DB block changes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.block_changes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.block_changes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.block_changes_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.block_changes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "DB block changes per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.cpu_time_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.cpu_time_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.cpu_time_ratio")
					validatedMetrics["newrelicoracledb.pdb.cpu_time_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database CPU time ratio in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.cpu_usage_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.cpu_usage_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.cpu_usage_per_second")
					validatedMetrics["newrelicoracledb.pdb.cpu_usage_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU usage per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.cpu_usage_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.cpu_usage_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.cpu_usage_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.cpu_usage_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU usage per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.current_logons":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.current_logons"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.current_logons")
					validatedMetrics["newrelicoracledb.pdb.current_logons"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of logons in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.current_open_cursors":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.current_open_cursors"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.current_open_cursors")
					validatedMetrics["newrelicoracledb.pdb.current_open_cursors"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current number of open cursors in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.db_physical_read_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.db_physical_read_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.db_physical_read_bytes_per_second")
					validatedMetrics["newrelicoracledb.pdb.db_physical_read_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical read bytes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.db_physical_reads_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.db_physical_reads_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.db_physical_reads_per_second")
					validatedMetrics["newrelicoracledb.pdb.db_physical_reads_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical reads per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.db_physical_write_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.db_physical_write_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.db_physical_write_bytes_per_second")
					validatedMetrics["newrelicoracledb.pdb.db_physical_write_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical write bytes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.db_physical_writes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.db_physical_writes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.db_physical_writes_per_second")
					validatedMetrics["newrelicoracledb.pdb.db_physical_writes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical writes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.execute_without_parse_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.execute_without_parse_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.execute_without_parse_ratio")
					validatedMetrics["newrelicoracledb.pdb.execute_without_parse_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Execute without parse ratio in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.executions_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.executions_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.executions_per_second")
					validatedMetrics["newrelicoracledb.pdb.executions_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Executions per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.executions_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.executions_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.executions_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.executions_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Executions per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.hard_parse_count_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.hard_parse_count_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.hard_parse_count_per_second")
					validatedMetrics["newrelicoracledb.pdb.hard_parse_count_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Hard parse count per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.hard_parse_count_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.hard_parse_count_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.hard_parse_count_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.hard_parse_count_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Hard parse count per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.logical_reads_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.logical_reads_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.logical_reads_per_second")
					validatedMetrics["newrelicoracledb.pdb.logical_reads_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logical reads per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.logical_reads_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.logical_reads_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.logical_reads_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.logical_reads_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logical reads per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.logons_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.logons_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.logons_per_second")
					validatedMetrics["newrelicoracledb.pdb.logons_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logons per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.logons_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.logons_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.logons_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.logons_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logons per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.network_traffic_byte_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.network_traffic_byte_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.network_traffic_byte_per_second")
					validatedMetrics["newrelicoracledb.pdb.network_traffic_byte_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Network traffic volume per second in bytes in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.open_cursors_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.open_cursors_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.open_cursors_per_second")
					validatedMetrics["newrelicoracledb.pdb.open_cursors_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Open cursors per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.open_cursors_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.open_cursors_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.open_cursors_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.open_cursors_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Open cursors per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.open_mode":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.open_mode"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.open_mode")
					validatedMetrics["newrelicoracledb.pdb.open_mode"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Oracle PDB open mode (1=READ WRITE, 0=other)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("pdb.name")
					assert.True(t, ok)
					assert.Equal(t, "pdb.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("open.mode")
					assert.True(t, ok)
					assert.Equal(t, "open.mode-val", attrVal.Str())
				case "newrelicoracledb.pdb.parse_failure_count_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.parse_failure_count_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.parse_failure_count_per_second")
					validatedMetrics["newrelicoracledb.pdb.parse_failure_count_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Parse failure count per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.physical_read_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.physical_read_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.physical_read_bytes_per_second")
					validatedMetrics["newrelicoracledb.pdb.physical_read_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical read total bytes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.physical_reads_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.physical_reads_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.physical_reads_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.physical_reads_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical reads per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.physical_write_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.physical_write_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.physical_write_bytes_per_second")
					validatedMetrics["newrelicoracledb.pdb.physical_write_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical write total bytes per second in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.physical_writes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.physical_writes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.physical_writes_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.physical_writes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical writes per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.redo_generated_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.redo_generated_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.redo_generated_bytes_per_second")
					validatedMetrics["newrelicoracledb.pdb.redo_generated_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Redo generated per second in bytes in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.redo_generated_bytes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.redo_generated_bytes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.redo_generated_bytes_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.redo_generated_bytes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Redo generated per transaction in bytes in PDB", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.response_time_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.response_time_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.response_time_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.response_time_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Response time per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.session_count":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.session_count"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.session_count")
					validatedMetrics["newrelicoracledb.pdb.session_count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Session count in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.soft_parse_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.soft_parse_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.soft_parse_ratio")
					validatedMetrics["newrelicoracledb.pdb.soft_parse_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Soft parse ratio in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.sql_service_response_time":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.sql_service_response_time"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.sql_service_response_time")
					validatedMetrics["newrelicoracledb.pdb.sql_service_response_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SQL service response time in PDB", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.status":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.status"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.status")
					validatedMetrics["newrelicoracledb.pdb.status"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Oracle PDB status (1=NORMAL, 0=other)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("pdb.name")
					assert.True(t, ok)
					assert.Equal(t, "pdb.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("container.status")
					assert.True(t, ok)
					assert.Equal(t, "container.status-val", attrVal.Str())
				case "newrelicoracledb.pdb.total_parse_count_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.total_parse_count_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.total_parse_count_per_second")
					validatedMetrics["newrelicoracledb.pdb.total_parse_count_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total parse count per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.total_parse_count_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.total_parse_count_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.total_parse_count_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.total_parse_count_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total parse count per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.total_size_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.total_size_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.total_size_bytes")
					validatedMetrics["newrelicoracledb.pdb.total_size_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total size of PDB in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("pdb.name")
					assert.True(t, ok)
					assert.Equal(t, "pdb.name-val", attrVal.Str())
				case "newrelicoracledb.pdb.transactions_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.transactions_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.transactions_per_second")
					validatedMetrics["newrelicoracledb.pdb.transactions_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User transactions per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_calls_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_calls_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_calls_per_second")
					validatedMetrics["newrelicoracledb.pdb.user_calls_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User calls per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_calls_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_calls_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_calls_per_transaction")
					validatedMetrics["newrelicoracledb.pdb.user_calls_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User calls per transaction in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_commits_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_commits_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_commits_per_second")
					validatedMetrics["newrelicoracledb.pdb.user_commits_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User commits per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_commits_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_commits_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_commits_percentage")
					validatedMetrics["newrelicoracledb.pdb.user_commits_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User commits percentage in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_rollbacks_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_rollbacks_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_rollbacks_per_second")
					validatedMetrics["newrelicoracledb.pdb.user_rollbacks_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User rollbacks per second in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.user_rollbacks_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.user_rollbacks_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.user_rollbacks_percentage")
					validatedMetrics["newrelicoracledb.pdb.user_rollbacks_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User rollbacks percentage in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.pdb.wait_time_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.pdb.wait_time_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.pdb.wait_time_ratio")
					validatedMetrics["newrelicoracledb.pdb.wait_time_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database wait time ratio in PDB", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rac.instance.active_state":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.instance.active_state"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.instance.active_state")
					validatedMetrics["newrelicoracledb.rac.instance.active_state"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Instance active state indicator (1=NORMAL, 0=other)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rac.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "rac.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("host.name.rac")
					assert.True(t, ok)
					assert.Equal(t, "host.name.rac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("active.state")
					assert.True(t, ok)
					assert.Equal(t, "active.state-val", attrVal.Str())
				case "newrelicoracledb.rac.instance.archiver_started":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.instance.archiver_started"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.instance.archiver_started")
					validatedMetrics["newrelicoracledb.rac.instance.archiver_started"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Archiver status indicator (1=STARTED, 0=STOPPED)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rac.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "rac.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("host.name.rac")
					assert.True(t, ok)
					assert.Equal(t, "host.name.rac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("archiver.status")
					assert.True(t, ok)
					assert.Equal(t, "archiver.status-val", attrVal.Str())
				case "newrelicoracledb.rac.instance.database_status":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.instance.database_status"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.instance.database_status")
					validatedMetrics["newrelicoracledb.rac.instance.database_status"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database status indicator (1=ACTIVE, 0=other)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rac.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "rac.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("host.name.rac")
					assert.True(t, ok)
					assert.Equal(t, "host.name.rac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("database.status")
					assert.True(t, ok)
					assert.Equal(t, "database.status-val", attrVal.Str())
				case "newrelicoracledb.rac.instance.logins_allowed":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.instance.logins_allowed"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.instance.logins_allowed")
					validatedMetrics["newrelicoracledb.rac.instance.logins_allowed"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Instance login status indicator (1=ALLOWED, 0=RESTRICTED)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rac.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "rac.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("host.name.rac")
					assert.True(t, ok)
					assert.Equal(t, "host.name.rac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("logins.status")
					assert.True(t, ok)
					assert.Equal(t, "logins.status-val", attrVal.Str())
				case "newrelicoracledb.rac.instance.status":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.instance.status"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.instance.status")
					validatedMetrics["newrelicoracledb.rac.instance.status"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "RAC instance status (1=OPEN, 0=other)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rac.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "rac.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("host.name.rac")
					assert.True(t, ok)
					assert.Equal(t, "host.name.rac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.status")
					assert.True(t, ok)
					assert.Equal(t, "instance.status-val", attrVal.Str())
				case "newrelicoracledb.rac.instance.uptime_seconds":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.instance.uptime_seconds"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.instance.uptime_seconds")
					validatedMetrics["newrelicoracledb.rac.instance.uptime_seconds"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Instance uptime in seconds since startup", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rac.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "rac.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("host.name.rac")
					assert.True(t, ok)
					assert.Equal(t, "host.name.rac-val", attrVal.Str())
				case "newrelicoracledb.rac.instance.version_info":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.instance.version_info"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.instance.version_info")
					validatedMetrics["newrelicoracledb.rac.instance.version_info"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Oracle database version information (always 1, version in attributes)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rac.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "rac.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("host.name.rac")
					assert.True(t, ok)
					assert.Equal(t, "host.name.rac-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("oracle.version")
					assert.True(t, ok)
					assert.Equal(t, "oracle.version-val", attrVal.Str())
				case "newrelicoracledb.rac.service.clb_config":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.service.clb_config"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.service.clb_config")
					validatedMetrics["newrelicoracledb.rac.service.clb_config"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Connection load balancing configuration (always 1, config in attributes)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("service.name")
					assert.True(t, ok)
					assert.Equal(t, "service.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("clb.goal")
					assert.True(t, ok)
					assert.Equal(t, "clb.goal-val", attrVal.Str())
				case "newrelicoracledb.rac.service.creation_age_days":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.service.creation_age_days"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.service.creation_age_days")
					validatedMetrics["newrelicoracledb.rac.service.creation_age_days"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Service age in days since creation", ms.At(i).Description())
					assert.Equal(t, "d", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("service.name")
					assert.True(t, ok)
					assert.Equal(t, "service.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rac.service.failover_config":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.service.failover_config"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.service.failover_config")
					validatedMetrics["newrelicoracledb.rac.service.failover_config"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Service failover configuration indicator (always 1, config in attributes)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("service.name")
					assert.True(t, ok)
					assert.Equal(t, "service.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("failover.method")
					assert.True(t, ok)
					assert.Equal(t, "failover.method-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("failover.type")
					assert.True(t, ok)
					assert.Equal(t, "failover.type-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("service.goal")
					assert.True(t, ok)
					assert.Equal(t, "service.goal-val", attrVal.Str())
				case "newrelicoracledb.rac.service.failover_delay_seconds":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.service.failover_delay_seconds"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.service.failover_delay_seconds")
					validatedMetrics["newrelicoracledb.rac.service.failover_delay_seconds"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Failover delay in seconds configured for the service", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("service.name")
					assert.True(t, ok)
					assert.Equal(t, "service.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rac.service.failover_retries":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.service.failover_retries"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.service.failover_retries")
					validatedMetrics["newrelicoracledb.rac.service.failover_retries"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of failover retries configured for the service", ms.At(i).Description())
					assert.Equal(t, "{retries}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("service.name")
					assert.True(t, ok)
					assert.Equal(t, "service.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rac.service.instance_id":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.service.instance_id"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.service.instance_id")
					validatedMetrics["newrelicoracledb.rac.service.instance_id"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Instance ID where the service is currently running", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("service.name")
					assert.True(t, ok)
					assert.Equal(t, "service.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rac.service.network_config":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.service.network_config"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.service.network_config")
					validatedMetrics["newrelicoracledb.rac.service.network_config"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Service network configuration (always 1, config in attributes)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("service.name")
					assert.True(t, ok)
					assert.Equal(t, "service.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("network.name")
					assert.True(t, ok)
					assert.Equal(t, "network.name-val", attrVal.Str())
				case "newrelicoracledb.rac.total_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.total_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.total_waits")
					validatedMetrics["newrelicoracledb.rac.total_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of cluster wait events", ms.At(i).Description())
					assert.Equal(t, "{waits}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.event")
					assert.True(t, ok)
					assert.Equal(t, "wait.event-val", attrVal.Str())
				case "newrelicoracledb.rac.wait_time":
					assert.False(t, validatedMetrics["newrelicoracledb.rac.wait_time"], "Found a duplicate in the metrics slice: newrelicoracledb.rac.wait_time")
					validatedMetrics["newrelicoracledb.rac.wait_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Rate of cluster wait time in microseconds per second", ms.At(i).Description())
					assert.Equal(t, "us/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("wait.event")
					assert.True(t, ok)
					assert.Equal(t, "wait.event-val", attrVal.Str())
				case "newrelicoracledb.redo_log_parallel_write_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log_parallel_write_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log_parallel_write_waits")
					validatedMetrics["newrelicoracledb.redo_log_parallel_write_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of waits for log file parallel write events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log_switch_archiving_needed_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log_switch_archiving_needed_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log_switch_archiving_needed_waits")
					validatedMetrics["newrelicoracledb.redo_log_switch_archiving_needed_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of waits for log file switch (archiving needed) events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log_switch_checkpoint_incomplete_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log_switch_checkpoint_incomplete_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log_switch_checkpoint_incomplete_waits")
					validatedMetrics["newrelicoracledb.redo_log_switch_checkpoint_incomplete_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of waits for log file switch (checkpoint incomplete) events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.redo_log_switch_completion_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.redo_log_switch_completion_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.redo_log_switch_completion_waits")
					validatedMetrics["newrelicoracledb.redo_log_switch_completion_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of waits for log file switch completion events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rollback_segments_gets":
					assert.False(t, validatedMetrics["newrelicoracledb.rollback_segments_gets"], "Found a duplicate in the metrics slice: newrelicoracledb.rollback_segments_gets")
					validatedMetrics["newrelicoracledb.rollback_segments_gets"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of gets on rollback segments", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rollback_segments_wait_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.rollback_segments_wait_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.rollback_segments_wait_ratio")
					validatedMetrics["newrelicoracledb.rollback_segments_wait_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Rollback segments wait ratio (waits/gets)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.rollback_segments_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.rollback_segments_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.rollback_segments_waits")
					validatedMetrics["newrelicoracledb.rollback_segments_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of waits on rollback segments", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.service.count":
					assert.False(t, validatedMetrics["newrelicoracledb.service.count"], "Found a duplicate in the metrics slice: newrelicoracledb.service.count")
					validatedMetrics["newrelicoracledb.service.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of services per container", ms.At(i).Description())
					assert.Equal(t, "{services}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
				case "newrelicoracledb.service.status":
					assert.False(t, validatedMetrics["newrelicoracledb.service.status"], "Found a duplicate in the metrics slice: newrelicoracledb.service.status")
					validatedMetrics["newrelicoracledb.service.status"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Oracle service status (1=active, 0=inactive)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("service.name")
					assert.True(t, ok)
					assert.Equal(t, "service.name-val", attrVal.Str())
				case "newrelicoracledb.sessions.count":
					assert.False(t, validatedMetrics["newrelicoracledb.sessions.count"], "Found a duplicate in the metrics slice: newrelicoracledb.sessions.count")
					validatedMetrics["newrelicoracledb.sessions.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total number of active Oracle database sessions", ms.At(i).Description())
					assert.Equal(t, "{sessions}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
				case "newrelicoracledb.sga_buffer_busy_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_buffer_busy_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_buffer_busy_waits")
					validatedMetrics["newrelicoracledb.sga_buffer_busy_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of buffer busy waits events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_fixed_size_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_fixed_size_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_fixed_size_bytes")
					validatedMetrics["newrelicoracledb.sga_fixed_size_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA fixed size memory in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_free_buffer_inspected_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_free_buffer_inspected_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_free_buffer_inspected_waits")
					validatedMetrics["newrelicoracledb.sga_free_buffer_inspected_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of free buffer inspected waits events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_free_buffer_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_free_buffer_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_free_buffer_waits")
					validatedMetrics["newrelicoracledb.sga_free_buffer_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of free buffer waits events", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_hit_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_hit_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_hit_ratio")
					validatedMetrics["newrelicoracledb.sga_hit_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA hit ratio (session logical reads minus physical reads / session logical reads)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_log_allocation_retries_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_log_allocation_retries_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_log_allocation_retries_ratio")
					validatedMetrics["newrelicoracledb.sga_log_allocation_retries_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA log allocation retries ratio (redo buffer allocation retries / redo entries)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_log_buffer_redo_allocation_retries":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_log_buffer_redo_allocation_retries"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_log_buffer_redo_allocation_retries")
					validatedMetrics["newrelicoracledb.sga_log_buffer_redo_allocation_retries"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of redo buffer allocation retries from sysstat", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_log_buffer_redo_entries":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_log_buffer_redo_entries"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_log_buffer_redo_entries")
					validatedMetrics["newrelicoracledb.sga_log_buffer_redo_entries"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of redo entries from sysstat", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_log_buffer_space_waits":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_log_buffer_space_waits"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_log_buffer_space_waits")
					validatedMetrics["newrelicoracledb.sga_log_buffer_space_waits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of sessions waiting for log buffer space", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_redo_buffers_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_redo_buffers_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_redo_buffers_bytes")
					validatedMetrics["newrelicoracledb.sga_redo_buffers_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA redo buffers memory in bytes", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_shared_pool_dict_cache_miss_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_shared_pool_dict_cache_miss_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_shared_pool_dict_cache_miss_ratio")
					validatedMetrics["newrelicoracledb.sga_shared_pool_dict_cache_miss_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA shared pool dictionary cache miss ratio (getmisses/gets)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_shared_pool_library_cache_hit_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_shared_pool_library_cache_hit_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_shared_pool_library_cache_hit_ratio")
					validatedMetrics["newrelicoracledb.sga_shared_pool_library_cache_hit_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA shared pool library cache hit ratio for SQL AREA namespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sga_shared_pool_library_cache_reload_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.sga_shared_pool_library_cache_reload_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.sga_shared_pool_library_cache_reload_ratio")
					validatedMetrics["newrelicoracledb.sga_shared_pool_library_cache_reload_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SGA shared pool library cache reload ratio (reloads/pins)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sorts_disk":
					assert.False(t, validatedMetrics["newrelicoracledb.sorts_disk"], "Found a duplicate in the metrics slice: newrelicoracledb.sorts_disk")
					validatedMetrics["newrelicoracledb.sorts_disk"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of sorts performed on disk from sysstat", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.sorts_memory":
					assert.False(t, validatedMetrics["newrelicoracledb.sorts_memory"], "Found a duplicate in the metrics slice: newrelicoracledb.sorts_memory")
					validatedMetrics["newrelicoracledb.sorts_memory"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Number of sorts performed in memory from sysstat", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.active_parallel_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.system.active_parallel_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.system.active_parallel_sessions")
					validatedMetrics["newrelicoracledb.system.active_parallel_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Active Parallel Sessions", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.active_serial_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.system.active_serial_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.system.active_serial_sessions")
					validatedMetrics["newrelicoracledb.system.active_serial_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Active Serial Sessions", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.average_active_sessions":
					assert.False(t, validatedMetrics["newrelicoracledb.system.average_active_sessions"], "Found a duplicate in the metrics slice: newrelicoracledb.system.average_active_sessions")
					validatedMetrics["newrelicoracledb.system.average_active_sessions"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Average Active Sessions", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.background_checkpoints_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.background_checkpoints_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.background_checkpoints_per_second")
					validatedMetrics["newrelicoracledb.system.background_checkpoints_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Background Checkpoints Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.background_cpu_usage_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.background_cpu_usage_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.background_cpu_usage_per_second")
					validatedMetrics["newrelicoracledb.system.background_cpu_usage_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Background CPU Usage Per Sec", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.background_time_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.background_time_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.background_time_per_second")
					validatedMetrics["newrelicoracledb.system.background_time_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Background Time Per Sec", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.branch_node_splits_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.branch_node_splits_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.branch_node_splits_per_second")
					validatedMetrics["newrelicoracledb.system.branch_node_splits_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Branch Node Splits Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.branch_node_splits_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.branch_node_splits_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.branch_node_splits_per_transaction")
					validatedMetrics["newrelicoracledb.system.branch_node_splits_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Branch Node Splits Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.buffer_cache_hit_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.buffer_cache_hit_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.buffer_cache_hit_ratio")
					validatedMetrics["newrelicoracledb.system.buffer_cache_hit_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Buffer Cache Hit Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.captured_user_calls":
					assert.False(t, validatedMetrics["newrelicoracledb.system.captured_user_calls"], "Found a duplicate in the metrics slice: newrelicoracledb.system.captured_user_calls")
					validatedMetrics["newrelicoracledb.system.captured_user_calls"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Captured user calls", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.consistent_read_changes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.consistent_read_changes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.consistent_read_changes_per_second")
					validatedMetrics["newrelicoracledb.system.consistent_read_changes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Consistent Read Changes Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.consistent_read_changes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.consistent_read_changes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.consistent_read_changes_per_transaction")
					validatedMetrics["newrelicoracledb.system.consistent_read_changes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Consistent Read Changes Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.consistent_read_gets_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.consistent_read_gets_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.consistent_read_gets_per_second")
					validatedMetrics["newrelicoracledb.system.consistent_read_gets_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Consistent Read Gets Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.consistent_read_gets_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.consistent_read_gets_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.consistent_read_gets_per_transaction")
					validatedMetrics["newrelicoracledb.system.consistent_read_gets_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Consistent Read Gets Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.cpu_usage_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.cpu_usage_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.cpu_usage_per_second")
					validatedMetrics["newrelicoracledb.system.cpu_usage_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU Usage Per Sec", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.cpu_usage_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.cpu_usage_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.cpu_usage_per_transaction")
					validatedMetrics["newrelicoracledb.system.cpu_usage_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU Usage Per Txn", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.cr_blocks_created_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.cr_blocks_created_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.cr_blocks_created_per_second")
					validatedMetrics["newrelicoracledb.system.cr_blocks_created_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CR Blocks Created Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.cr_blocks_created_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.cr_blocks_created_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.cr_blocks_created_per_transaction")
					validatedMetrics["newrelicoracledb.system.cr_blocks_created_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CR Blocks Created Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.cr_undo_records_applied_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.cr_undo_records_applied_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.cr_undo_records_applied_per_second")
					validatedMetrics["newrelicoracledb.system.cr_undo_records_applied_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CR Undo Records Applied Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.cr_undo_records_applied_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.cr_undo_records_applied_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.cr_undo_records_applied_per_transaction")
					validatedMetrics["newrelicoracledb.system.cr_undo_records_applied_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CR Undo Records Applied Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.current_logons_count":
					assert.False(t, validatedMetrics["newrelicoracledb.system.current_logons_count"], "Found a duplicate in the metrics slice: newrelicoracledb.system.current_logons_count")
					validatedMetrics["newrelicoracledb.system.current_logons_count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current Logons Count", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.current_open_cursors_count":
					assert.False(t, validatedMetrics["newrelicoracledb.system.current_open_cursors_count"], "Found a duplicate in the metrics slice: newrelicoracledb.system.current_open_cursors_count")
					validatedMetrics["newrelicoracledb.system.current_open_cursors_count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current Open Cursors Count", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.current_os_load":
					assert.False(t, validatedMetrics["newrelicoracledb.system.current_os_load"], "Found a duplicate in the metrics slice: newrelicoracledb.system.current_os_load")
					validatedMetrics["newrelicoracledb.system.current_os_load"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Current OS Load", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.cursor_cache_hit_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.cursor_cache_hit_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.cursor_cache_hit_ratio")
					validatedMetrics["newrelicoracledb.system.cursor_cache_hit_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Cursor Cache Hit Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.database_cpu_time_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.database_cpu_time_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.database_cpu_time_ratio")
					validatedMetrics["newrelicoracledb.system.database_cpu_time_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database CPU Time Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.database_time_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.database_time_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.database_time_per_second")
					validatedMetrics["newrelicoracledb.system.database_time_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database Time Per Sec", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.database_wait_time_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.database_wait_time_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.database_wait_time_ratio")
					validatedMetrics["newrelicoracledb.system.database_wait_time_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database Wait Time Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.db_block_changes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.db_block_changes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.db_block_changes_per_second")
					validatedMetrics["newrelicoracledb.system.db_block_changes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "DB Block Changes Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.db_block_changes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.db_block_changes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.db_block_changes_per_transaction")
					validatedMetrics["newrelicoracledb.system.db_block_changes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "DB Block Changes Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.db_block_changes_per_user_call":
					assert.False(t, validatedMetrics["newrelicoracledb.system.db_block_changes_per_user_call"], "Found a duplicate in the metrics slice: newrelicoracledb.system.db_block_changes_per_user_call")
					validatedMetrics["newrelicoracledb.system.db_block_changes_per_user_call"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "DB Block Changes Per User Call", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.db_block_gets_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.db_block_gets_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.db_block_gets_per_second")
					validatedMetrics["newrelicoracledb.system.db_block_gets_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "DB Block Gets Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.db_block_gets_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.db_block_gets_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.db_block_gets_per_transaction")
					validatedMetrics["newrelicoracledb.system.db_block_gets_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "DB Block Gets Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.db_block_gets_per_user_call":
					assert.False(t, validatedMetrics["newrelicoracledb.system.db_block_gets_per_user_call"], "Found a duplicate in the metrics slice: newrelicoracledb.system.db_block_gets_per_user_call")
					validatedMetrics["newrelicoracledb.system.db_block_gets_per_user_call"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "DB Block Gets Per User Call", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.dbwr_checkpoints_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.dbwr_checkpoints_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.dbwr_checkpoints_per_second")
					validatedMetrics["newrelicoracledb.system.dbwr_checkpoints_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "DBWR Checkpoints Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.disk_sort_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.disk_sort_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.disk_sort_per_second")
					validatedMetrics["newrelicoracledb.system.disk_sort_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Disk Sort Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.disk_sort_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.disk_sort_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.disk_sort_per_transaction")
					validatedMetrics["newrelicoracledb.system.disk_sort_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Disk Sort Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.enqueue_deadlocks_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.enqueue_deadlocks_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.enqueue_deadlocks_per_second")
					validatedMetrics["newrelicoracledb.system.enqueue_deadlocks_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Enqueue Deadlocks Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.enqueue_deadlocks_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.enqueue_deadlocks_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.enqueue_deadlocks_per_transaction")
					validatedMetrics["newrelicoracledb.system.enqueue_deadlocks_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Enqueue Deadlocks Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.enqueue_requests_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.enqueue_requests_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.enqueue_requests_per_second")
					validatedMetrics["newrelicoracledb.system.enqueue_requests_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Enqueue Requests Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.enqueue_requests_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.enqueue_requests_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.enqueue_requests_per_transaction")
					validatedMetrics["newrelicoracledb.system.enqueue_requests_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Enqueue Requests Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.enqueue_timeouts_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.enqueue_timeouts_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.enqueue_timeouts_per_second")
					validatedMetrics["newrelicoracledb.system.enqueue_timeouts_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Enqueue Timeouts Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.enqueue_timeouts_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.enqueue_timeouts_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.enqueue_timeouts_per_transaction")
					validatedMetrics["newrelicoracledb.system.enqueue_timeouts_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Enqueue Timeouts Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.enqueue_waits_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.enqueue_waits_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.enqueue_waits_per_second")
					validatedMetrics["newrelicoracledb.system.enqueue_waits_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Enqueue Waits Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.enqueue_waits_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.enqueue_waits_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.enqueue_waits_per_transaction")
					validatedMetrics["newrelicoracledb.system.enqueue_waits_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Enqueue Waits Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.execute_without_parse_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.execute_without_parse_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.execute_without_parse_ratio")
					validatedMetrics["newrelicoracledb.system.execute_without_parse_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Execute Without Parse Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.executions_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.executions_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.executions_per_second")
					validatedMetrics["newrelicoracledb.system.executions_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Executions Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.executions_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.executions_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.executions_per_transaction")
					validatedMetrics["newrelicoracledb.system.executions_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Executions Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.executions_per_user_call":
					assert.False(t, validatedMetrics["newrelicoracledb.system.executions_per_user_call"], "Found a duplicate in the metrics slice: newrelicoracledb.system.executions_per_user_call")
					validatedMetrics["newrelicoracledb.system.executions_per_user_call"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Executions Per User Call", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.full_index_scans_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.full_index_scans_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.full_index_scans_per_second")
					validatedMetrics["newrelicoracledb.system.full_index_scans_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Full Index Scans Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.full_index_scans_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.full_index_scans_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.full_index_scans_per_transaction")
					validatedMetrics["newrelicoracledb.system.full_index_scans_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Full Index Scans Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.gc_cr_block_received_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.gc_cr_block_received_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.gc_cr_block_received_per_second")
					validatedMetrics["newrelicoracledb.system.gc_cr_block_received_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "GC CR Block Received Per Second", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.gc_cr_block_received_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.gc_cr_block_received_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.gc_cr_block_received_per_transaction")
					validatedMetrics["newrelicoracledb.system.gc_cr_block_received_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "GC CR Block Received Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.gc_current_block_received_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.gc_current_block_received_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.gc_current_block_received_per_second")
					validatedMetrics["newrelicoracledb.system.gc_current_block_received_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "GC Current Block Received Per Second", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.gc_current_block_received_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.gc_current_block_received_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.gc_current_block_received_per_transaction")
					validatedMetrics["newrelicoracledb.system.gc_current_block_received_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "GC Current Block Received Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.global_cache_average_cr_get_time":
					assert.False(t, validatedMetrics["newrelicoracledb.system.global_cache_average_cr_get_time"], "Found a duplicate in the metrics slice: newrelicoracledb.system.global_cache_average_cr_get_time")
					validatedMetrics["newrelicoracledb.system.global_cache_average_cr_get_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Global Cache Average CR Get Time", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.global_cache_average_current_get_time":
					assert.False(t, validatedMetrics["newrelicoracledb.system.global_cache_average_current_get_time"], "Found a duplicate in the metrics slice: newrelicoracledb.system.global_cache_average_current_get_time")
					validatedMetrics["newrelicoracledb.system.global_cache_average_current_get_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Global Cache Average Current Get Time", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.global_cache_blocks_corrupted":
					assert.False(t, validatedMetrics["newrelicoracledb.system.global_cache_blocks_corrupted"], "Found a duplicate in the metrics slice: newrelicoracledb.system.global_cache_blocks_corrupted")
					validatedMetrics["newrelicoracledb.system.global_cache_blocks_corrupted"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Global Cache Blocks Corrupted", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.global_cache_blocks_lost":
					assert.False(t, validatedMetrics["newrelicoracledb.system.global_cache_blocks_lost"], "Found a duplicate in the metrics slice: newrelicoracledb.system.global_cache_blocks_lost")
					validatedMetrics["newrelicoracledb.system.global_cache_blocks_lost"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Global Cache Blocks Lost", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.hard_parse_count_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.hard_parse_count_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.hard_parse_count_per_second")
					validatedMetrics["newrelicoracledb.system.hard_parse_count_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Hard Parse Count Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.hard_parse_count_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.hard_parse_count_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.hard_parse_count_per_transaction")
					validatedMetrics["newrelicoracledb.system.hard_parse_count_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Hard Parse Count Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.host_cpu_usage_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.host_cpu_usage_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.host_cpu_usage_per_second")
					validatedMetrics["newrelicoracledb.system.host_cpu_usage_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Host CPU Usage Per Sec", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.host_cpu_utilization":
					assert.False(t, validatedMetrics["newrelicoracledb.system.host_cpu_utilization"], "Found a duplicate in the metrics slice: newrelicoracledb.system.host_cpu_utilization")
					validatedMetrics["newrelicoracledb.system.host_cpu_utilization"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Host CPU Utilization (%)", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.io_megabytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.io_megabytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.io_megabytes_per_second")
					validatedMetrics["newrelicoracledb.system.io_megabytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "I/O Megabytes per Second", ms.At(i).Description())
					assert.Equal(t, "MBy/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.io_requests_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.io_requests_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.io_requests_per_second")
					validatedMetrics["newrelicoracledb.system.io_requests_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "I/O Requests per Second", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.leaf_node_splits_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.leaf_node_splits_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.leaf_node_splits_per_second")
					validatedMetrics["newrelicoracledb.system.leaf_node_splits_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Leaf Node Splits Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.leaf_node_splits_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.leaf_node_splits_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.leaf_node_splits_per_transaction")
					validatedMetrics["newrelicoracledb.system.leaf_node_splits_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Leaf Node Splits Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.library_cache_hit_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.library_cache_hit_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.library_cache_hit_ratio")
					validatedMetrics["newrelicoracledb.system.library_cache_hit_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Library Cache Hit Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.library_cache_miss_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.library_cache_miss_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.library_cache_miss_ratio")
					validatedMetrics["newrelicoracledb.system.library_cache_miss_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Library Cache Miss Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.logical_reads_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.logical_reads_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.logical_reads_per_second")
					validatedMetrics["newrelicoracledb.system.logical_reads_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logical Reads Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.logical_reads_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.logical_reads_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.logical_reads_per_transaction")
					validatedMetrics["newrelicoracledb.system.logical_reads_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logical Reads Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.logical_reads_per_user_call":
					assert.False(t, validatedMetrics["newrelicoracledb.system.logical_reads_per_user_call"], "Found a duplicate in the metrics slice: newrelicoracledb.system.logical_reads_per_user_call")
					validatedMetrics["newrelicoracledb.system.logical_reads_per_user_call"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logical Reads Per User Call", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.logons_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.logons_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.logons_per_second")
					validatedMetrics["newrelicoracledb.system.logons_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logons Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.logons_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.logons_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.logons_per_transaction")
					validatedMetrics["newrelicoracledb.system.logons_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Logons Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.long_table_scans_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.long_table_scans_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.long_table_scans_per_second")
					validatedMetrics["newrelicoracledb.system.long_table_scans_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Long Table Scans Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.long_table_scans_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.long_table_scans_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.long_table_scans_per_transaction")
					validatedMetrics["newrelicoracledb.system.long_table_scans_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Long Table Scans Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.memory_sorts_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.memory_sorts_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.memory_sorts_ratio")
					validatedMetrics["newrelicoracledb.system.memory_sorts_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory Sorts Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.network_traffic_volume_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.network_traffic_volume_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.network_traffic_volume_per_second")
					validatedMetrics["newrelicoracledb.system.network_traffic_volume_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Network Traffic Volume Per Sec", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.open_cursors_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.open_cursors_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.open_cursors_per_second")
					validatedMetrics["newrelicoracledb.system.open_cursors_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Open Cursors Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.open_cursors_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.open_cursors_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.open_cursors_per_transaction")
					validatedMetrics["newrelicoracledb.system.open_cursors_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Open Cursors Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.parse_failure_count_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.parse_failure_count_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.parse_failure_count_per_second")
					validatedMetrics["newrelicoracledb.system.parse_failure_count_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Parse Failure Count Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.parse_failure_count_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.parse_failure_count_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.parse_failure_count_per_transaction")
					validatedMetrics["newrelicoracledb.system.parse_failure_count_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Parse Failure Count Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.pga_cache_hit_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.system.pga_cache_hit_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.system.pga_cache_hit_percentage")
					validatedMetrics["newrelicoracledb.system.pga_cache_hit_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "PGA Cache Hit %", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_lobs_reads_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_lobs_reads_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_lobs_reads_per_second")
					validatedMetrics["newrelicoracledb.system.physical_lobs_reads_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Reads Direct Lobs Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_lobs_reads_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_lobs_reads_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_lobs_reads_per_transaction")
					validatedMetrics["newrelicoracledb.system.physical_lobs_reads_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Reads Direct Lobs Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_lobs_writes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_lobs_writes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_lobs_writes_per_second")
					validatedMetrics["newrelicoracledb.system.physical_lobs_writes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Writes Direct Lobs Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_lobs_writes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_lobs_writes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_lobs_writes_per_transaction")
					validatedMetrics["newrelicoracledb.system.physical_lobs_writes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Writes Direct Lobs Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_read_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_read_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_read_bytes_per_second")
					validatedMetrics["newrelicoracledb.system.physical_read_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Read Bytes Per Sec", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_read_io_requests_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_read_io_requests_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_read_io_requests_per_second")
					validatedMetrics["newrelicoracledb.system.physical_read_io_requests_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Read IO Requests Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_read_total_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_read_total_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_read_total_bytes_per_second")
					validatedMetrics["newrelicoracledb.system.physical_read_total_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Read Total Bytes Per Sec", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_read_total_io_requests_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_read_total_io_requests_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_read_total_io_requests_per_second")
					validatedMetrics["newrelicoracledb.system.physical_read_total_io_requests_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Read Total IO Requests Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_reads_direct_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_reads_direct_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_reads_direct_per_second")
					validatedMetrics["newrelicoracledb.system.physical_reads_direct_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Reads Direct Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_reads_direct_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_reads_direct_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_reads_direct_per_transaction")
					validatedMetrics["newrelicoracledb.system.physical_reads_direct_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Reads Direct Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_reads_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_reads_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_reads_per_second")
					validatedMetrics["newrelicoracledb.system.physical_reads_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Reads Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_reads_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_reads_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_reads_per_transaction")
					validatedMetrics["newrelicoracledb.system.physical_reads_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Reads Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_write_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_write_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_write_bytes_per_second")
					validatedMetrics["newrelicoracledb.system.physical_write_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Write Bytes Per Sec", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_write_io_requests_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_write_io_requests_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_write_io_requests_per_second")
					validatedMetrics["newrelicoracledb.system.physical_write_io_requests_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Write IO Requests Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_write_total_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_write_total_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_write_total_bytes_per_second")
					validatedMetrics["newrelicoracledb.system.physical_write_total_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Write Total Bytes Per Sec", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_write_total_io_requests_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_write_total_io_requests_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_write_total_io_requests_per_second")
					validatedMetrics["newrelicoracledb.system.physical_write_total_io_requests_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Write Total IO Requests Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_writes_direct_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_writes_direct_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_writes_direct_per_second")
					validatedMetrics["newrelicoracledb.system.physical_writes_direct_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Writes Direct Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_writes_direct_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_writes_direct_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_writes_direct_per_transaction")
					validatedMetrics["newrelicoracledb.system.physical_writes_direct_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Writes Direct Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_writes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_writes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_writes_per_second")
					validatedMetrics["newrelicoracledb.system.physical_writes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Writes Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.physical_writes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.physical_writes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.physical_writes_per_transaction")
					validatedMetrics["newrelicoracledb.system.physical_writes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Physical Writes Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.process_limit_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.system.process_limit_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.system.process_limit_percentage")
					validatedMetrics["newrelicoracledb.system.process_limit_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Process Limit %", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.recursive_calls_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.recursive_calls_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.recursive_calls_per_second")
					validatedMetrics["newrelicoracledb.system.recursive_calls_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Recursive Calls Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.recursive_calls_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.recursive_calls_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.recursive_calls_per_transaction")
					validatedMetrics["newrelicoracledb.system.recursive_calls_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Recursive Calls Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.redo_allocation_hit_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.redo_allocation_hit_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.redo_allocation_hit_ratio")
					validatedMetrics["newrelicoracledb.system.redo_allocation_hit_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Redo Allocation Hit Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.redo_generated_bytes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.redo_generated_bytes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.redo_generated_bytes_per_second")
					validatedMetrics["newrelicoracledb.system.redo_generated_bytes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Redo Generated Per Sec", ms.At(i).Description())
					assert.Equal(t, "By/s", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.redo_generated_bytes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.redo_generated_bytes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.redo_generated_bytes_per_transaction")
					validatedMetrics["newrelicoracledb.system.redo_generated_bytes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Redo Generated Per Txn", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.redo_writes_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.redo_writes_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.redo_writes_per_second")
					validatedMetrics["newrelicoracledb.system.redo_writes_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Redo Writes Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.redo_writes_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.redo_writes_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.redo_writes_per_transaction")
					validatedMetrics["newrelicoracledb.system.redo_writes_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Redo Writes Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.response_time_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.response_time_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.response_time_per_transaction")
					validatedMetrics["newrelicoracledb.system.response_time_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Response Time Per Txn", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.row_cache_hit_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.row_cache_hit_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.row_cache_hit_ratio")
					validatedMetrics["newrelicoracledb.system.row_cache_hit_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Row Cache Hit Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.row_cache_miss_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.row_cache_miss_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.row_cache_miss_ratio")
					validatedMetrics["newrelicoracledb.system.row_cache_miss_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Row Cache Miss Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.rows_per_sort":
					assert.False(t, validatedMetrics["newrelicoracledb.system.rows_per_sort"], "Found a duplicate in the metrics slice: newrelicoracledb.system.rows_per_sort")
					validatedMetrics["newrelicoracledb.system.rows_per_sort"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Rows Per Sort", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.session_count":
					assert.False(t, validatedMetrics["newrelicoracledb.system.session_count"], "Found a duplicate in the metrics slice: newrelicoracledb.system.session_count")
					validatedMetrics["newrelicoracledb.system.session_count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Session Count", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.session_limit_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.system.session_limit_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.system.session_limit_percentage")
					validatedMetrics["newrelicoracledb.system.session_limit_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Session Limit %", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.shared_pool_free_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.system.shared_pool_free_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.system.shared_pool_free_percentage")
					validatedMetrics["newrelicoracledb.system.shared_pool_free_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Shared Pool Free %", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.soft_parse_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.soft_parse_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.soft_parse_ratio")
					validatedMetrics["newrelicoracledb.system.soft_parse_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Soft Parse Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.sql_service_response_time":
					assert.False(t, validatedMetrics["newrelicoracledb.system.sql_service_response_time"], "Found a duplicate in the metrics slice: newrelicoracledb.system.sql_service_response_time")
					validatedMetrics["newrelicoracledb.system.sql_service_response_time"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "SQL Service Response Time", ms.At(i).Description())
					assert.Equal(t, "ms", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.streams_pool_usage_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.system.streams_pool_usage_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.system.streams_pool_usage_percentage")
					validatedMetrics["newrelicoracledb.system.streams_pool_usage_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Streams Pool Usage Percentage", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.temp_space_used":
					assert.False(t, validatedMetrics["newrelicoracledb.system.temp_space_used"], "Found a duplicate in the metrics slice: newrelicoracledb.system.temp_space_used")
					validatedMetrics["newrelicoracledb.system.temp_space_used"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Temp Space Used", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.total_index_scans_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.total_index_scans_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.total_index_scans_per_second")
					validatedMetrics["newrelicoracledb.system.total_index_scans_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total Index Scans Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.total_index_scans_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.total_index_scans_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.total_index_scans_per_transaction")
					validatedMetrics["newrelicoracledb.system.total_index_scans_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total Index Scans Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.total_parse_count_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.total_parse_count_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.total_parse_count_per_second")
					validatedMetrics["newrelicoracledb.system.total_parse_count_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total Parse Count Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.total_parse_count_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.total_parse_count_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.total_parse_count_per_transaction")
					validatedMetrics["newrelicoracledb.system.total_parse_count_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total Parse Count Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.total_sorts_per_user_call":
					assert.False(t, validatedMetrics["newrelicoracledb.system.total_sorts_per_user_call"], "Found a duplicate in the metrics slice: newrelicoracledb.system.total_sorts_per_user_call")
					validatedMetrics["newrelicoracledb.system.total_sorts_per_user_call"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total Sorts Per User Call", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.total_table_scans_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.total_table_scans_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.total_table_scans_per_second")
					validatedMetrics["newrelicoracledb.system.total_table_scans_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total Table Scans Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.total_table_scans_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.total_table_scans_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.total_table_scans_per_transaction")
					validatedMetrics["newrelicoracledb.system.total_table_scans_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total Table Scans Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.total_table_scans_per_user_call":
					assert.False(t, validatedMetrics["newrelicoracledb.system.total_table_scans_per_user_call"], "Found a duplicate in the metrics slice: newrelicoracledb.system.total_table_scans_per_user_call")
					validatedMetrics["newrelicoracledb.system.total_table_scans_per_user_call"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total Table Scans Per User Call", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.transactions_per_logon":
					assert.False(t, validatedMetrics["newrelicoracledb.system.transactions_per_logon"], "Found a duplicate in the metrics slice: newrelicoracledb.system.transactions_per_logon")
					validatedMetrics["newrelicoracledb.system.transactions_per_logon"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Txns Per Logon", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.transactions_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.transactions_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.transactions_per_second")
					validatedMetrics["newrelicoracledb.system.transactions_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Transaction Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.user_calls_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.user_calls_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.user_calls_per_second")
					validatedMetrics["newrelicoracledb.system.user_calls_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Calls Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.user_calls_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.user_calls_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.user_calls_per_transaction")
					validatedMetrics["newrelicoracledb.system.user_calls_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Calls Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.user_calls_ratio":
					assert.False(t, validatedMetrics["newrelicoracledb.system.user_calls_ratio"], "Found a duplicate in the metrics slice: newrelicoracledb.system.user_calls_ratio")
					validatedMetrics["newrelicoracledb.system.user_calls_ratio"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Calls Ratio", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.user_commits_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.user_commits_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.user_commits_per_second")
					validatedMetrics["newrelicoracledb.system.user_commits_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Commits Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.user_commits_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.system.user_commits_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.system.user_commits_percentage")
					validatedMetrics["newrelicoracledb.system.user_commits_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Commits Percentage", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.user_limit_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.system.user_limit_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.system.user_limit_percentage")
					validatedMetrics["newrelicoracledb.system.user_limit_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Limit %", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.user_rollback_undo_records_applied_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.user_rollback_undo_records_applied_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.user_rollback_undo_records_applied_per_second")
					validatedMetrics["newrelicoracledb.system.user_rollback_undo_records_applied_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Rollback UndoRec Applied Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.user_rollback_undo_records_applied_per_transaction":
					assert.False(t, validatedMetrics["newrelicoracledb.system.user_rollback_undo_records_applied_per_transaction"], "Found a duplicate in the metrics slice: newrelicoracledb.system.user_rollback_undo_records_applied_per_transaction")
					validatedMetrics["newrelicoracledb.system.user_rollback_undo_records_applied_per_transaction"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Rollback Undo Records Applied Per Txn", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.user_rollbacks_per_second":
					assert.False(t, validatedMetrics["newrelicoracledb.system.user_rollbacks_per_second"], "Found a duplicate in the metrics slice: newrelicoracledb.system.user_rollbacks_per_second")
					validatedMetrics["newrelicoracledb.system.user_rollbacks_per_second"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Rollbacks Per Sec", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.system.user_rollbacks_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.system.user_rollbacks_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.system.user_rollbacks_percentage")
					validatedMetrics["newrelicoracledb.system.user_rollbacks_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "User Rollbacks Percentage", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("instance.id")
					assert.True(t, ok)
					assert.Equal(t, "instance.id-val", attrVal.Str())
				case "newrelicoracledb.tablespace.db_id":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.db_id"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.db_id")
					validatedMetrics["newrelicoracledb.tablespace.db_id"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Database ID information for tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.global_name":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.global_name"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.global_name")
					validatedMetrics["newrelicoracledb.tablespace.global_name"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Global name information for tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.is_offline":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.is_offline"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.is_offline")
					validatedMetrics["newrelicoracledb.tablespace.is_offline"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Whether the tablespace is offline (1) or online (0)", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.offline_cdb_datafiles":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.offline_cdb_datafiles"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.offline_cdb_datafiles")
					validatedMetrics["newrelicoracledb.tablespace.offline_cdb_datafiles"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of offline CDB datafiles by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.offline_pdb_datafiles":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.offline_pdb_datafiles"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.offline_pdb_datafiles")
					validatedMetrics["newrelicoracledb.tablespace.offline_pdb_datafiles"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of offline PDB datafiles by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.pdb_non_write_mode":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.pdb_non_write_mode"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.pdb_non_write_mode")
					validatedMetrics["newrelicoracledb.tablespace.pdb_non_write_mode"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Count of PDB datafiles in non-write mode by tablespace", ms.At(i).Description())
					assert.Equal(t, "1", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_consumed_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_consumed_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_consumed_bytes")
					validatedMetrics["newrelicoracledb.tablespace.space_consumed_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total bytes consumed by the tablespace", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_reserved_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_reserved_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_reserved_bytes")
					validatedMetrics["newrelicoracledb.tablespace.space_reserved_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total bytes reserved by the tablespace", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.space_used_percentage":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.space_used_percentage"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.space_used_percentage")
					validatedMetrics["newrelicoracledb.tablespace.space_used_percentage"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Percentage of tablespace space currently used", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.total_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.total_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.total_bytes")
					validatedMetrics["newrelicoracledb.tablespace.total_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Total bytes in tablespace", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.used_bytes":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.used_bytes"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.used_bytes")
					validatedMetrics["newrelicoracledb.tablespace.used_bytes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Used bytes in tablespace", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				case "newrelicoracledb.tablespace.used_percent":
					assert.False(t, validatedMetrics["newrelicoracledb.tablespace.used_percent"], "Found a duplicate in the metrics slice: newrelicoracledb.tablespace.used_percent")
					validatedMetrics["newrelicoracledb.tablespace.used_percent"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Used percentage of tablespace", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("db.instance.name")
					assert.True(t, ok)
					assert.Equal(t, "db.instance.name-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("con.id")
					assert.True(t, ok)
					assert.Equal(t, "con.id-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("tablespace.name")
					assert.True(t, ok)
					assert.Equal(t, "tablespace.name-val", attrVal.Str())
				}
			}
		})
	}
}
