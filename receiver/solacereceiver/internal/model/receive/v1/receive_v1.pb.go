// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: receive_v1.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpanData_DeliveryMode int32

const (
	SpanData_PERSISTENT     SpanData_DeliveryMode = 0
	SpanData_NON_PERSISTENT SpanData_DeliveryMode = 1
	SpanData_DIRECT         SpanData_DeliveryMode = 2
)

// Enum value maps for SpanData_DeliveryMode.
var (
	SpanData_DeliveryMode_name = map[int32]string{
		0: "PERSISTENT",
		1: "NON_PERSISTENT",
		2: "DIRECT",
	}
	SpanData_DeliveryMode_value = map[string]int32{
		"PERSISTENT":     0,
		"NON_PERSISTENT": 1,
		"DIRECT":         2,
	}
)

func (x SpanData_DeliveryMode) Enum() *SpanData_DeliveryMode {
	p := new(SpanData_DeliveryMode)
	*p = x
	return p
}

func (x SpanData_DeliveryMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanData_DeliveryMode) Descriptor() protoreflect.EnumDescriptor {
	return file_receive_v1_proto_enumTypes[0].Descriptor()
}

func (SpanData_DeliveryMode) Type() protoreflect.EnumType {
	return &file_receive_v1_proto_enumTypes[0]
}

func (x SpanData_DeliveryMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanData_DeliveryMode.Descriptor instead.
func (SpanData_DeliveryMode) EnumDescriptor() ([]byte, []int) {
	return file_receive_v1_proto_rawDescGZIP(), []int{0, 0}
}

type SpanData_TransactionEvent_Type int32

const (
	// COMMIT and ROLLBACK are always initiated by either a CLIENT or ADMIN.
	// The initiator is ADMIN when the management interface is used to
	// to perform a heuristic commit or rollback.
	SpanData_TransactionEvent_COMMIT   SpanData_TransactionEvent_Type = 0
	SpanData_TransactionEvent_ROLLBACK SpanData_TransactionEvent_Type = 1
	// PREPARE and END can only occur with a CLIENT initiator, and spans for
	// these operations are only generated if the operation fails. Therefore,
	// the error_description of the TransactionEvent will always be present
	// for END and PREPARE.
	SpanData_TransactionEvent_END     SpanData_TransactionEvent_Type = 2
	SpanData_TransactionEvent_PREPARE SpanData_TransactionEvent_Type = 3
	// The initiator of a SESSION_TIMEOUT is always BROKER. All messages
	// received as part of the transaction are discarded.
	SpanData_TransactionEvent_SESSION_TIMEOUT SpanData_TransactionEvent_Type = 4
	// The initiator of ROLLBACK_ONLY is always BROKER. The first such event
	// in a transaction always has an error_description in the span,
	// indicating there was a problem processing the message when it was
	// received, and the message is being discarded. This also transitions
	// the transaction itself to a "rollback only" state, which causes
	// all subsequent messages received as part of the transaction to also
	// be discarded. Spans generated by these subsequent discards will not
	// have the span's error_description set, but all ROLLBACK_ONLY
	// transaction events will have an error_description set, which indicate
	// the transaction's error.
	//
	// Since the only record of these messages in the context of the
	// transaction has been discarded, no further span can be generated in
	// the context of a client, admin, or session timeout operation. When a
	// subsequent operation such as rollback or commit occurs on a
	// transaction marked rollback only, only messages received prior to the
	// error triggering the transition to rollback only will generate
	// receive spans.
	SpanData_TransactionEvent_ROLLBACK_ONLY SpanData_TransactionEvent_Type = 5
)

// Enum value maps for SpanData_TransactionEvent_Type.
var (
	SpanData_TransactionEvent_Type_name = map[int32]string{
		0: "COMMIT",
		1: "ROLLBACK",
		2: "END",
		3: "PREPARE",
		4: "SESSION_TIMEOUT",
		5: "ROLLBACK_ONLY",
	}
	SpanData_TransactionEvent_Type_value = map[string]int32{
		"COMMIT":          0,
		"ROLLBACK":        1,
		"END":             2,
		"PREPARE":         3,
		"SESSION_TIMEOUT": 4,
		"ROLLBACK_ONLY":   5,
	}
)

func (x SpanData_TransactionEvent_Type) Enum() *SpanData_TransactionEvent_Type {
	p := new(SpanData_TransactionEvent_Type)
	*p = x
	return p
}

func (x SpanData_TransactionEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanData_TransactionEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_receive_v1_proto_enumTypes[1].Descriptor()
}

func (SpanData_TransactionEvent_Type) Type() protoreflect.EnumType {
	return &file_receive_v1_proto_enumTypes[1]
}

func (x SpanData_TransactionEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanData_TransactionEvent_Type.Descriptor instead.
func (SpanData_TransactionEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_receive_v1_proto_rawDescGZIP(), []int{0, 2, 0}
}

type SpanData_TransactionEvent_Initiator int32

const (
	SpanData_TransactionEvent_CLIENT SpanData_TransactionEvent_Initiator = 0
	SpanData_TransactionEvent_ADMIN  SpanData_TransactionEvent_Initiator = 1
	SpanData_TransactionEvent_BROKER SpanData_TransactionEvent_Initiator = 2
)

// Enum value maps for SpanData_TransactionEvent_Initiator.
var (
	SpanData_TransactionEvent_Initiator_name = map[int32]string{
		0: "CLIENT",
		1: "ADMIN",
		2: "BROKER",
	}
	SpanData_TransactionEvent_Initiator_value = map[string]int32{
		"CLIENT": 0,
		"ADMIN":  1,
		"BROKER": 2,
	}
)

func (x SpanData_TransactionEvent_Initiator) Enum() *SpanData_TransactionEvent_Initiator {
	p := new(SpanData_TransactionEvent_Initiator)
	*p = x
	return p
}

func (x SpanData_TransactionEvent_Initiator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanData_TransactionEvent_Initiator) Descriptor() protoreflect.EnumDescriptor {
	return file_receive_v1_proto_enumTypes[2].Descriptor()
}

func (SpanData_TransactionEvent_Initiator) Type() protoreflect.EnumType {
	return &file_receive_v1_proto_enumTypes[2]
}

func (x SpanData_TransactionEvent_Initiator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanData_TransactionEvent_Initiator.Descriptor instead.
func (SpanData_TransactionEvent_Initiator) EnumDescriptor() ([]byte, []int) {
	return file_receive_v1_proto_rawDescGZIP(), []int{0, 2, 1}
}

// A message will be compatible with this specification if its topic matches:
// _telemetry/broker/trace/receive/v1[/additional/topic/levels]
//
// Note that the topic above allows for additional topic levels to be added in
// the future. Receiving clients must not assume there are no additional topic
// levels.
//
// This message describes telemetry data that a Solace PubSub+ broker captures
// when a received message is identified as a message to be traced.
//
// Fields with names that end in "time_unix_nano" are 64-bit timestamps, in
// nanoseconds, since midnight, Jan. 1, 1970 UTC.
//
// Notes on the field numbers used:
//   - Field numbers 1-15 are used for attributes that are expected to be present
//     on the wire with every single message not containing an error_description.
//     Special priority is given to fields that can be repeated.
//   - Field numbers 16+ are used for other attributes.
//
// Next available field ID: 40
type SpanData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 16-byte globally unique trace ID. Any two spans with the same trace ID are
	// part of the same trace.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// 8-byte span ID, unique within the scope of a trace.
	SpanId []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// If not present, this is a root span. If present, this is an 8-byte span ID
	// of the parent span.
	ParentSpanId []byte `protobuf:"bytes,16,opt,name=parent_span_id,json=parentSpanId,proto3,oneof" json:"parent_span_id,omitempty"`
	// tracestate string value, as per
	// <https://www.w3.org/TR/trace-context/#tracestate-header>
	TraceState *string `protobuf:"bytes,17,opt,name=trace_state,json=traceState,proto3,oneof" json:"trace_state,omitempty"`
	// A baggage string formatted as described here:
	// https://www.w3.org/TR/baggage/#x3-2-1-1-baggage-string
	// This string may be truncated if the complete string, as received, would
	// cause the broker's limit for application message properties to be exceeded.
	// See dropped_application_message_properties for more details.
	Baggage *string `protobuf:"bytes,39,opt,name=baggage,proto3,oneof" json:"baggage,omitempty"`
	// The start and end timestamps of the receive span. The start of the span is
	// when Guaranteed Messaging processing begins in the broker.
	StartTimeUnixNano int64 `protobuf:"fixed64,3,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	EndTimeUnixNano   int64 `protobuf:"fixed64,4,opt,name=end_time_unix_nano,json=endTimeUnixNano,proto3" json:"end_time_unix_nano,omitempty"`
	// The broker receive timestamp is when the broker first identified the
	// message as a message that is to be traced. This is always before the start
	// of the span (the span starts when Guaranteed Message processing beings on the
	// message later in the processing pipeline). However, in some broker
	// implementations this timestamp is generated from a different clock and
	// therefore not guaranteed to be numerically smaller than
	// start_time_unix_nano, even though it represents an earlier time.
	BrokerReceiveTimeUnixNano int64 `protobuf:"fixed64,12,opt,name=broker_receive_time_unix_nano,json=brokerReceiveTimeUnixNano,proto3" json:"broker_receive_time_unix_nano,omitempty"`
	// The topic of the received message, used to determine where to enqueue the
	// message.
	Topic string `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`
	// The reply-to topic of the received message, if present.
	ReplyToTopic *string `protobuf:"bytes,18,opt,name=reply_to_topic,json=replyToTopic,proto3,oneof" json:"reply_to_topic,omitempty"`
	// The delivery mode of the message, when it was received by the broker. Note
	// that if the delivery mode is DIRECT, the message will be promoted to
	// NON_PERSISTENT when it is enqueued.
	DeliveryMode SpanData_DeliveryMode `protobuf:"varint,19,opt,name=delivery_mode,json=deliveryMode,proto3,enum=solace.messaging.proto.broker.trace.receive.v1.SpanData_DeliveryMode" json:"delivery_mode,omitempty"`
	// The receiving broker's router-name at the time the message was received.
	RouterName string `protobuf:"bytes,20,opt,name=router_name,json=routerName,proto3" json:"router_name,omitempty"`
	// The receiving broker's message-vpn name. This field may be removed in the
	// future without a major version change since the field is specified as
	// optional.
	//
	// Rather than rely on this field, receiving clients should obtain the VPN
	// by using an SMF API to extract the VPN_NAME_IN_USE from the API's Session
	// object. The message_vpn_name of all messages received from via an SMF
	// API's session will match the session's VPN_NAME_IN_USE.
	MessageVpnName *string `protobuf:"bytes,21,opt,name=message_vpn_name,json=messageVpnName,proto3,oneof" json:"message_vpn_name,omitempty"`
	// The receiving broker's SolOS version when the message was initially
	// received.
	//
	// It is possible for a consumer to determine the SolOS version of the broker
	// it is receiving messages from by extracting the PEER_SOFTWARE_VERSION from
	// an SMF API Session object. However, it may not match this attribute since
	// the message may have been received when the version was different from the
	// broker's current SolOS version.
	SolosVersion string `protobuf:"bytes,38,opt,name=solos_version,json=solosVersion,proto3" json:"solos_version,omitempty"`
	// The client name of the publishing client, as well as the client-username
	// they are bound to on the broker.
	ClientName     string `protobuf:"bytes,6,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"`
	ClientUsername string `protobuf:"bytes,7,opt,name=client_username,json=clientUsername,proto3" json:"client_username,omitempty"`
	// The IP and port the broker received the message on.
	// Note: host_ip can be either an IPv4 address, an IPv6 address, or no
	// address at all. If it is IPv4, the length is 4; an IPv6 address is 16
	// bytes; no address is indicated with a 0-length value. When the IP address
	// is not included, the host_port should not be read.
	HostIp   []byte `protobuf:"bytes,8,opt,name=host_ip,json=hostIp,proto3" json:"host_ip,omitempty"`
	HostPort uint32 `protobuf:"varint,9,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
	// The IP and port of the publishing client, from the broker's point of view.
	// This may not be the client's local IP and port if there is network address
	// translation involved between the client and the broker.
	// Note: peer_ip can be either an IPv4 address, an IPv6 address, or no
	// address at all. If it is IPv4, the length is 4; an IPv6 address is 16
	// bytes; no address is indicated with a 0-length value. When the IP address
	// is not included, the peer_port should not be read.
	PeerIp   []byte `protobuf:"bytes,10,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	PeerPort uint32 `protobuf:"varint,11,opt,name=peer_port,json=peerPort,proto3" json:"peer_port,omitempty"`
	// The message's globally unique Replication Group Message ID, in binary
	// format. This will not be present if the message is being discarded.
	// The format of these bytes are:
	// byte[0]: Version.
	// byte[1:len-1]: Binary representation of a replication group message ID in
	//
	//	the specified version.
	//
	// This should only be treated as opaque data by applications. If comparing
	// two ID's and the versions are the same, then the ID's are the same if the
	// remaining bytes are the same. If the versions are different, no comparison
	// can be made.
	ReplicationGroupMessageId []byte `protobuf:"bytes,22,opt,name=replication_group_message_id,json=replicationGroupMessageId,proto3,oneof" json:"replication_group_message_id,omitempty"`
	// Indicates how the message was received by the broker.
	Protocol string `protobuf:"bytes,23,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// The version of the protocol used. This is only present when the protocol is
	// MQTT.
	ProtocolVersion *string `protobuf:"bytes,24,opt,name=protocol_version,json=protocolVersion,proto3,oneof" json:"protocol_version,omitempty"`
	// Indicates properties of the published message, as set by the client.
	DmqEligible bool    `protobuf:"varint,25,opt,name=dmq_eligible,json=dmqEligible,proto3" json:"dmq_eligible,omitempty"`
	Priority    *uint32 `protobuf:"varint,26,opt,name=priority,proto3,oneof" json:"priority,omitempty"`
	Ttl         *int64  `protobuf:"varint,27,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
	// The sizes of various types of message payload, which are not mutually
	// exclusive.
	BinaryAttachmentSize uint32 `protobuf:"varint,28,opt,name=binary_attachment_size,json=binaryAttachmentSize,proto3" json:"binary_attachment_size,omitempty"`
	XmlAttachmentSize    uint32 `protobuf:"varint,29,opt,name=xml_attachment_size,json=xmlAttachmentSize,proto3" json:"xml_attachment_size,omitempty"`
	MetadataSize         uint32 `protobuf:"varint,30,opt,name=metadata_size,json=metadataSize,proto3" json:"metadata_size,omitempty"`
	// These properties may or may not have been set on a message by the
	// application.
	ApplicationMessageId *string `protobuf:"bytes,31,opt,name=application_message_id,json=applicationMessageId,proto3,oneof" json:"application_message_id,omitempty"`
	CorrelationId        *string `protobuf:"bytes,32,opt,name=correlation_id,json=correlationId,proto3,oneof" json:"correlation_id,omitempty"`
	// If the applications set user properties on the message, they are captured
	// here. See the UserPropertyValue for restrictions on which values will be
	// captured.
	UserProperties map[string]*SpanData_UserPropertyValue `protobuf:"bytes,14,rep,name=user_properties,json=userProperties,proto3" json:"user_properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Application message properties refers to the collection of:
	// * trace_state
	// * application_message_id
	// * correlation_id
	// * baggage
	// * user_properties
	// The broker supports up to a total of 8KiB of application message
	// properties. If the total amount of application message properties in the
	// message being traced exceeds this limit, this flag is used to indicate
	// some properties were dropped.
	DroppedApplicationMessageProperties bool `protobuf:"varint,37,opt,name=dropped_application_message_properties,json=droppedApplicationMessageProperties,proto3" json:"dropped_application_message_properties,omitempty"`
	// If present, this indicates the message is being rejected to the publisher
	// and matches the error string provided back to the publisher as an error.
	//
	// For transacted messages, the individual messages are not rejected to the
	// publisher. However, a message with an error_description indicates that it
	// is one of the messages that caused the operation on the transacted session
	// to fail. See transaction_event for more information on the failed
	// operation.
	//
	// This string is informational only and not intended to be parsed by
	// applications.
	ErrorDescription string `protobuf:"bytes,33,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	// If the message is part of a transaction, transaction_event provides details
	// on the transaction.
	TransactionEvent *SpanData_TransactionEvent `protobuf:"bytes,34,opt,name=transaction_event,json=transactionEvent,proto3,oneof" json:"transaction_event,omitempty"`
	// Each EnqueueEvent represents an attempt to enqueue the message to the
	// described destination.
	EnqueueEvents []*SpanData_EnqueueEvent `protobuf:"bytes,15,rep,name=enqueue_events,json=enqueueEvents,proto3" json:"enqueue_events,omitempty"`
	// There is a limit to the number of enqueue events the broker will generate
	// for a received message. The following two fields indicate the number of
	// successful and failed enqueue events that were dropped.
	DroppedEnqueueEventsSuccess uint32 `protobuf:"varint,35,opt,name=dropped_enqueue_events_success,json=droppedEnqueueEventsSuccess,proto3" json:"dropped_enqueue_events_success,omitempty"`
	DroppedEnqueueEventsFailed  uint32 `protobuf:"varint,36,opt,name=dropped_enqueue_events_failed,json=droppedEnqueueEventsFailed,proto3" json:"dropped_enqueue_events_failed,omitempty"`
}

func (x *SpanData) Reset() {
	*x = SpanData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receive_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData) ProtoMessage() {}

func (x *SpanData) ProtoReflect() protoreflect.Message {
	mi := &file_receive_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData.ProtoReflect.Descriptor instead.
func (*SpanData) Descriptor() ([]byte, []int) {
	return file_receive_v1_proto_rawDescGZIP(), []int{0}
}

func (x *SpanData) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *SpanData) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *SpanData) GetParentSpanId() []byte {
	if x != nil {
		return x.ParentSpanId
	}
	return nil
}

func (x *SpanData) GetTraceState() string {
	if x != nil && x.TraceState != nil {
		return *x.TraceState
	}
	return ""
}

func (x *SpanData) GetBaggage() string {
	if x != nil && x.Baggage != nil {
		return *x.Baggage
	}
	return ""
}

func (x *SpanData) GetStartTimeUnixNano() int64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *SpanData) GetEndTimeUnixNano() int64 {
	if x != nil {
		return x.EndTimeUnixNano
	}
	return 0
}

func (x *SpanData) GetBrokerReceiveTimeUnixNano() int64 {
	if x != nil {
		return x.BrokerReceiveTimeUnixNano
	}
	return 0
}

func (x *SpanData) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SpanData) GetReplyToTopic() string {
	if x != nil && x.ReplyToTopic != nil {
		return *x.ReplyToTopic
	}
	return ""
}

func (x *SpanData) GetDeliveryMode() SpanData_DeliveryMode {
	if x != nil {
		return x.DeliveryMode
	}
	return SpanData_PERSISTENT
}

func (x *SpanData) GetRouterName() string {
	if x != nil {
		return x.RouterName
	}
	return ""
}

func (x *SpanData) GetMessageVpnName() string {
	if x != nil && x.MessageVpnName != nil {
		return *x.MessageVpnName
	}
	return ""
}

func (x *SpanData) GetSolosVersion() string {
	if x != nil {
		return x.SolosVersion
	}
	return ""
}

func (x *SpanData) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *SpanData) GetClientUsername() string {
	if x != nil {
		return x.ClientUsername
	}
	return ""
}

func (x *SpanData) GetHostIp() []byte {
	if x != nil {
		return x.HostIp
	}
	return nil
}

func (x *SpanData) GetHostPort() uint32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

func (x *SpanData) GetPeerIp() []byte {
	if x != nil {
		return x.PeerIp
	}
	return nil
}

func (x *SpanData) GetPeerPort() uint32 {
	if x != nil {
		return x.PeerPort
	}
	return 0
}

func (x *SpanData) GetReplicationGroupMessageId() []byte {
	if x != nil {
		return x.ReplicationGroupMessageId
	}
	return nil
}

func (x *SpanData) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *SpanData) GetProtocolVersion() string {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return ""
}

func (x *SpanData) GetDmqEligible() bool {
	if x != nil {
		return x.DmqEligible
	}
	return false
}

func (x *SpanData) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *SpanData) GetTtl() int64 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *SpanData) GetBinaryAttachmentSize() uint32 {
	if x != nil {
		return x.BinaryAttachmentSize
	}
	return 0
}

func (x *SpanData) GetXmlAttachmentSize() uint32 {
	if x != nil {
		return x.XmlAttachmentSize
	}
	return 0
}

func (x *SpanData) GetMetadataSize() uint32 {
	if x != nil {
		return x.MetadataSize
	}
	return 0
}

func (x *SpanData) GetApplicationMessageId() string {
	if x != nil && x.ApplicationMessageId != nil {
		return *x.ApplicationMessageId
	}
	return ""
}

func (x *SpanData) GetCorrelationId() string {
	if x != nil && x.CorrelationId != nil {
		return *x.CorrelationId
	}
	return ""
}

func (x *SpanData) GetUserProperties() map[string]*SpanData_UserPropertyValue {
	if x != nil {
		return x.UserProperties
	}
	return nil
}

func (x *SpanData) GetDroppedApplicationMessageProperties() bool {
	if x != nil {
		return x.DroppedApplicationMessageProperties
	}
	return false
}

func (x *SpanData) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *SpanData) GetTransactionEvent() *SpanData_TransactionEvent {
	if x != nil {
		return x.TransactionEvent
	}
	return nil
}

func (x *SpanData) GetEnqueueEvents() []*SpanData_EnqueueEvent {
	if x != nil {
		return x.EnqueueEvents
	}
	return nil
}

func (x *SpanData) GetDroppedEnqueueEventsSuccess() uint32 {
	if x != nil {
		return x.DroppedEnqueueEventsSuccess
	}
	return 0
}

func (x *SpanData) GetDroppedEnqueueEventsFailed() uint32 {
	if x != nil {
		return x.DroppedEnqueueEventsFailed
	}
	return 0
}

type SpanData_UserPropertyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This expresses a mapping from a Solace SDT type to a protobuf type.
	// The Solace SDT Types Map, Stream, and SMF are not supported. Other SDT
	// types from other protocols, such as AMQP symbol, timestamp, UUID, and
	// decimal types are not supported.
	//
	// Types that are assignable to Value:
	//
	//	*SpanData_UserPropertyValue_NullValue
	//	*SpanData_UserPropertyValue_BoolValue
	//	*SpanData_UserPropertyValue_Uint8Value
	//	*SpanData_UserPropertyValue_Uint16Value
	//	*SpanData_UserPropertyValue_Uint32Value
	//	*SpanData_UserPropertyValue_Uint64Value
	//	*SpanData_UserPropertyValue_Int8Value
	//	*SpanData_UserPropertyValue_Int16Value
	//	*SpanData_UserPropertyValue_Int32Value
	//	*SpanData_UserPropertyValue_Int64Value
	//	*SpanData_UserPropertyValue_CharacterValue
	//	*SpanData_UserPropertyValue_StringValue
	//	*SpanData_UserPropertyValue_ByteArrayValue
	//	*SpanData_UserPropertyValue_FloatValue
	//	*SpanData_UserPropertyValue_DoubleValue
	//	*SpanData_UserPropertyValue_DestinationValue
	Value isSpanData_UserPropertyValue_Value `protobuf_oneof:"value"`
}

func (x *SpanData_UserPropertyValue) Reset() {
	*x = SpanData_UserPropertyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receive_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_UserPropertyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_UserPropertyValue) ProtoMessage() {}

func (x *SpanData_UserPropertyValue) ProtoReflect() protoreflect.Message {
	mi := &file_receive_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_UserPropertyValue.ProtoReflect.Descriptor instead.
func (*SpanData_UserPropertyValue) Descriptor() ([]byte, []int) {
	return file_receive_v1_proto_rawDescGZIP(), []int{0, 1}
}

func (m *SpanData_UserPropertyValue) GetValue() isSpanData_UserPropertyValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *SpanData_UserPropertyValue) GetNullValue() []byte {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_NullValue); ok {
		return x.NullValue
	}
	return nil
}

func (x *SpanData_UserPropertyValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *SpanData_UserPropertyValue) GetUint8Value() uint32 {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_Uint8Value); ok {
		return x.Uint8Value
	}
	return 0
}

func (x *SpanData_UserPropertyValue) GetUint16Value() uint32 {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_Uint16Value); ok {
		return x.Uint16Value
	}
	return 0
}

func (x *SpanData_UserPropertyValue) GetUint32Value() uint32 {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *SpanData_UserPropertyValue) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *SpanData_UserPropertyValue) GetInt8Value() int32 {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_Int8Value); ok {
		return x.Int8Value
	}
	return 0
}

func (x *SpanData_UserPropertyValue) GetInt16Value() int32 {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_Int16Value); ok {
		return x.Int16Value
	}
	return 0
}

func (x *SpanData_UserPropertyValue) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *SpanData_UserPropertyValue) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *SpanData_UserPropertyValue) GetCharacterValue() uint32 {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_CharacterValue); ok {
		return x.CharacterValue
	}
	return 0
}

func (x *SpanData_UserPropertyValue) GetStringValue() string {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *SpanData_UserPropertyValue) GetByteArrayValue() []byte {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_ByteArrayValue); ok {
		return x.ByteArrayValue
	}
	return nil
}

func (x *SpanData_UserPropertyValue) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *SpanData_UserPropertyValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *SpanData_UserPropertyValue) GetDestinationValue() string {
	if x, ok := x.GetValue().(*SpanData_UserPropertyValue_DestinationValue); ok {
		return x.DestinationValue
	}
	return ""
}

type isSpanData_UserPropertyValue_Value interface {
	isSpanData_UserPropertyValue_Value()
}

type SpanData_UserPropertyValue_NullValue struct {
	NullValue []byte `protobuf:"bytes,1,opt,name=null_value,json=nullValue,proto3,oneof"`
}

type SpanData_UserPropertyValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type SpanData_UserPropertyValue_Uint8Value struct {
	Uint8Value uint32 `protobuf:"varint,3,opt,name=uint8_value,json=uint8Value,proto3,oneof"`
}

type SpanData_UserPropertyValue_Uint16Value struct {
	Uint16Value uint32 `protobuf:"varint,4,opt,name=uint16_value,json=uint16Value,proto3,oneof"`
}

type SpanData_UserPropertyValue_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type SpanData_UserPropertyValue_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type SpanData_UserPropertyValue_Int8Value struct {
	Int8Value int32 `protobuf:"zigzag32,7,opt,name=int8_value,json=int8Value,proto3,oneof"`
}

type SpanData_UserPropertyValue_Int16Value struct {
	Int16Value int32 `protobuf:"zigzag32,8,opt,name=int16_value,json=int16Value,proto3,oneof"`
}

type SpanData_UserPropertyValue_Int32Value struct {
	Int32Value int32 `protobuf:"zigzag32,9,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type SpanData_UserPropertyValue_Int64Value struct {
	Int64Value int64 `protobuf:"zigzag64,10,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type SpanData_UserPropertyValue_CharacterValue struct {
	CharacterValue uint32 `protobuf:"varint,11,opt,name=character_value,json=characterValue,proto3,oneof"`
}

type SpanData_UserPropertyValue_StringValue struct {
	StringValue string `protobuf:"bytes,12,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type SpanData_UserPropertyValue_ByteArrayValue struct {
	ByteArrayValue []byte `protobuf:"bytes,13,opt,name=byteArray_value,json=byteArrayValue,proto3,oneof"`
}

type SpanData_UserPropertyValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,14,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type SpanData_UserPropertyValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,15,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type SpanData_UserPropertyValue_DestinationValue struct {
	DestinationValue string `protobuf:"bytes,16,opt,name=destination_value,json=destinationValue,proto3,oneof"`
}

func (*SpanData_UserPropertyValue_NullValue) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_BoolValue) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_Uint8Value) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_Uint16Value) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_Uint32Value) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_Uint64Value) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_Int8Value) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_Int16Value) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_Int32Value) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_Int64Value) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_CharacterValue) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_StringValue) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_ByteArrayValue) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_FloatValue) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_DoubleValue) isSpanData_UserPropertyValue_Value() {}

func (*SpanData_UserPropertyValue_DestinationValue) isSpanData_UserPropertyValue_Value() {}

// When a message has a transaction event, it indicates the message is part of
// a transaction. The timestamp indicates when the *initial* decision was made
// for this particular message as part of the transaction operation. It
// doesn't indicate the final state of the transaction. This isn't known until
// all messages that are part of the transaction have been processed.
//
// Note it is possible that, for example, after deciding a message will be
// committed that a subsequent message in the transaction will cause the
// transaction to fail. This will result in a successful receive span with a
// COMMIT transaction event with no error. The fact that the message is not
// successfully processed will be indicated by a child span of this span. At
// the current time, these subsequent spans are not yet generated and will be
// added in a future release. In the meantime, the transaction_id can be used
// to find out if there were any errored messages in the transaction. A single
// errored message indicates the entire transaction failed.
//
// Also note that since the receive span is only generated either on commit or
// when the message is discarded, certain transaction operations are only
// observed in failed receive spans. For example, when XA End or XA Prepare
// operations succeed, the message is neither discarded nor committed. It is
// only if these operations fail that the transaction is rolled back and an
// errored receive span is generated.
type SpanData_TransactionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUnixNano int64                               `protobuf:"fixed64,1,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	Type         SpanData_TransactionEvent_Type      `protobuf:"varint,2,opt,name=type,proto3,enum=solace.messaging.proto.broker.trace.receive.v1.SpanData_TransactionEvent_Type" json:"type,omitempty"`
	Initiator    SpanData_TransactionEvent_Initiator `protobuf:"varint,3,opt,name=initiator,proto3,enum=solace.messaging.proto.broker.trace.receive.v1.SpanData_TransactionEvent_Initiator" json:"initiator,omitempty"`
	// Types that are assignable to TransactionId:
	//
	//	*SpanData_TransactionEvent_Xid_
	//	*SpanData_TransactionEvent_LocalId
	TransactionId    isSpanData_TransactionEvent_TransactionId `protobuf_oneof:"transaction_id"`
	ErrorDescription *string                                   `protobuf:"bytes,6,opt,name=error_description,json=errorDescription,proto3,oneof" json:"error_description,omitempty"`
}

func (x *SpanData_TransactionEvent) Reset() {
	*x = SpanData_TransactionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receive_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_TransactionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_TransactionEvent) ProtoMessage() {}

func (x *SpanData_TransactionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_receive_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_TransactionEvent.ProtoReflect.Descriptor instead.
func (*SpanData_TransactionEvent) Descriptor() ([]byte, []int) {
	return file_receive_v1_proto_rawDescGZIP(), []int{0, 2}
}

func (x *SpanData_TransactionEvent) GetTimeUnixNano() int64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

func (x *SpanData_TransactionEvent) GetType() SpanData_TransactionEvent_Type {
	if x != nil {
		return x.Type
	}
	return SpanData_TransactionEvent_COMMIT
}

func (x *SpanData_TransactionEvent) GetInitiator() SpanData_TransactionEvent_Initiator {
	if x != nil {
		return x.Initiator
	}
	return SpanData_TransactionEvent_CLIENT
}

func (m *SpanData_TransactionEvent) GetTransactionId() isSpanData_TransactionEvent_TransactionId {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (x *SpanData_TransactionEvent) GetXid() *SpanData_TransactionEvent_Xid {
	if x, ok := x.GetTransactionId().(*SpanData_TransactionEvent_Xid_); ok {
		return x.Xid
	}
	return nil
}

func (x *SpanData_TransactionEvent) GetLocalId() *SpanData_TransactionEvent_LocalTransactionId {
	if x, ok := x.GetTransactionId().(*SpanData_TransactionEvent_LocalId); ok {
		return x.LocalId
	}
	return nil
}

func (x *SpanData_TransactionEvent) GetErrorDescription() string {
	if x != nil && x.ErrorDescription != nil {
		return *x.ErrorDescription
	}
	return ""
}

type isSpanData_TransactionEvent_TransactionId interface {
	isSpanData_TransactionEvent_TransactionId()
}

type SpanData_TransactionEvent_Xid_ struct {
	Xid *SpanData_TransactionEvent_Xid `protobuf:"bytes,4,opt,name=xid,proto3,oneof"`
}

type SpanData_TransactionEvent_LocalId struct {
	LocalId *SpanData_TransactionEvent_LocalTransactionId `protobuf:"bytes,5,opt,name=local_id,json=localId,proto3,oneof"`
}

func (*SpanData_TransactionEvent_Xid_) isSpanData_TransactionEvent_TransactionId() {}

func (*SpanData_TransactionEvent_LocalId) isSpanData_TransactionEvent_TransactionId() {}

// An enqueue event represents the broker's decision to enqueue a message
// when processing a received message. If there is no error_description,
// the broker has successfully processed the message and the enqueue events
// indicate where the message has been enqueued. The presence of an
// error_description indicates the message will not be enqueued to dest even
// though the message matched the destination. If rejects_all_enqueues is set,
// it means the message is not enqueued to any destinations, regardless of
// what other enqueue events may indicate and the message is rejected.
type SpanData_EnqueueEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp when the enqueue decision was made
	TimeUnixNano int64 `protobuf:"fixed64,1,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	// Queues and Topic Endpoints with the same name can simultaneously co-exist
	// on the broker, so there needs to be a way of disambiguating the type of
	// the enqueue destination. The "oneof" construct here addresses this.
	//
	// Types that are assignable to Dest:
	//
	//	*SpanData_EnqueueEvent_QueueName
	//	*SpanData_EnqueueEvent_TopicEndpointName
	Dest isSpanData_EnqueueEvent_Dest `protobuf_oneof:"dest"`
	// The presence of an error_description indicates the message matched the
	// destination, but it is not being enqueued due to the description.
	ErrorDescription *string `protobuf:"bytes,4,opt,name=error_description,json=errorDescription,proto3,oneof" json:"error_description,omitempty"`
	// This flag being set on one or more enqueue events for a message implies
	// that the message is not enqueued to any destination, regardless of the
	// presence of successful enqueue events in the span.
	//
	// This will never be set when there is not an error_description present. If
	// this is set, it indicates that the error described by error_description
	// is a cause for the message to be rejected.
	//
	// Rejected non-transacted messages cause the message to be nacked to the
	// publisher and rejected transacted messages result in a change in
	// transacted session state that will cause a future commit attempt to fail.
	//
	// The cause for message rejection indicated to the client in either a
	// message nack or commit failure response is the error_description of the
	// first enqueue event that has this flag set.
	RejectsAllEnqueues bool `protobuf:"varint,5,opt,name=rejects_all_enqueues,json=rejectsAllEnqueues,proto3" json:"rejects_all_enqueues,omitempty"`
	// If the message is enqueued to a partitioned queue, this field indicates
	// the partition number the message is enqueued to.
	PartitionNumber *uint32 `protobuf:"varint,6,opt,name=partition_number,json=partitionNumber,proto3,oneof" json:"partition_number,omitempty"`
	// If the message will have a TTL other than the value indicated by the
	// receive span containing this event, it is indicated with this value.
	Ttl *int64 `protobuf:"varint,7,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
}

func (x *SpanData_EnqueueEvent) Reset() {
	*x = SpanData_EnqueueEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receive_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_EnqueueEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_EnqueueEvent) ProtoMessage() {}

func (x *SpanData_EnqueueEvent) ProtoReflect() protoreflect.Message {
	mi := &file_receive_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_EnqueueEvent.ProtoReflect.Descriptor instead.
func (*SpanData_EnqueueEvent) Descriptor() ([]byte, []int) {
	return file_receive_v1_proto_rawDescGZIP(), []int{0, 3}
}

func (x *SpanData_EnqueueEvent) GetTimeUnixNano() int64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

func (m *SpanData_EnqueueEvent) GetDest() isSpanData_EnqueueEvent_Dest {
	if m != nil {
		return m.Dest
	}
	return nil
}

func (x *SpanData_EnqueueEvent) GetQueueName() string {
	if x, ok := x.GetDest().(*SpanData_EnqueueEvent_QueueName); ok {
		return x.QueueName
	}
	return ""
}

func (x *SpanData_EnqueueEvent) GetTopicEndpointName() string {
	if x, ok := x.GetDest().(*SpanData_EnqueueEvent_TopicEndpointName); ok {
		return x.TopicEndpointName
	}
	return ""
}

func (x *SpanData_EnqueueEvent) GetErrorDescription() string {
	if x != nil && x.ErrorDescription != nil {
		return *x.ErrorDescription
	}
	return ""
}

func (x *SpanData_EnqueueEvent) GetRejectsAllEnqueues() bool {
	if x != nil {
		return x.RejectsAllEnqueues
	}
	return false
}

func (x *SpanData_EnqueueEvent) GetPartitionNumber() uint32 {
	if x != nil && x.PartitionNumber != nil {
		return *x.PartitionNumber
	}
	return 0
}

func (x *SpanData_EnqueueEvent) GetTtl() int64 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

type isSpanData_EnqueueEvent_Dest interface {
	isSpanData_EnqueueEvent_Dest()
}

type SpanData_EnqueueEvent_QueueName struct {
	QueueName string `protobuf:"bytes,2,opt,name=queue_name,json=queueName,proto3,oneof"`
}

type SpanData_EnqueueEvent_TopicEndpointName struct {
	TopicEndpointName string `protobuf:"bytes,3,opt,name=topic_endpoint_name,json=topicEndpointName,proto3,oneof"`
}

func (*SpanData_EnqueueEvent_QueueName) isSpanData_EnqueueEvent_Dest() {}

func (*SpanData_EnqueueEvent_TopicEndpointName) isSpanData_EnqueueEvent_Dest() {}

type SpanData_TransactionEvent_Xid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatId        int32  `protobuf:"varint,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	BranchQualifier []byte `protobuf:"bytes,2,opt,name=branch_qualifier,json=branchQualifier,proto3" json:"branch_qualifier,omitempty"`
	GlobalId        []byte `protobuf:"bytes,3,opt,name=global_id,json=globalId,proto3" json:"global_id,omitempty"`
}

func (x *SpanData_TransactionEvent_Xid) Reset() {
	*x = SpanData_TransactionEvent_Xid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receive_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_TransactionEvent_Xid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_TransactionEvent_Xid) ProtoMessage() {}

func (x *SpanData_TransactionEvent_Xid) ProtoReflect() protoreflect.Message {
	mi := &file_receive_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_TransactionEvent_Xid.ProtoReflect.Descriptor instead.
func (*SpanData_TransactionEvent_Xid) Descriptor() ([]byte, []int) {
	return file_receive_v1_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *SpanData_TransactionEvent_Xid) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *SpanData_TransactionEvent_Xid) GetBranchQualifier() []byte {
	if x != nil {
		return x.BranchQualifier
	}
	return nil
}

func (x *SpanData_TransactionEvent_Xid) GetGlobalId() []byte {
	if x != nil {
		return x.GlobalId
	}
	return nil
}

type SpanData_TransactionEvent_LocalTransactionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId uint32 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	SessionId     uint32 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SessionName   string `protobuf:"bytes,3,opt,name=session_name,json=sessionName,proto3" json:"session_name,omitempty"`
}

func (x *SpanData_TransactionEvent_LocalTransactionId) Reset() {
	*x = SpanData_TransactionEvent_LocalTransactionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receive_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_TransactionEvent_LocalTransactionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_TransactionEvent_LocalTransactionId) ProtoMessage() {}

func (x *SpanData_TransactionEvent_LocalTransactionId) ProtoReflect() protoreflect.Message {
	mi := &file_receive_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_TransactionEvent_LocalTransactionId.ProtoReflect.Descriptor instead.
func (*SpanData_TransactionEvent_LocalTransactionId) Descriptor() ([]byte, []int) {
	return file_receive_v1_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *SpanData_TransactionEvent_LocalTransactionId) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *SpanData_TransactionEvent_LocalTransactionId) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SpanData_TransactionEvent_LocalTransactionId) GetSessionName() string {
	if x != nil {
		return x.SessionName
	}
	return ""
}

var File_receive_v1_proto protoreflect.FileDescriptor

var file_receive_v1_proto_rawDesc = []byte{
	0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2e,
	0x76, 0x31, 0x22, 0xcb, 0x21, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x70, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78,
	0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x10,
	0x52, 0x0f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e,
	0x6f, 0x12, 0x40, 0x0a, 0x1d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61,
	0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x52, 0x19, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e,
	0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x88, 0x01, 0x01, 0x12, 0x6a, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x73, 0x6f,
	0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x70, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x70, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c, 0x6f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x1c, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x05, 0x52, 0x19, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2e, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6d, 0x71, 0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x6d, 0x71, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x07, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x16, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x78, 0x6d, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x78, 0x6d, 0x6c,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x14, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x75, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x53, 0x0a, 0x26, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x23, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x7b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x0b, 0x52, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x6c, 0x0a, 0x0e, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x0d, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43,
	0x0a, 0x1e, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a, 0x8d, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x60, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x4a, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xec, 0x04, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x38, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x31,
	0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x38, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x38, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x62, 0x79,
	0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00,
	0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a,
	0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc2, 0x07, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f,
	0x12, 0x62, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4e,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x71, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x61, 0x0a, 0x03, 0x78, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x58, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x79, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x5c, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x6a, 0x0a, 0x03, 0x58, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x49, 0x64, 0x1a, 0x7d, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x05, 0x22, 0x2e, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x52,
	0x10, 0x02, 0x42, 0x10, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xed, 0x02, 0x0a, 0x0c, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x10, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e,
	0x6f, 0x12, 0x1f, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x11, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x41, 0x6c, 0x6c,
	0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c, 0x22, 0x3e, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45,
	0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f,
	0x4e, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x62, 0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x19, 0x0a, 0x17,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_receive_v1_proto_rawDescOnce sync.Once
	file_receive_v1_proto_rawDescData = file_receive_v1_proto_rawDesc
)

func file_receive_v1_proto_rawDescGZIP() []byte {
	file_receive_v1_proto_rawDescOnce.Do(func() {
		file_receive_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_receive_v1_proto_rawDescData)
	})
	return file_receive_v1_proto_rawDescData
}

var file_receive_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_receive_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_receive_v1_proto_goTypes = []interface{}{
	(SpanData_DeliveryMode)(0),                           // 0: solace.messaging.proto.broker.trace.receive.v1.SpanData.DeliveryMode
	(SpanData_TransactionEvent_Type)(0),                  // 1: solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.Type
	(SpanData_TransactionEvent_Initiator)(0),             // 2: solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.Initiator
	(*SpanData)(nil),                                     // 3: solace.messaging.proto.broker.trace.receive.v1.SpanData
	nil,                                                  // 4: solace.messaging.proto.broker.trace.receive.v1.SpanData.UserPropertiesEntry
	(*SpanData_UserPropertyValue)(nil),                   // 5: solace.messaging.proto.broker.trace.receive.v1.SpanData.UserPropertyValue
	(*SpanData_TransactionEvent)(nil),                    // 6: solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent
	(*SpanData_EnqueueEvent)(nil),                        // 7: solace.messaging.proto.broker.trace.receive.v1.SpanData.EnqueueEvent
	(*SpanData_TransactionEvent_Xid)(nil),                // 8: solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.Xid
	(*SpanData_TransactionEvent_LocalTransactionId)(nil), // 9: solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.LocalTransactionId
}
var file_receive_v1_proto_depIdxs = []int32{
	0, // 0: solace.messaging.proto.broker.trace.receive.v1.SpanData.delivery_mode:type_name -> solace.messaging.proto.broker.trace.receive.v1.SpanData.DeliveryMode
	4, // 1: solace.messaging.proto.broker.trace.receive.v1.SpanData.user_properties:type_name -> solace.messaging.proto.broker.trace.receive.v1.SpanData.UserPropertiesEntry
	6, // 2: solace.messaging.proto.broker.trace.receive.v1.SpanData.transaction_event:type_name -> solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent
	7, // 3: solace.messaging.proto.broker.trace.receive.v1.SpanData.enqueue_events:type_name -> solace.messaging.proto.broker.trace.receive.v1.SpanData.EnqueueEvent
	5, // 4: solace.messaging.proto.broker.trace.receive.v1.SpanData.UserPropertiesEntry.value:type_name -> solace.messaging.proto.broker.trace.receive.v1.SpanData.UserPropertyValue
	1, // 5: solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.type:type_name -> solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.Type
	2, // 6: solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.initiator:type_name -> solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.Initiator
	8, // 7: solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.xid:type_name -> solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.Xid
	9, // 8: solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.local_id:type_name -> solace.messaging.proto.broker.trace.receive.v1.SpanData.TransactionEvent.LocalTransactionId
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_receive_v1_proto_init() }
func file_receive_v1_proto_init() {
	if File_receive_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_receive_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receive_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_UserPropertyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receive_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_TransactionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receive_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_EnqueueEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receive_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_TransactionEvent_Xid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receive_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_TransactionEvent_LocalTransactionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_receive_v1_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_receive_v1_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SpanData_UserPropertyValue_NullValue)(nil),
		(*SpanData_UserPropertyValue_BoolValue)(nil),
		(*SpanData_UserPropertyValue_Uint8Value)(nil),
		(*SpanData_UserPropertyValue_Uint16Value)(nil),
		(*SpanData_UserPropertyValue_Uint32Value)(nil),
		(*SpanData_UserPropertyValue_Uint64Value)(nil),
		(*SpanData_UserPropertyValue_Int8Value)(nil),
		(*SpanData_UserPropertyValue_Int16Value)(nil),
		(*SpanData_UserPropertyValue_Int32Value)(nil),
		(*SpanData_UserPropertyValue_Int64Value)(nil),
		(*SpanData_UserPropertyValue_CharacterValue)(nil),
		(*SpanData_UserPropertyValue_StringValue)(nil),
		(*SpanData_UserPropertyValue_ByteArrayValue)(nil),
		(*SpanData_UserPropertyValue_FloatValue)(nil),
		(*SpanData_UserPropertyValue_DoubleValue)(nil),
		(*SpanData_UserPropertyValue_DestinationValue)(nil),
	}
	file_receive_v1_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SpanData_TransactionEvent_Xid_)(nil),
		(*SpanData_TransactionEvent_LocalId)(nil),
	}
	file_receive_v1_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*SpanData_EnqueueEvent_QueueName)(nil),
		(*SpanData_EnqueueEvent_TopicEndpointName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_receive_v1_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_receive_v1_proto_goTypes,
		DependencyIndexes: file_receive_v1_proto_depIdxs,
		EnumInfos:         file_receive_v1_proto_enumTypes,
		MessageInfos:      file_receive_v1_proto_msgTypes,
	}.Build()
	File_receive_v1_proto = out.File
	file_receive_v1_proto_rawDesc = nil
	file_receive_v1_proto_goTypes = nil
	file_receive_v1_proto_depIdxs = nil
}
