// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v5.26.1
// source: egress_v1.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpanData_SendSpan_Outcome int32

const (
	SpanData_SendSpan_ACCEPTED                  SpanData_SendSpan_Outcome = 0
	SpanData_SendSpan_REJECTED                  SpanData_SendSpan_Outcome = 1
	SpanData_SendSpan_RELEASED                  SpanData_SendSpan_Outcome = 2
	SpanData_SendSpan_DELIVERY_FAILED           SpanData_SendSpan_Outcome = 3
	SpanData_SendSpan_FLOW_UNBOUND              SpanData_SendSpan_Outcome = 4
	SpanData_SendSpan_TRANSACTION_COMMIT        SpanData_SendSpan_Outcome = 5
	SpanData_SendSpan_TRANSACTION_COMMIT_FAILED SpanData_SendSpan_Outcome = 6
	SpanData_SendSpan_TRANSACTION_ROLLBACK      SpanData_SendSpan_Outcome = 7
)

// Enum value maps for SpanData_SendSpan_Outcome.
var (
	SpanData_SendSpan_Outcome_name = map[int32]string{
		0: "ACCEPTED",
		1: "REJECTED",
		2: "RELEASED",
		3: "DELIVERY_FAILED",
		4: "FLOW_UNBOUND",
		5: "TRANSACTION_COMMIT",
		6: "TRANSACTION_COMMIT_FAILED",
		7: "TRANSACTION_ROLLBACK",
	}
	SpanData_SendSpan_Outcome_value = map[string]int32{
		"ACCEPTED":                  0,
		"REJECTED":                  1,
		"RELEASED":                  2,
		"DELIVERY_FAILED":           3,
		"FLOW_UNBOUND":              4,
		"TRANSACTION_COMMIT":        5,
		"TRANSACTION_COMMIT_FAILED": 6,
		"TRANSACTION_ROLLBACK":      7,
	}
)

func (x SpanData_SendSpan_Outcome) Enum() *SpanData_SendSpan_Outcome {
	p := new(SpanData_SendSpan_Outcome)
	*p = x
	return p
}

func (x SpanData_SendSpan_Outcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanData_SendSpan_Outcome) Descriptor() protoreflect.EnumDescriptor {
	return file_egress_v1_proto_enumTypes[0].Descriptor()
}

func (SpanData_SendSpan_Outcome) Type() protoreflect.EnumType {
	return &file_egress_v1_proto_enumTypes[0]
}

func (x SpanData_SendSpan_Outcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanData_SendSpan_Outcome.Descriptor instead.
func (SpanData_SendSpan_Outcome) EnumDescriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 1, 0}
}

type SpanData_TransactionEvent_Type int32

const (
	// COMMIT and ROLLBACK are always initiated by either a CLIENT or ADMIN.
	// The initiator is ADMIN when the management interface is used to
	// to perform a heuristic commit or rollback.
	SpanData_TransactionEvent_COMMIT   SpanData_TransactionEvent_Type = 0
	SpanData_TransactionEvent_ROLLBACK SpanData_TransactionEvent_Type = 1
	// PREPARE and END can only occur with a CLIENT initiator, and spans for
	// these operations are only generated if the operation fails. Therefore,
	// the error_description of the TransactionEvent will always be present
	// for END and PREPARE.
	SpanData_TransactionEvent_END     SpanData_TransactionEvent_Type = 2
	SpanData_TransactionEvent_PREPARE SpanData_TransactionEvent_Type = 3
	// The initiator of a SESSION_TIMEOUT is always BROKER. All messages
	// received as part of the transaction are discarded.
	SpanData_TransactionEvent_SESSION_TIMEOUT SpanData_TransactionEvent_Type = 4
	// The initiator of ROLLBACK_ONLY is always BROKER. The first such event
	// in a transaction always has an error_description in the span,
	// indicating there was a problem processing the message when it was
	// received, and the message is being discarded. This also transitions
	// the transaction itself to a "rollback only" state, which causes
	// all subsequent messages received as part of the transaction to also
	// be discarded. Spans generated by these subsequent discards will not
	// have the span's error_description set, but all ROLLBACK_ONLY
	// transaction events will have an error_description set, which indicate
	// the transaction's error.
	//
	// Since the only record of these messages in the context of the
	// transaction has been discarded, no further span can be generated in
	// the context of a client, admin, or session timeout operation. When a
	// subsequent operation such as rollback or commit occurs on a
	// transaction marked rollback only, only messages received prior to the
	// error triggering the transition to rollback only will generate
	// receive spans.
	SpanData_TransactionEvent_ROLLBACK_ONLY SpanData_TransactionEvent_Type = 5
)

// Enum value maps for SpanData_TransactionEvent_Type.
var (
	SpanData_TransactionEvent_Type_name = map[int32]string{
		0: "COMMIT",
		1: "ROLLBACK",
		2: "END",
		3: "PREPARE",
		4: "SESSION_TIMEOUT",
		5: "ROLLBACK_ONLY",
	}
	SpanData_TransactionEvent_Type_value = map[string]int32{
		"COMMIT":          0,
		"ROLLBACK":        1,
		"END":             2,
		"PREPARE":         3,
		"SESSION_TIMEOUT": 4,
		"ROLLBACK_ONLY":   5,
	}
)

func (x SpanData_TransactionEvent_Type) Enum() *SpanData_TransactionEvent_Type {
	p := new(SpanData_TransactionEvent_Type)
	*p = x
	return p
}

func (x SpanData_TransactionEvent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanData_TransactionEvent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_egress_v1_proto_enumTypes[1].Descriptor()
}

func (SpanData_TransactionEvent_Type) Type() protoreflect.EnumType {
	return &file_egress_v1_proto_enumTypes[1]
}

func (x SpanData_TransactionEvent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanData_TransactionEvent_Type.Descriptor instead.
func (SpanData_TransactionEvent_Type) EnumDescriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 13, 0}
}

type SpanData_TransactionEvent_Initiator int32

const (
	SpanData_TransactionEvent_CLIENT SpanData_TransactionEvent_Initiator = 0
	SpanData_TransactionEvent_ADMIN  SpanData_TransactionEvent_Initiator = 1
	SpanData_TransactionEvent_BROKER SpanData_TransactionEvent_Initiator = 2
)

// Enum value maps for SpanData_TransactionEvent_Initiator.
var (
	SpanData_TransactionEvent_Initiator_name = map[int32]string{
		0: "CLIENT",
		1: "ADMIN",
		2: "BROKER",
	}
	SpanData_TransactionEvent_Initiator_value = map[string]int32{
		"CLIENT": 0,
		"ADMIN":  1,
		"BROKER": 2,
	}
)

func (x SpanData_TransactionEvent_Initiator) Enum() *SpanData_TransactionEvent_Initiator {
	p := new(SpanData_TransactionEvent_Initiator)
	*p = x
	return p
}

func (x SpanData_TransactionEvent_Initiator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpanData_TransactionEvent_Initiator) Descriptor() protoreflect.EnumDescriptor {
	return file_egress_v1_proto_enumTypes[2].Descriptor()
}

func (SpanData_TransactionEvent_Initiator) Type() protoreflect.EnumType {
	return &file_egress_v1_proto_enumTypes[2]
}

func (x SpanData_TransactionEvent_Initiator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpanData_TransactionEvent_Initiator.Descriptor instead.
func (SpanData_TransactionEvent_Initiator) EnumDescriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 13, 1}
}

// Messages with the following topic contain a message matching this
// specification:
// _telemetry/broker/trace/egress/v1[/additional/topic/levels]
// Note that the topic allows for additional topic levels to be added in the
// future. Receiving clients must not assume there are no additional topic
// levels.
//
// This message describes telemetry data that a Solace PubSub+ broker captures
// in the egress portion of its data path.
//
// Fields with names that end in "time_unix_nano" are 64-bit timestamps, in
// nanoseconds, since midnight, Jan. 1, 1970 UTC.
type SpanData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EgressSpans []*SpanData_EgressSpan `protobuf:"bytes,1,rep,name=egress_spans,json=egressSpans,proto3" json:"egress_spans,omitempty"`
	// The router-name of the broker generating this message at the time the
	// message was generated.
	RouterName string `protobuf:"bytes,2,opt,name=router_name,json=routerName,proto3" json:"router_name,omitempty"`
	// The broker's message-vpn name. This field may be removed in the future
	// without a major version change since the field is specified as optional.
	//
	// Rather than rely on this field, receiving clients should obtain the VPN
	// by using an SMF API to extract the VPN_NAME_IN_USE from the API's Session
	// object. The message_vpn_name of all messages received from via an SMF
	// API's session will match the session's VPN_NAME_IN_USE.
	MessageVpnName *string `protobuf:"bytes,3,opt,name=message_vpn_name,json=messageVpnName,proto3,oneof" json:"message_vpn_name,omitempty"`
	// The SolOS version of the broker generating the message. All elements of
	// egress_spans will always have been created by the same broker version.
	SolosVersion string `protobuf:"bytes,4,opt,name=solos_version,json=solosVersion,proto3" json:"solos_version,omitempty"`
}

func (x *SpanData) Reset() {
	*x = SpanData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData) ProtoMessage() {}

func (x *SpanData) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData.ProtoReflect.Descriptor instead.
func (*SpanData) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0}
}

func (x *SpanData) GetEgressSpans() []*SpanData_EgressSpan {
	if x != nil {
		return x.EgressSpans
	}
	return nil
}

func (x *SpanData) GetRouterName() string {
	if x != nil {
		return x.RouterName
	}
	return ""
}

func (x *SpanData) GetMessageVpnName() string {
	if x != nil && x.MessageVpnName != nil {
		return *x.MessageVpnName
	}
	return ""
}

func (x *SpanData) GetSolosVersion() string {
	if x != nil {
		return x.SolosVersion
	}
	return ""
}

type SpanData_EgressSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 16-byte globally unique trace ID. Any two spans with the same trace ID
	// are part of the same trace.
	TraceId []byte `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// 8-byte span ID, unique within the scope of a trace.
	SpanId []byte `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// If not present, this is a root span. If present, this is an 8-byte span
	// ID of the parent span.
	ParentSpanId []byte `protobuf:"bytes,3,opt,name=parent_span_id,json=parentSpanId,proto3,oneof" json:"parent_span_id,omitempty"`
	// The start and end timestamps of the receive span. The start of the span
	// is when Guaranteed Messaging processing begins in the broker.
	StartTimeUnixNano int64                      `protobuf:"fixed64,4,opt,name=start_time_unix_nano,json=startTimeUnixNano,proto3" json:"start_time_unix_nano,omitempty"`
	EndTimeUnixNano   int64                      `protobuf:"fixed64,5,opt,name=end_time_unix_nano,json=endTimeUnixNano,proto3" json:"end_time_unix_nano,omitempty"`
	TransactionEvent  *SpanData_TransactionEvent `protobuf:"bytes,6,opt,name=transaction_event,json=transactionEvent,proto3,oneof" json:"transaction_event,omitempty"`
	ErrorDescription  *string                    `protobuf:"bytes,7,opt,name=error_description,json=errorDescription,proto3,oneof" json:"error_description,omitempty"`
	// Types that are assignable to TypeData:
	//
	//	*SpanData_EgressSpan_SendSpan
	//	*SpanData_EgressSpan_DeleteSpan
	TypeData isSpanData_EgressSpan_TypeData `protobuf_oneof:"type_data"`
}

func (x *SpanData_EgressSpan) Reset() {
	*x = SpanData_EgressSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_EgressSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_EgressSpan) ProtoMessage() {}

func (x *SpanData_EgressSpan) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_EgressSpan.ProtoReflect.Descriptor instead.
func (*SpanData_EgressSpan) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 0}
}

func (x *SpanData_EgressSpan) GetTraceId() []byte {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *SpanData_EgressSpan) GetSpanId() []byte {
	if x != nil {
		return x.SpanId
	}
	return nil
}

func (x *SpanData_EgressSpan) GetParentSpanId() []byte {
	if x != nil {
		return x.ParentSpanId
	}
	return nil
}

func (x *SpanData_EgressSpan) GetStartTimeUnixNano() int64 {
	if x != nil {
		return x.StartTimeUnixNano
	}
	return 0
}

func (x *SpanData_EgressSpan) GetEndTimeUnixNano() int64 {
	if x != nil {
		return x.EndTimeUnixNano
	}
	return 0
}

func (x *SpanData_EgressSpan) GetTransactionEvent() *SpanData_TransactionEvent {
	if x != nil {
		return x.TransactionEvent
	}
	return nil
}

func (x *SpanData_EgressSpan) GetErrorDescription() string {
	if x != nil && x.ErrorDescription != nil {
		return *x.ErrorDescription
	}
	return ""
}

func (m *SpanData_EgressSpan) GetTypeData() isSpanData_EgressSpan_TypeData {
	if m != nil {
		return m.TypeData
	}
	return nil
}

func (x *SpanData_EgressSpan) GetSendSpan() *SpanData_SendSpan {
	if x, ok := x.GetTypeData().(*SpanData_EgressSpan_SendSpan); ok {
		return x.SendSpan
	}
	return nil
}

func (x *SpanData_EgressSpan) GetDeleteSpan() *SpanData_DeleteSpan {
	if x, ok := x.GetTypeData().(*SpanData_EgressSpan_DeleteSpan); ok {
		return x.DeleteSpan
	}
	return nil
}

type isSpanData_EgressSpan_TypeData interface {
	isSpanData_EgressSpan_TypeData()
}

type SpanData_EgressSpan_SendSpan struct {
	SendSpan *SpanData_SendSpan `protobuf:"bytes,8,opt,name=send_span,json=sendSpan,proto3,oneof"`
}

type SpanData_EgressSpan_DeleteSpan struct {
	DeleteSpan *SpanData_DeleteSpan `protobuf:"bytes,9,opt,name=delete_span,json=deleteSpan,proto3,oneof"`
}

func (*SpanData_EgressSpan_SendSpan) isSpanData_EgressSpan_TypeData() {}

func (*SpanData_EgressSpan_DeleteSpan) isSpanData_EgressSpan_TypeData() {}

// This message contains information unique to a SendSpan.
type SpanData_SendSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue or topic endpoint the message is being delivered
	// from.
	//
	// Types that are assignable to Source:
	//
	//	*SpanData_SendSpan_QueueName
	//	*SpanData_SendSpan_TopicEndpointName
	Source                 isSpanData_SendSpan_Source `protobuf_oneof:"source"`
	Outcome                SpanData_SendSpan_Outcome  `protobuf:"varint,3,opt,name=outcome,proto3,enum=solace.messaging.proto.broker.trace.egress.v1.SpanData_SendSpan_Outcome" json:"outcome,omitempty"`
	ReplayedMsg            bool                       `protobuf:"varint,4,opt,name=replayed_msg,json=replayedMsg,proto3" json:"replayed_msg,omitempty"`
	ConsumerClientUsername string                     `protobuf:"bytes,5,opt,name=consumer_client_username,json=consumerClientUsername,proto3" json:"consumer_client_username,omitempty"`
	ConsumerClientName     string                     `protobuf:"bytes,6,opt,name=consumer_client_name,json=consumerClientName,proto3" json:"consumer_client_name,omitempty"`
	Protocol               string                     `protobuf:"bytes,7,opt,name=protocol,proto3" json:"protocol,omitempty"`
	ProtocolVersion        *string                    `protobuf:"bytes,8,opt,name=protocol_version,json=protocolVersion,proto3,oneof" json:"protocol_version,omitempty"`
	// Partition number of the queue the message is being delivered from,
	// if the associated queue is a partitioned queue
	PartitionNumber *uint32 `protobuf:"varint,9,opt,name=partition_number,json=partitionNumber,proto3,oneof" json:"partition_number,omitempty"`
}

func (x *SpanData_SendSpan) Reset() {
	*x = SpanData_SendSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_SendSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_SendSpan) ProtoMessage() {}

func (x *SpanData_SendSpan) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_SendSpan.ProtoReflect.Descriptor instead.
func (*SpanData_SendSpan) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 1}
}

func (m *SpanData_SendSpan) GetSource() isSpanData_SendSpan_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *SpanData_SendSpan) GetQueueName() string {
	if x, ok := x.GetSource().(*SpanData_SendSpan_QueueName); ok {
		return x.QueueName
	}
	return ""
}

func (x *SpanData_SendSpan) GetTopicEndpointName() string {
	if x, ok := x.GetSource().(*SpanData_SendSpan_TopicEndpointName); ok {
		return x.TopicEndpointName
	}
	return ""
}

func (x *SpanData_SendSpan) GetOutcome() SpanData_SendSpan_Outcome {
	if x != nil {
		return x.Outcome
	}
	return SpanData_SendSpan_ACCEPTED
}

func (x *SpanData_SendSpan) GetReplayedMsg() bool {
	if x != nil {
		return x.ReplayedMsg
	}
	return false
}

func (x *SpanData_SendSpan) GetConsumerClientUsername() string {
	if x != nil {
		return x.ConsumerClientUsername
	}
	return ""
}

func (x *SpanData_SendSpan) GetConsumerClientName() string {
	if x != nil {
		return x.ConsumerClientName
	}
	return ""
}

func (x *SpanData_SendSpan) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *SpanData_SendSpan) GetProtocolVersion() string {
	if x != nil && x.ProtocolVersion != nil {
		return *x.ProtocolVersion
	}
	return ""
}

func (x *SpanData_SendSpan) GetPartitionNumber() uint32 {
	if x != nil && x.PartitionNumber != nil {
		return *x.PartitionNumber
	}
	return 0
}

type isSpanData_SendSpan_Source interface {
	isSpanData_SendSpan_Source()
}

type SpanData_SendSpan_QueueName struct {
	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3,oneof"`
}

type SpanData_SendSpan_TopicEndpointName struct {
	TopicEndpointName string `protobuf:"bytes,2,opt,name=topic_endpoint_name,json=topicEndpointName,proto3,oneof"`
}

func (*SpanData_SendSpan_QueueName) isSpanData_SendSpan_Source() {}

func (*SpanData_SendSpan_TopicEndpointName) isSpanData_SendSpan_Source() {}

// This message contains information unique to a DeleteSpan.
type SpanData_DeleteSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the queue or topic endpoint the message is being deleted
	// from.
	//
	// Types that are assignable to EndpointName:
	//
	//	*SpanData_DeleteSpan_QueueName
	//	*SpanData_DeleteSpan_TopicEndpointName
	EndpointName isSpanData_DeleteSpan_EndpointName `protobuf_oneof:"endpoint_name"`
	// The nested "info" message below provides the following information:
	//   - The reason for the message being deleted.
	//   - Any additional information associated with that particular reason.
	//     Some reasons have no additional information, so their associated info
	//     messages have no fields within them.
	//
	// Types that are assignable to TypeInfo:
	//
	//	*SpanData_DeleteSpan_MaxRedeliveriesInfo
	//	*SpanData_DeleteSpan_TtlExpiredInfo
	//	*SpanData_DeleteSpan_RejectedOutcomeInfo
	//	*SpanData_DeleteSpan_HopCountExceededInfo
	//	*SpanData_DeleteSpan_IngressSelectorInfo
	//	*SpanData_DeleteSpan_AdminActionInfo
	TypeInfo isSpanData_DeleteSpan_TypeInfo `protobuf_oneof:"type_info"`
	// Partition number of the queue the message is being deleted from,
	// if the associated queue is a partitioned queue
	PartitionNumber *uint32 `protobuf:"varint,9,opt,name=partition_number,json=partitionNumber,proto3,oneof" json:"partition_number,omitempty"`
}

func (x *SpanData_DeleteSpan) Reset() {
	*x = SpanData_DeleteSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_DeleteSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_DeleteSpan) ProtoMessage() {}

func (x *SpanData_DeleteSpan) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_DeleteSpan.ProtoReflect.Descriptor instead.
func (*SpanData_DeleteSpan) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 2}
}

func (m *SpanData_DeleteSpan) GetEndpointName() isSpanData_DeleteSpan_EndpointName {
	if m != nil {
		return m.EndpointName
	}
	return nil
}

func (x *SpanData_DeleteSpan) GetQueueName() string {
	if x, ok := x.GetEndpointName().(*SpanData_DeleteSpan_QueueName); ok {
		return x.QueueName
	}
	return ""
}

func (x *SpanData_DeleteSpan) GetTopicEndpointName() string {
	if x, ok := x.GetEndpointName().(*SpanData_DeleteSpan_TopicEndpointName); ok {
		return x.TopicEndpointName
	}
	return ""
}

func (m *SpanData_DeleteSpan) GetTypeInfo() isSpanData_DeleteSpan_TypeInfo {
	if m != nil {
		return m.TypeInfo
	}
	return nil
}

func (x *SpanData_DeleteSpan) GetMaxRedeliveriesInfo() *SpanData_MaxRedeliveriesInfo {
	if x, ok := x.GetTypeInfo().(*SpanData_DeleteSpan_MaxRedeliveriesInfo); ok {
		return x.MaxRedeliveriesInfo
	}
	return nil
}

func (x *SpanData_DeleteSpan) GetTtlExpiredInfo() *SpanData_TtlExpiredInfo {
	if x, ok := x.GetTypeInfo().(*SpanData_DeleteSpan_TtlExpiredInfo); ok {
		return x.TtlExpiredInfo
	}
	return nil
}

func (x *SpanData_DeleteSpan) GetRejectedOutcomeInfo() *SpanData_RejectedOutcomeInfo {
	if x, ok := x.GetTypeInfo().(*SpanData_DeleteSpan_RejectedOutcomeInfo); ok {
		return x.RejectedOutcomeInfo
	}
	return nil
}

func (x *SpanData_DeleteSpan) GetHopCountExceededInfo() *SpanData_HopCountExceededInfo {
	if x, ok := x.GetTypeInfo().(*SpanData_DeleteSpan_HopCountExceededInfo); ok {
		return x.HopCountExceededInfo
	}
	return nil
}

func (x *SpanData_DeleteSpan) GetIngressSelectorInfo() *SpanData_IngressSelectorInfo {
	if x, ok := x.GetTypeInfo().(*SpanData_DeleteSpan_IngressSelectorInfo); ok {
		return x.IngressSelectorInfo
	}
	return nil
}

func (x *SpanData_DeleteSpan) GetAdminActionInfo() *SpanData_AdminActionInfo {
	if x, ok := x.GetTypeInfo().(*SpanData_DeleteSpan_AdminActionInfo); ok {
		return x.AdminActionInfo
	}
	return nil
}

func (x *SpanData_DeleteSpan) GetPartitionNumber() uint32 {
	if x != nil && x.PartitionNumber != nil {
		return *x.PartitionNumber
	}
	return 0
}

type isSpanData_DeleteSpan_EndpointName interface {
	isSpanData_DeleteSpan_EndpointName()
}

type SpanData_DeleteSpan_QueueName struct {
	QueueName string `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3,oneof"`
}

type SpanData_DeleteSpan_TopicEndpointName struct {
	TopicEndpointName string `protobuf:"bytes,2,opt,name=topic_endpoint_name,json=topicEndpointName,proto3,oneof"`
}

func (*SpanData_DeleteSpan_QueueName) isSpanData_DeleteSpan_EndpointName() {}

func (*SpanData_DeleteSpan_TopicEndpointName) isSpanData_DeleteSpan_EndpointName() {}

type isSpanData_DeleteSpan_TypeInfo interface {
	isSpanData_DeleteSpan_TypeInfo()
}

type SpanData_DeleteSpan_MaxRedeliveriesInfo struct {
	MaxRedeliveriesInfo *SpanData_MaxRedeliveriesInfo `protobuf:"bytes,3,opt,name=max_redeliveries_info,json=maxRedeliveriesInfo,proto3,oneof"`
}

type SpanData_DeleteSpan_TtlExpiredInfo struct {
	TtlExpiredInfo *SpanData_TtlExpiredInfo `protobuf:"bytes,4,opt,name=ttl_expired_info,json=ttlExpiredInfo,proto3,oneof"`
}

type SpanData_DeleteSpan_RejectedOutcomeInfo struct {
	RejectedOutcomeInfo *SpanData_RejectedOutcomeInfo `protobuf:"bytes,5,opt,name=rejected_outcome_info,json=rejectedOutcomeInfo,proto3,oneof"`
}

type SpanData_DeleteSpan_HopCountExceededInfo struct {
	HopCountExceededInfo *SpanData_HopCountExceededInfo `protobuf:"bytes,6,opt,name=hop_count_exceeded_info,json=hopCountExceededInfo,proto3,oneof"`
}

type SpanData_DeleteSpan_IngressSelectorInfo struct {
	IngressSelectorInfo *SpanData_IngressSelectorInfo `protobuf:"bytes,7,opt,name=ingress_selector_info,json=ingressSelectorInfo,proto3,oneof"`
}

type SpanData_DeleteSpan_AdminActionInfo struct {
	AdminActionInfo *SpanData_AdminActionInfo `protobuf:"bytes,8,opt,name=admin_action_info,json=adminActionInfo,proto3,oneof"`
}

func (*SpanData_DeleteSpan_MaxRedeliveriesInfo) isSpanData_DeleteSpan_TypeInfo() {}

func (*SpanData_DeleteSpan_TtlExpiredInfo) isSpanData_DeleteSpan_TypeInfo() {}

func (*SpanData_DeleteSpan_RejectedOutcomeInfo) isSpanData_DeleteSpan_TypeInfo() {}

func (*SpanData_DeleteSpan_HopCountExceededInfo) isSpanData_DeleteSpan_TypeInfo() {}

func (*SpanData_DeleteSpan_IngressSelectorInfo) isSpanData_DeleteSpan_TypeInfo() {}

func (*SpanData_DeleteSpan_AdminActionInfo) isSpanData_DeleteSpan_TypeInfo() {}

// The presence of this message implies the reason for the span is that a
// message exceeded the maximum number of redeliveries.
type SpanData_MaxRedeliveriesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpanData_MaxRedeliveriesInfo) Reset() {
	*x = SpanData_MaxRedeliveriesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_MaxRedeliveriesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_MaxRedeliveriesInfo) ProtoMessage() {}

func (x *SpanData_MaxRedeliveriesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_MaxRedeliveriesInfo.ProtoReflect.Descriptor instead.
func (*SpanData_MaxRedeliveriesInfo) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 3}
}

// The presence of this message implies the reason for the span is that the
// message's TTL has expired.
type SpanData_TtlExpiredInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpanData_TtlExpiredInfo) Reset() {
	*x = SpanData_TtlExpiredInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_TtlExpiredInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_TtlExpiredInfo) ProtoMessage() {}

func (x *SpanData_TtlExpiredInfo) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_TtlExpiredInfo.ProtoReflect.Descriptor instead.
func (*SpanData_TtlExpiredInfo) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 4}
}

// The presence of this message implies the reason for the span is that a
// consuming client settled the message with an outcome of "rejected".
type SpanData_RejectedOutcomeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpanData_RejectedOutcomeInfo) Reset() {
	*x = SpanData_RejectedOutcomeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_RejectedOutcomeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_RejectedOutcomeInfo) ProtoMessage() {}

func (x *SpanData_RejectedOutcomeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_RejectedOutcomeInfo.ProtoReflect.Descriptor instead.
func (*SpanData_RejectedOutcomeInfo) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 5}
}

// The presence of this message implies the reason for the span is that the
// message exceeded its maximum hop count. Hop count limits are used to
// prevent messages from cycling through a loop indefinitely in a network of
// brokers. This could be caused by certain bridge configurations. In some
// documentation an interfaces, this may be referred to as SMF TTL or bridge
// TTL. Here the term TTL is being avoided to avoid confusion with the
// Guaranteed Messaging TTL, which is specified as a time duration.
type SpanData_HopCountExceededInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpanData_HopCountExceededInfo) Reset() {
	*x = SpanData_HopCountExceededInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_HopCountExceededInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_HopCountExceededInfo) ProtoMessage() {}

func (x *SpanData_HopCountExceededInfo) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_HopCountExceededInfo.ProtoReflect.Descriptor instead.
func (*SpanData_HopCountExceededInfo) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 6}
}

// The presence of this message implies the reason for the span is that the
// message did not match a topic endpoint's ingress selector. The message's
// receive span would have indicated it was being enqueued on the topic
// endpoint, but before the message is eligible to be delivered to a
// consumer, the message was discarded because it did not match the ingress
// selector.
type SpanData_IngressSelectorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpanData_IngressSelectorInfo) Reset() {
	*x = SpanData_IngressSelectorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_IngressSelectorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_IngressSelectorInfo) ProtoMessage() {}

func (x *SpanData_IngressSelectorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_IngressSelectorInfo.ProtoReflect.Descriptor instead.
func (*SpanData_IngressSelectorInfo) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 7}
}

// The presence of this message implies the reason for the discard was an
// administrative delete message command. These spans are only generated
// when the command deletes a single message.
type SpanData_AdminActionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The authenticated username of the administrator that requested the
	// operation.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Information identifying the user's session.
	//
	// Types that are assignable to SessionInfo:
	//
	//	*SpanData_AdminActionInfo_CliSessionInfo
	//	*SpanData_AdminActionInfo_SempSessionInfo
	SessionInfo isSpanData_AdminActionInfo_SessionInfo `protobuf_oneof:"session_info"`
}

func (x *SpanData_AdminActionInfo) Reset() {
	*x = SpanData_AdminActionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_AdminActionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_AdminActionInfo) ProtoMessage() {}

func (x *SpanData_AdminActionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_AdminActionInfo.ProtoReflect.Descriptor instead.
func (*SpanData_AdminActionInfo) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 8}
}

func (x *SpanData_AdminActionInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (m *SpanData_AdminActionInfo) GetSessionInfo() isSpanData_AdminActionInfo_SessionInfo {
	if m != nil {
		return m.SessionInfo
	}
	return nil
}

func (x *SpanData_AdminActionInfo) GetCliSessionInfo() *SpanData_CliSessionInfo {
	if x, ok := x.GetSessionInfo().(*SpanData_AdminActionInfo_CliSessionInfo); ok {
		return x.CliSessionInfo
	}
	return nil
}

func (x *SpanData_AdminActionInfo) GetSempSessionInfo() *SpanData_SempSessionInfo {
	if x, ok := x.GetSessionInfo().(*SpanData_AdminActionInfo_SempSessionInfo); ok {
		return x.SempSessionInfo
	}
	return nil
}

type isSpanData_AdminActionInfo_SessionInfo interface {
	isSpanData_AdminActionInfo_SessionInfo()
}

type SpanData_AdminActionInfo_CliSessionInfo struct {
	CliSessionInfo *SpanData_CliSessionInfo `protobuf:"bytes,2,opt,name=cli_session_info,json=cliSessionInfo,proto3,oneof"`
}

type SpanData_AdminActionInfo_SempSessionInfo struct {
	SempSessionInfo *SpanData_SempSessionInfo `protobuf:"bytes,3,opt,name=semp_session_info,json=sempSessionInfo,proto3,oneof"`
}

func (*SpanData_AdminActionInfo_CliSessionInfo) isSpanData_AdminActionInfo_SessionInfo() {}

func (*SpanData_AdminActionInfo_SempSessionInfo) isSpanData_AdminActionInfo_SessionInfo() {}

type SpanData_CliSessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CLI Sessions are identified as coming from either a remote SSH connection
	// or from a local terminal. The information provided differs in each case.
	//
	// Types that are assignable to Descriptor_:
	//
	//	*SpanData_CliSessionInfo_LocalSession
	//	*SpanData_CliSessionInfo_RemoteSession
	Descriptor_ isSpanData_CliSessionInfo_Descriptor_ `protobuf_oneof:"descriptor"`
	// The session number the broker uses to identify a CLI session.
	SessionNumber uint32 `protobuf:"varint,3,opt,name=sessionNumber,proto3" json:"sessionNumber,omitempty"`
}

func (x *SpanData_CliSessionInfo) Reset() {
	*x = SpanData_CliSessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_CliSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_CliSessionInfo) ProtoMessage() {}

func (x *SpanData_CliSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_CliSessionInfo.ProtoReflect.Descriptor instead.
func (*SpanData_CliSessionInfo) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 9}
}

func (m *SpanData_CliSessionInfo) GetDescriptor_() isSpanData_CliSessionInfo_Descriptor_ {
	if m != nil {
		return m.Descriptor_
	}
	return nil
}

func (x *SpanData_CliSessionInfo) GetLocalSession() *SpanData_TerminalCliSessionDescriptor {
	if x, ok := x.GetDescriptor_().(*SpanData_CliSessionInfo_LocalSession); ok {
		return x.LocalSession
	}
	return nil
}

func (x *SpanData_CliSessionInfo) GetRemoteSession() *SpanData_SshCliSessionDescriptor {
	if x, ok := x.GetDescriptor_().(*SpanData_CliSessionInfo_RemoteSession); ok {
		return x.RemoteSession
	}
	return nil
}

func (x *SpanData_CliSessionInfo) GetSessionNumber() uint32 {
	if x != nil {
		return x.SessionNumber
	}
	return 0
}

type isSpanData_CliSessionInfo_Descriptor_ interface {
	isSpanData_CliSessionInfo_Descriptor_()
}

type SpanData_CliSessionInfo_LocalSession struct {
	LocalSession *SpanData_TerminalCliSessionDescriptor `protobuf:"bytes,1,opt,name=local_session,json=localSession,proto3,oneof"`
}

type SpanData_CliSessionInfo_RemoteSession struct {
	RemoteSession *SpanData_SshCliSessionDescriptor `protobuf:"bytes,2,opt,name=remote_session,json=remoteSession,proto3,oneof"`
}

func (*SpanData_CliSessionInfo_LocalSession) isSpanData_CliSessionInfo_Descriptor_() {}

func (*SpanData_CliSessionInfo_RemoteSession) isSpanData_CliSessionInfo_Descriptor_() {}

type SpanData_TerminalCliSessionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminalName string `protobuf:"bytes,1,opt,name=terminal_name,json=terminalName,proto3" json:"terminal_name,omitempty"`
}

func (x *SpanData_TerminalCliSessionDescriptor) Reset() {
	*x = SpanData_TerminalCliSessionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_TerminalCliSessionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_TerminalCliSessionDescriptor) ProtoMessage() {}

func (x *SpanData_TerminalCliSessionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_TerminalCliSessionDescriptor.ProtoReflect.Descriptor instead.
func (*SpanData_TerminalCliSessionDescriptor) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 10}
}

func (x *SpanData_TerminalCliSessionDescriptor) GetTerminalName() string {
	if x != nil {
		return x.TerminalName
	}
	return ""
}

type SpanData_SshCliSessionDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A valid IP will be 4 or 16 bytes in length. If the length is 4 bytes,
	// the address is an IPv4 address. If it is 16 bytes, it is an IPv6
	// address.
	PeerIp []byte `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
}

func (x *SpanData_SshCliSessionDescriptor) Reset() {
	*x = SpanData_SshCliSessionDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_SshCliSessionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_SshCliSessionDescriptor) ProtoMessage() {}

func (x *SpanData_SshCliSessionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_SshCliSessionDescriptor.ProtoReflect.Descriptor instead.
func (*SpanData_SshCliSessionDescriptor) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 11}
}

func (x *SpanData_SshCliSessionDescriptor) GetPeerIp() []byte {
	if x != nil {
		return x.PeerIp
	}
	return nil
}

type SpanData_SempSessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SempVersion uint32 `protobuf:"varint,1,opt,name=sempVersion,proto3" json:"sempVersion,omitempty"`
	// A valid IP will be 4 or 16 bytes in length. If the length is 4 bytes,
	// the address is an IPv4 address. If it is 16 bytes, it is an IPv6
	// address.
	PeerIp []byte `protobuf:"bytes,2,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
}

func (x *SpanData_SempSessionInfo) Reset() {
	*x = SpanData_SempSessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_SempSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_SempSessionInfo) ProtoMessage() {}

func (x *SpanData_SempSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_SempSessionInfo.ProtoReflect.Descriptor instead.
func (*SpanData_SempSessionInfo) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 12}
}

func (x *SpanData_SempSessionInfo) GetSempVersion() uint32 {
	if x != nil {
		return x.SempVersion
	}
	return 0
}

func (x *SpanData_SempSessionInfo) GetPeerIp() []byte {
	if x != nil {
		return x.PeerIp
	}
	return nil
}

// When a span has a transaction event, it indicates the span occurs as part
// of processing a transaction, and includes the *current* state of of the
// transaction when the event was generated. The state can change as
// subsequent events occur as part of the transaction.
type SpanData_TransactionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUnixNano int64                               `protobuf:"fixed64,1,opt,name=time_unix_nano,json=timeUnixNano,proto3" json:"time_unix_nano,omitempty"`
	Type         SpanData_TransactionEvent_Type      `protobuf:"varint,2,opt,name=type,proto3,enum=solace.messaging.proto.broker.trace.egress.v1.SpanData_TransactionEvent_Type" json:"type,omitempty"`
	Initiator    SpanData_TransactionEvent_Initiator `protobuf:"varint,3,opt,name=initiator,proto3,enum=solace.messaging.proto.broker.trace.egress.v1.SpanData_TransactionEvent_Initiator" json:"initiator,omitempty"`
	// Types that are assignable to TransactionId:
	//
	//	*SpanData_TransactionEvent_Xid_
	//	*SpanData_TransactionEvent_LocalId
	TransactionId    isSpanData_TransactionEvent_TransactionId `protobuf_oneof:"transaction_id"`
	ErrorDescription *string                                   `protobuf:"bytes,6,opt,name=error_description,json=errorDescription,proto3,oneof" json:"error_description,omitempty"`
}

func (x *SpanData_TransactionEvent) Reset() {
	*x = SpanData_TransactionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_TransactionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_TransactionEvent) ProtoMessage() {}

func (x *SpanData_TransactionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_TransactionEvent.ProtoReflect.Descriptor instead.
func (*SpanData_TransactionEvent) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 13}
}

func (x *SpanData_TransactionEvent) GetTimeUnixNano() int64 {
	if x != nil {
		return x.TimeUnixNano
	}
	return 0
}

func (x *SpanData_TransactionEvent) GetType() SpanData_TransactionEvent_Type {
	if x != nil {
		return x.Type
	}
	return SpanData_TransactionEvent_COMMIT
}

func (x *SpanData_TransactionEvent) GetInitiator() SpanData_TransactionEvent_Initiator {
	if x != nil {
		return x.Initiator
	}
	return SpanData_TransactionEvent_CLIENT
}

func (m *SpanData_TransactionEvent) GetTransactionId() isSpanData_TransactionEvent_TransactionId {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (x *SpanData_TransactionEvent) GetXid() *SpanData_TransactionEvent_Xid {
	if x, ok := x.GetTransactionId().(*SpanData_TransactionEvent_Xid_); ok {
		return x.Xid
	}
	return nil
}

func (x *SpanData_TransactionEvent) GetLocalId() *SpanData_TransactionEvent_LocalTransactionId {
	if x, ok := x.GetTransactionId().(*SpanData_TransactionEvent_LocalId); ok {
		return x.LocalId
	}
	return nil
}

func (x *SpanData_TransactionEvent) GetErrorDescription() string {
	if x != nil && x.ErrorDescription != nil {
		return *x.ErrorDescription
	}
	return ""
}

type isSpanData_TransactionEvent_TransactionId interface {
	isSpanData_TransactionEvent_TransactionId()
}

type SpanData_TransactionEvent_Xid_ struct {
	Xid *SpanData_TransactionEvent_Xid `protobuf:"bytes,4,opt,name=xid,proto3,oneof"`
}

type SpanData_TransactionEvent_LocalId struct {
	LocalId *SpanData_TransactionEvent_LocalTransactionId `protobuf:"bytes,5,opt,name=local_id,json=localId,proto3,oneof"`
}

func (*SpanData_TransactionEvent_Xid_) isSpanData_TransactionEvent_TransactionId() {}

func (*SpanData_TransactionEvent_LocalId) isSpanData_TransactionEvent_TransactionId() {}

type SpanData_TransactionEvent_Xid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormatId        int32  `protobuf:"varint,1,opt,name=format_id,json=formatId,proto3" json:"format_id,omitempty"`
	BranchQualifier []byte `protobuf:"bytes,2,opt,name=branch_qualifier,json=branchQualifier,proto3" json:"branch_qualifier,omitempty"`
	GlobalId        []byte `protobuf:"bytes,3,opt,name=global_id,json=globalId,proto3" json:"global_id,omitempty"`
}

func (x *SpanData_TransactionEvent_Xid) Reset() {
	*x = SpanData_TransactionEvent_Xid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_TransactionEvent_Xid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_TransactionEvent_Xid) ProtoMessage() {}

func (x *SpanData_TransactionEvent_Xid) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_TransactionEvent_Xid.ProtoReflect.Descriptor instead.
func (*SpanData_TransactionEvent_Xid) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 13, 0}
}

func (x *SpanData_TransactionEvent_Xid) GetFormatId() int32 {
	if x != nil {
		return x.FormatId
	}
	return 0
}

func (x *SpanData_TransactionEvent_Xid) GetBranchQualifier() []byte {
	if x != nil {
		return x.BranchQualifier
	}
	return nil
}

func (x *SpanData_TransactionEvent_Xid) GetGlobalId() []byte {
	if x != nil {
		return x.GlobalId
	}
	return nil
}

type SpanData_TransactionEvent_LocalTransactionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId uint32 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	SessionId     uint32 `protobuf:"varint,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SessionName   string `protobuf:"bytes,3,opt,name=session_name,json=sessionName,proto3" json:"session_name,omitempty"`
}

func (x *SpanData_TransactionEvent_LocalTransactionId) Reset() {
	*x = SpanData_TransactionEvent_LocalTransactionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_egress_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanData_TransactionEvent_LocalTransactionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanData_TransactionEvent_LocalTransactionId) ProtoMessage() {}

func (x *SpanData_TransactionEvent_LocalTransactionId) ProtoReflect() protoreflect.Message {
	mi := &file_egress_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanData_TransactionEvent_LocalTransactionId.ProtoReflect.Descriptor instead.
func (*SpanData_TransactionEvent_LocalTransactionId) Descriptor() ([]byte, []int) {
	return file_egress_v1_proto_rawDescGZIP(), []int{0, 13, 1}
}

func (x *SpanData_TransactionEvent_LocalTransactionId) GetTransactionId() uint32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *SpanData_TransactionEvent_LocalTransactionId) GetSessionId() uint32 {
	if x != nil {
		return x.SessionId
	}
	return 0
}

func (x *SpanData_TransactionEvent_LocalTransactionId) GetSessionName() string {
	if x != nil {
		return x.SessionName
	}
	return ""
}

var File_egress_v1_proto protoreflect.FileDescriptor

var file_egress_v1_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x2d, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x22, 0xde, 0x22, 0x0a, 0x08, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x65, 0x0a,
	0x0c, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x0b, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x70, 0x61, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x70, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x6c, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x6c,
	0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x8b, 0x05, 0x0a, 0x0a, 0x45, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0e,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x70,
	0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x10, 0x52, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x10, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x7a, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x48, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x02, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x53, 0x70, 0x61, 0x6e, 0x12, 0x65, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73,
	0x70, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x6f, 0x6c, 0x61,
	0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xae, 0x05, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64,
	0x53, 0x70, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x70, 0x61, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x38,
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x07, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0xc1, 0x07, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x15, 0x6d,
	0x61, 0x78, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x72,
	0x0a, 0x10, 0x74, 0x74, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x74, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x01, 0x52, 0x0e, 0x74, 0x74, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x81, 0x01, 0x0a, 0x15, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x48,
	0x01, 0x52, 0x13, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x85, 0x01, 0x0a, 0x17, 0x68, 0x6f, 0x70, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x48, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x14, 0x68, 0x6f, 0x70, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x81,
	0x01, 0x0a, 0x15, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x13, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x75, 0x0a, 0x11, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70,
	0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x0f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x10, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x15, 0x0a, 0x13,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x0a, 0x0e, 0x54, 0x74, 0x6c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x16, 0x0a, 0x14,
	0x48, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x15, 0x0a, 0x13, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xa8, 0x02, 0x0a, 0x0f,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x10, 0x63,
	0x6c, 0x69, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43,
	0x6c, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52,
	0x0e, 0x63, 0x6c, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x75, 0x0a, 0x11, 0x73, 0x65, 0x6d, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x73, 0x6f, 0x6c,
	0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x6d, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x6d, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x1a, 0xbb, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7b, 0x0a, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x54, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x43, 0x6c, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x78, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f,
	0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x73, 0x68, 0x43, 0x6c, 0x69, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x1a, 0x43, 0x0a, 0x1c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x43, 0x6c, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x32, 0x0a, 0x17, 0x53, 0x73, 0x68,
	0x43, 0x6c, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x1a, 0x4c, 0x0a,
	0x0f, 0x53, 0x65, 0x6d, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6d, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x6d, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x1a, 0xbe, 0x07, 0x0a, 0x10,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x6e, 0x61,
	0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x61, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x70, 0x0a, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x52, 0x2e, 0x73,
	0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x60, 0x0a, 0x03, 0x78,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63,
	0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x58, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x78, 0x69, 0x64, 0x12, 0x78, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x5b, 0x2e, 0x73, 0x6f, 0x6c, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x70, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x1a, 0x6a, 0x0a, 0x03, 0x58, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x49, 0x64, 0x1a, 0x7d, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f, 0x4c, 0x4c,
	0x42, 0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x05, 0x22, 0x2e, 0x0a, 0x09, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f, 0x4b,
	0x45, 0x52, 0x10, 0x02, 0x42, 0x10, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_egress_v1_proto_rawDescOnce sync.Once
	file_egress_v1_proto_rawDescData = file_egress_v1_proto_rawDesc
)

func file_egress_v1_proto_rawDescGZIP() []byte {
	file_egress_v1_proto_rawDescOnce.Do(func() {
		file_egress_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_egress_v1_proto_rawDescData)
	})
	return file_egress_v1_proto_rawDescData
}

var file_egress_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_egress_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_egress_v1_proto_goTypes = []interface{}{
	(SpanData_SendSpan_Outcome)(0),                       // 0: solace.messaging.proto.broker.trace.egress.v1.SpanData.SendSpan.Outcome
	(SpanData_TransactionEvent_Type)(0),                  // 1: solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.Type
	(SpanData_TransactionEvent_Initiator)(0),             // 2: solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.Initiator
	(*SpanData)(nil),                                     // 3: solace.messaging.proto.broker.trace.egress.v1.SpanData
	(*SpanData_EgressSpan)(nil),                          // 4: solace.messaging.proto.broker.trace.egress.v1.SpanData.EgressSpan
	(*SpanData_SendSpan)(nil),                            // 5: solace.messaging.proto.broker.trace.egress.v1.SpanData.SendSpan
	(*SpanData_DeleteSpan)(nil),                          // 6: solace.messaging.proto.broker.trace.egress.v1.SpanData.DeleteSpan
	(*SpanData_MaxRedeliveriesInfo)(nil),                 // 7: solace.messaging.proto.broker.trace.egress.v1.SpanData.MaxRedeliveriesInfo
	(*SpanData_TtlExpiredInfo)(nil),                      // 8: solace.messaging.proto.broker.trace.egress.v1.SpanData.TtlExpiredInfo
	(*SpanData_RejectedOutcomeInfo)(nil),                 // 9: solace.messaging.proto.broker.trace.egress.v1.SpanData.RejectedOutcomeInfo
	(*SpanData_HopCountExceededInfo)(nil),                // 10: solace.messaging.proto.broker.trace.egress.v1.SpanData.HopCountExceededInfo
	(*SpanData_IngressSelectorInfo)(nil),                 // 11: solace.messaging.proto.broker.trace.egress.v1.SpanData.IngressSelectorInfo
	(*SpanData_AdminActionInfo)(nil),                     // 12: solace.messaging.proto.broker.trace.egress.v1.SpanData.AdminActionInfo
	(*SpanData_CliSessionInfo)(nil),                      // 13: solace.messaging.proto.broker.trace.egress.v1.SpanData.CliSessionInfo
	(*SpanData_TerminalCliSessionDescriptor)(nil),        // 14: solace.messaging.proto.broker.trace.egress.v1.SpanData.TerminalCliSessionDescriptor
	(*SpanData_SshCliSessionDescriptor)(nil),             // 15: solace.messaging.proto.broker.trace.egress.v1.SpanData.SshCliSessionDescriptor
	(*SpanData_SempSessionInfo)(nil),                     // 16: solace.messaging.proto.broker.trace.egress.v1.SpanData.SempSessionInfo
	(*SpanData_TransactionEvent)(nil),                    // 17: solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent
	(*SpanData_TransactionEvent_Xid)(nil),                // 18: solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.Xid
	(*SpanData_TransactionEvent_LocalTransactionId)(nil), // 19: solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.LocalTransactionId
}
var file_egress_v1_proto_depIdxs = []int32{
	4,  // 0: solace.messaging.proto.broker.trace.egress.v1.SpanData.egress_spans:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.EgressSpan
	17, // 1: solace.messaging.proto.broker.trace.egress.v1.SpanData.EgressSpan.transaction_event:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent
	5,  // 2: solace.messaging.proto.broker.trace.egress.v1.SpanData.EgressSpan.send_span:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.SendSpan
	6,  // 3: solace.messaging.proto.broker.trace.egress.v1.SpanData.EgressSpan.delete_span:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.DeleteSpan
	0,  // 4: solace.messaging.proto.broker.trace.egress.v1.SpanData.SendSpan.outcome:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.SendSpan.Outcome
	7,  // 5: solace.messaging.proto.broker.trace.egress.v1.SpanData.DeleteSpan.max_redeliveries_info:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.MaxRedeliveriesInfo
	8,  // 6: solace.messaging.proto.broker.trace.egress.v1.SpanData.DeleteSpan.ttl_expired_info:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.TtlExpiredInfo
	9,  // 7: solace.messaging.proto.broker.trace.egress.v1.SpanData.DeleteSpan.rejected_outcome_info:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.RejectedOutcomeInfo
	10, // 8: solace.messaging.proto.broker.trace.egress.v1.SpanData.DeleteSpan.hop_count_exceeded_info:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.HopCountExceededInfo
	11, // 9: solace.messaging.proto.broker.trace.egress.v1.SpanData.DeleteSpan.ingress_selector_info:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.IngressSelectorInfo
	12, // 10: solace.messaging.proto.broker.trace.egress.v1.SpanData.DeleteSpan.admin_action_info:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.AdminActionInfo
	13, // 11: solace.messaging.proto.broker.trace.egress.v1.SpanData.AdminActionInfo.cli_session_info:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.CliSessionInfo
	16, // 12: solace.messaging.proto.broker.trace.egress.v1.SpanData.AdminActionInfo.semp_session_info:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.SempSessionInfo
	14, // 13: solace.messaging.proto.broker.trace.egress.v1.SpanData.CliSessionInfo.local_session:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.TerminalCliSessionDescriptor
	15, // 14: solace.messaging.proto.broker.trace.egress.v1.SpanData.CliSessionInfo.remote_session:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.SshCliSessionDescriptor
	1,  // 15: solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.type:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.Type
	2,  // 16: solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.initiator:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.Initiator
	18, // 17: solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.xid:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.Xid
	19, // 18: solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.local_id:type_name -> solace.messaging.proto.broker.trace.egress.v1.SpanData.TransactionEvent.LocalTransactionId
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_egress_v1_proto_init() }
func file_egress_v1_proto_init() {
	if File_egress_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_egress_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_EgressSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_SendSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_DeleteSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_MaxRedeliveriesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_TtlExpiredInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_RejectedOutcomeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_HopCountExceededInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_IngressSelectorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_AdminActionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_CliSessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_TerminalCliSessionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_SshCliSessionDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_SempSessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_TransactionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_TransactionEvent_Xid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_egress_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanData_TransactionEvent_LocalTransactionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_egress_v1_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_egress_v1_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SpanData_EgressSpan_SendSpan)(nil),
		(*SpanData_EgressSpan_DeleteSpan)(nil),
	}
	file_egress_v1_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SpanData_SendSpan_QueueName)(nil),
		(*SpanData_SendSpan_TopicEndpointName)(nil),
	}
	file_egress_v1_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*SpanData_DeleteSpan_QueueName)(nil),
		(*SpanData_DeleteSpan_TopicEndpointName)(nil),
		(*SpanData_DeleteSpan_MaxRedeliveriesInfo)(nil),
		(*SpanData_DeleteSpan_TtlExpiredInfo)(nil),
		(*SpanData_DeleteSpan_RejectedOutcomeInfo)(nil),
		(*SpanData_DeleteSpan_HopCountExceededInfo)(nil),
		(*SpanData_DeleteSpan_IngressSelectorInfo)(nil),
		(*SpanData_DeleteSpan_AdminActionInfo)(nil),
	}
	file_egress_v1_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*SpanData_AdminActionInfo_CliSessionInfo)(nil),
		(*SpanData_AdminActionInfo_SempSessionInfo)(nil),
	}
	file_egress_v1_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*SpanData_CliSessionInfo_LocalSession)(nil),
		(*SpanData_CliSessionInfo_RemoteSession)(nil),
	}
	file_egress_v1_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SpanData_TransactionEvent_Xid_)(nil),
		(*SpanData_TransactionEvent_LocalId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_egress_v1_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_egress_v1_proto_goTypes,
		DependencyIndexes: file_egress_v1_proto_depIdxs,
		EnumInfos:         file_egress_v1_proto_enumTypes,
		MessageInfos:      file_egress_v1_proto_msgTypes,
	}.Build()
	File_egress_v1_proto = out.File
	file_egress_v1_proto_rawDesc = nil
	file_egress_v1_proto_goTypes = nil
	file_egress_v1_proto_depIdxs = nil
}
