// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/filter"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for github metrics.
type MetricsConfig struct {
	VcsChangeCount          MetricConfig `mapstructure:"vcs.change.count"`
	VcsChangeDuration       MetricConfig `mapstructure:"vcs.change.duration"`
	VcsChangeTimeToApproval MetricConfig `mapstructure:"vcs.change.time_to_approval"`
	VcsChangeTimeToMerge    MetricConfig `mapstructure:"vcs.change.time_to_merge"`
	VcsContributorCount     MetricConfig `mapstructure:"vcs.contributor.count"`
	VcsRefCount             MetricConfig `mapstructure:"vcs.ref.count"`
	VcsRefLinesDelta        MetricConfig `mapstructure:"vcs.ref.lines_delta"`
	VcsRefRevisionsDelta    MetricConfig `mapstructure:"vcs.ref.revisions_delta"`
	VcsRefTime              MetricConfig `mapstructure:"vcs.ref.time"`
	VcsRepositoryCount      MetricConfig `mapstructure:"vcs.repository.count"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		VcsChangeCount: MetricConfig{
			Enabled: true,
		},
		VcsChangeDuration: MetricConfig{
			Enabled: true,
		},
		VcsChangeTimeToApproval: MetricConfig{
			Enabled: true,
		},
		VcsChangeTimeToMerge: MetricConfig{
			Enabled: true,
		},
		VcsContributorCount: MetricConfig{
			Enabled: false,
		},
		VcsRefCount: MetricConfig{
			Enabled: true,
		},
		VcsRefLinesDelta: MetricConfig{
			Enabled: true,
		},
		VcsRefRevisionsDelta: MetricConfig{
			Enabled: true,
		},
		VcsRefTime: MetricConfig{
			Enabled: true,
		},
		VcsRepositoryCount: MetricConfig{
			Enabled: true,
		},
	}
}

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`
	// Experimental: MetricsInclude defines a list of filters for attribute values.
	// If the list is not empty, only metrics with matching resource attribute values will be emitted.
	MetricsInclude []filter.Config `mapstructure:"metrics_include"`
	// Experimental: MetricsExclude defines a list of filters for attribute values.
	// If the list is not empty, metrics with matching resource attribute values will not be emitted.
	// MetricsInclude has higher priority than MetricsExclude.
	MetricsExclude []filter.Config `mapstructure:"metrics_exclude"`

	enabledSetByUser bool
}

func (rac *ResourceAttributeConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(rac)
	if err != nil {
		return err
	}
	rac.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// ResourceAttributesConfig provides config for github resource attributes.
type ResourceAttributesConfig struct {
	OrganizationName ResourceAttributeConfig `mapstructure:"organization.name"`
	VcsVendorName    ResourceAttributeConfig `mapstructure:"vcs.vendor.name"`
}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		OrganizationName: ResourceAttributeConfig{
			Enabled: true,
		},
		VcsVendorName: ResourceAttributeConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for github metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsConfig            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesConfig `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsConfig(),
		ResourceAttributes: DefaultResourceAttributesConfig(),
	}
}
