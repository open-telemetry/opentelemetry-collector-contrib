// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/scraper/scrapertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := scrapertest.NewNopSettings(scrapertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsClientNetCountDataPoint(ts, 1, AttributeNetworkTransportUdp)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsClientNetTCPConnectionAcceptedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsClientOperationCountDataPoint(ts, 1, 15, "nfs.operation.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsClientProcedureCountDataPoint(ts, 1, 15, "onc_rpc.procedure.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsClientRPCAuthrefreshCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsClientRPCCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsClientRPCRetransmitCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsServerFhStaleCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsServerIoDataPoint(ts, 1, AttributeNetworkIoDirectionTransmit)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsServerNetCountDataPoint(ts, 1, AttributeNetworkTransportUdp)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsServerNetTCPConnectionAcceptedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsServerOperationCountDataPoint(ts, 1, 15, "nfs.operation.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsServerProcedureCountDataPoint(ts, 1, 15, "onc_rpc.procedure.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsServerRepcacheRequestsDataPoint(ts, 1, AttributeNfsServerRepcacheStatusHit)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsServerRPCCountDataPoint(ts, 1, AttributeErrorTypeFormat)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordNfsServerThreadCountDataPoint(ts, 1)

			res := pcommon.NewResource()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "nfs.client.net.count":
					assert.False(t, validatedMetrics["nfs.client.net.count"], "Found a duplicate in the metrics slice: nfs.client.net.count")
					validatedMetrics["nfs.client.net.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client TCP segments and UDP datagrams handled.", ms.At(i).Description())
					assert.Equal(t, "{record}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("network.transport")
					assert.True(t, ok)
					assert.Equal(t, "udp", attrVal.Str())
				case "nfs.client.net.tcp.connection.accepted":
					assert.False(t, validatedMetrics["nfs.client.net.tcp.connection.accepted"], "Found a duplicate in the metrics slice: nfs.client.net.tcp.connection.accepted")
					validatedMetrics["nfs.client.net.tcp.connection.accepted"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client TCP connections accepted", ms.At(i).Description())
					assert.Equal(t, "{connection}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "nfs.client.operation.count":
					assert.False(t, validatedMetrics["nfs.client.operation.count"], "Found a duplicate in the metrics slice: nfs.client.operation.count")
					validatedMetrics["nfs.client.operation.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFSv4+ client operations", ms.At(i).Description())
					assert.Equal(t, "{operation}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("onc_rpc.version")
					assert.True(t, ok)
					assert.EqualValues(t, 15, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("nfs.operation.name")
					assert.True(t, ok)
					assert.Equal(t, "nfs.operation.name-val", attrVal.Str())
				case "nfs.client.procedure.count":
					assert.False(t, validatedMetrics["nfs.client.procedure.count"], "Found a duplicate in the metrics slice: nfs.client.procedure.count")
					validatedMetrics["nfs.client.procedure.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client procedures", ms.At(i).Description())
					assert.Equal(t, "{procedure}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("onc_rpc.version")
					assert.True(t, ok)
					assert.EqualValues(t, 15, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("onc_rpc.procedure.name")
					assert.True(t, ok)
					assert.Equal(t, "onc_rpc.procedure.name-val", attrVal.Str())
				case "nfs.client.rpc.authrefresh.count":
					assert.False(t, validatedMetrics["nfs.client.rpc.authrefresh.count"], "Found a duplicate in the metrics slice: nfs.client.rpc.authrefresh.count")
					validatedMetrics["nfs.client.rpc.authrefresh.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client RPC authentication refreshes", ms.At(i).Description())
					assert.Equal(t, "{authrefresh}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "nfs.client.rpc.count":
					assert.False(t, validatedMetrics["nfs.client.rpc.count"], "Found a duplicate in the metrics slice: nfs.client.rpc.count")
					validatedMetrics["nfs.client.rpc.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client RPCs sent, regardless of whether they're accepted/rejected by the server.", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "nfs.client.rpc.retransmit.count":
					assert.False(t, validatedMetrics["nfs.client.rpc.retransmit.count"], "Found a duplicate in the metrics slice: nfs.client.rpc.retransmit.count")
					validatedMetrics["nfs.client.rpc.retransmit.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client RPC retransmits", ms.At(i).Description())
					assert.Equal(t, "{retransmit}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "nfs.server.fh.stale.count":
					assert.False(t, validatedMetrics["nfs.server.fh.stale.count"], "Found a duplicate in the metrics slice: nfs.server.fh.stale.count")
					validatedMetrics["nfs.server.fh.stale.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the cumulative count of kernel NFS server stale file handles.", ms.At(i).Description())
					assert.Equal(t, "{fh}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "nfs.server.io":
					assert.False(t, validatedMetrics["nfs.server.io"], "Found a duplicate in the metrics slice: nfs.server.io")
					validatedMetrics["nfs.server.io"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server bytes returned to receive and transmit (read and write) requests.", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("network.io.direction")
					assert.True(t, ok)
					assert.Equal(t, "transmit", attrVal.Str())
				case "nfs.server.net.count":
					assert.False(t, validatedMetrics["nfs.server.net.count"], "Found a duplicate in the metrics slice: nfs.server.net.count")
					validatedMetrics["nfs.server.net.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server TCP segments and UDP datagrams handled.", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("network.transport")
					assert.True(t, ok)
					assert.Equal(t, "udp", attrVal.Str())
				case "nfs.server.net.tcp.connection.accepted":
					assert.False(t, validatedMetrics["nfs.server.net.tcp.connection.accepted"], "Found a duplicate in the metrics slice: nfs.server.net.tcp.connection.accepted")
					validatedMetrics["nfs.server.net.tcp.connection.accepted"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server TCP connections accepted", ms.At(i).Description())
					assert.Equal(t, "{connection}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "nfs.server.operation.count":
					assert.False(t, validatedMetrics["nfs.server.operation.count"], "Found a duplicate in the metrics slice: nfs.server.operation.count")
					validatedMetrics["nfs.server.operation.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFSv4+ server operations", ms.At(i).Description())
					assert.Equal(t, "{operation}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("onc_rpc.version")
					assert.True(t, ok)
					assert.EqualValues(t, 15, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("nfs.operation.name")
					assert.True(t, ok)
					assert.Equal(t, "nfs.operation.name-val", attrVal.Str())
				case "nfs.server.procedure.count":
					assert.False(t, validatedMetrics["nfs.server.procedure.count"], "Found a duplicate in the metrics slice: nfs.server.procedure.count")
					validatedMetrics["nfs.server.procedure.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server procedures", ms.At(i).Description())
					assert.Equal(t, "{procedure}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("onc_rpc.version")
					assert.True(t, ok)
					assert.EqualValues(t, 15, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("onc_rpc.procedure.name")
					assert.True(t, ok)
					assert.Equal(t, "onc_rpc.procedure.name-val", attrVal.Str())
				case "nfs.server.repcache.requests":
					assert.False(t, validatedMetrics["nfs.server.repcache.requests"], "Found a duplicate in the metrics slice: nfs.server.repcache.requests")
					validatedMetrics["nfs.server.repcache.requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the kernel NFS server reply cache request count by cache hit status.", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("nfs.server.repcache.status")
					assert.True(t, ok)
					assert.Equal(t, "hit", attrVal.Str())
				case "nfs.server.rpc.count":
					assert.False(t, validatedMetrics["nfs.server.rpc.count"], "Found a duplicate in the metrics slice: nfs.server.rpc.count")
					validatedMetrics["nfs.server.rpc.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server RPCs handled.", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("error.type")
					assert.True(t, ok)
					assert.Equal(t, "format", attrVal.Str())
				case "nfs.server.thread.count":
					assert.False(t, validatedMetrics["nfs.server.thread.count"], "Found a duplicate in the metrics slice: nfs.server.thread.count")
					validatedMetrics["nfs.server.thread.count"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server available threads", ms.At(i).Description())
					assert.Equal(t, "{thread}", ms.At(i).Unit())
					assert.False(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				}
			}
		})
	}
}
