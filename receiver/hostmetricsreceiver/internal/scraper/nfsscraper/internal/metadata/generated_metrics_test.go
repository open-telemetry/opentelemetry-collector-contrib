// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/scraper/scrapertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := scrapertest.NewNopSettings(scrapertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsNetCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsNetTCPConnectionCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsNetTCPCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsNetUDPCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsOperationCountDataPoint(ts, 1, "rpc.onc.version-val", "rpc.nfs.operation.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsProcedureCountDataPoint(ts, 1, "rpc.onc.version-val", "rpc.onc.procedure.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsRPCAuthrefreshCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsRPCCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsRPCRetransmitCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdFhStaleCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdIoReadCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdIoWriteCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdNetCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdNetTCPConnectionCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdNetTCPCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdNetUDPCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdOperationCountDataPoint(ts, 1, "rpc.onc.version-val", "rpc.nfs.operation.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdProcedureCountDataPoint(ts, 1, "rpc.onc.version-val", "rpc.onc.procedure.name-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdRepcacheHitsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdRepcacheMissesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdRepcacheNocacheDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdRPCBadCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdRPCBadauthCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdRPCBadclientCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdRPCBadfmtCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdRPCCountDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemNfsdThreadCountDataPoint(ts, 1)

			res := pcommon.NewResource()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "system.nfs.net.count":
					assert.False(t, validatedMetrics["system.nfs.net.count"], "Found a duplicate in the metrics slice: system.nfs.net.count")
					validatedMetrics["system.nfs.net.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client network requests handled", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfs.net.tcp.connection.count":
					assert.False(t, validatedMetrics["system.nfs.net.tcp.connection.count"], "Found a duplicate in the metrics slice: system.nfs.net.tcp.connection.count")
					validatedMetrics["system.nfs.net.tcp.connection.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client TCP connections accepted", ms.At(i).Description())
					assert.Equal(t, "{connection}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfs.net.tcp.count":
					assert.False(t, validatedMetrics["system.nfs.net.tcp.count"], "Found a duplicate in the metrics slice: system.nfs.net.tcp.count")
					validatedMetrics["system.nfs.net.tcp.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client TCP segments handled", ms.At(i).Description())
					assert.Equal(t, "{segment}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfs.net.udp.count":
					assert.False(t, validatedMetrics["system.nfs.net.udp.count"], "Found a duplicate in the metrics slice: system.nfs.net.udp.count")
					validatedMetrics["system.nfs.net.udp.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client UDP datagrams handled", ms.At(i).Description())
					assert.Equal(t, "{datagram}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfs.operation.count":
					assert.False(t, validatedMetrics["system.nfs.operation.count"], "Found a duplicate in the metrics slice: system.nfs.operation.count")
					validatedMetrics["system.nfs.operation.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFSv4+ client operations", ms.At(i).Description())
					assert.Equal(t, "{procedure}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("rpc.onc.version")
					assert.True(t, ok)
					assert.Equal(t, "rpc.onc.version-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rpc.nfs.operation.name")
					assert.True(t, ok)
					assert.Equal(t, "rpc.nfs.operation.name-val", attrVal.Str())
				case "system.nfs.procedure.count":
					assert.False(t, validatedMetrics["system.nfs.procedure.count"], "Found a duplicate in the metrics slice: system.nfs.procedure.count")
					validatedMetrics["system.nfs.procedure.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client procedures", ms.At(i).Description())
					assert.Equal(t, "{procedure}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("rpc.onc.version")
					assert.True(t, ok)
					assert.Equal(t, "rpc.onc.version-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rpc.onc.procedure.name")
					assert.True(t, ok)
					assert.Equal(t, "rpc.onc.procedure.name-val", attrVal.Str())
				case "system.nfs.rpc.authrefresh.count":
					assert.False(t, validatedMetrics["system.nfs.rpc.authrefresh.count"], "Found a duplicate in the metrics slice: system.nfs.rpc.authrefresh.count")
					validatedMetrics["system.nfs.rpc.authrefresh.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client RPC authentication refreshes", ms.At(i).Description())
					assert.Equal(t, "{authrefresh}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfs.rpc.count":
					assert.False(t, validatedMetrics["system.nfs.rpc.count"], "Found a duplicate in the metrics slice: system.nfs.rpc.count")
					validatedMetrics["system.nfs.rpc.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client RPCs handled", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfs.rpc.retransmit.count":
					assert.False(t, validatedMetrics["system.nfs.rpc.retransmit.count"], "Found a duplicate in the metrics slice: system.nfs.rpc.retransmit.count")
					validatedMetrics["system.nfs.rpc.retransmit.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client RPC retransmits", ms.At(i).Description())
					assert.Equal(t, "{retransmit}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.fh.stale.count":
					assert.False(t, validatedMetrics["system.nfsd.fh.stale.count"], "Found a duplicate in the metrics slice: system.nfsd.fh.stale.count")
					validatedMetrics["system.nfsd.fh.stale.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server stale file handles", ms.At(i).Description())
					assert.Equal(t, "{fh}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.io.read.count":
					assert.False(t, validatedMetrics["system.nfsd.io.read.count"], "Found a duplicate in the metrics slice: system.nfsd.io.read.count")
					validatedMetrics["system.nfsd.io.read.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server bytes returned to read requests", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.io.write.count":
					assert.False(t, validatedMetrics["system.nfsd.io.write.count"], "Found a duplicate in the metrics slice: system.nfsd.io.write.count")
					validatedMetrics["system.nfsd.io.write.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server bytes passed to write requests", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.net.count":
					assert.False(t, validatedMetrics["system.nfsd.net.count"], "Found a duplicate in the metrics slice: system.nfsd.net.count")
					validatedMetrics["system.nfsd.net.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server network requests handled", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.net.tcp.connection.count":
					assert.False(t, validatedMetrics["system.nfsd.net.tcp.connection.count"], "Found a duplicate in the metrics slice: system.nfsd.net.tcp.connection.count")
					validatedMetrics["system.nfsd.net.tcp.connection.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server TCP connections accepted", ms.At(i).Description())
					assert.Equal(t, "{connection}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.net.tcp.count":
					assert.False(t, validatedMetrics["system.nfsd.net.tcp.count"], "Found a duplicate in the metrics slice: system.nfsd.net.tcp.count")
					validatedMetrics["system.nfsd.net.tcp.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server TCP segments handled", ms.At(i).Description())
					assert.Equal(t, "{segment}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.net.udp.count":
					assert.False(t, validatedMetrics["system.nfsd.net.udp.count"], "Found a duplicate in the metrics slice: system.nfsd.net.udp.count")
					validatedMetrics["system.nfsd.net.udp.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server UDP datagrams handled", ms.At(i).Description())
					assert.Equal(t, "{datagram}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.operation.count":
					assert.False(t, validatedMetrics["system.nfsd.operation.count"], "Found a duplicate in the metrics slice: system.nfsd.operation.count")
					validatedMetrics["system.nfsd.operation.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFSv4+ server operations", ms.At(i).Description())
					assert.Equal(t, "{operation}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("rpc.onc.version")
					assert.True(t, ok)
					assert.Equal(t, "rpc.onc.version-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rpc.nfs.operation.name")
					assert.True(t, ok)
					assert.Equal(t, "rpc.nfs.operation.name-val", attrVal.Str())
				case "system.nfsd.procedure.count":
					assert.False(t, validatedMetrics["system.nfsd.procedure.count"], "Found a duplicate in the metrics slice: system.nfsd.procedure.count")
					validatedMetrics["system.nfsd.procedure.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS client procedures", ms.At(i).Description())
					assert.Equal(t, "{procedure}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("rpc.onc.version")
					assert.True(t, ok)
					assert.Equal(t, "rpc.onc.version-val", attrVal.Str())
					attrVal, ok = dp.Attributes().Get("rpc.onc.procedure.name")
					assert.True(t, ok)
					assert.Equal(t, "rpc.onc.procedure.name-val", attrVal.Str())
				case "system.nfsd.repcache.hits":
					assert.False(t, validatedMetrics["system.nfsd.repcache.hits"], "Found a duplicate in the metrics slice: system.nfsd.repcache.hits")
					validatedMetrics["system.nfsd.repcache.hits"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the kernel NFS server request reply cache hit count", ms.At(i).Description())
					assert.Equal(t, "{hit}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.repcache.misses":
					assert.False(t, validatedMetrics["system.nfsd.repcache.misses"], "Found a duplicate in the metrics slice: system.nfsd.repcache.misses")
					validatedMetrics["system.nfsd.repcache.misses"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the kernel NFS server request reply cache miss count", ms.At(i).Description())
					assert.Equal(t, "{miss}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.repcache.nocache":
					assert.False(t, validatedMetrics["system.nfsd.repcache.nocache"], "Found a duplicate in the metrics slice: system.nfsd.repcache.nocache")
					validatedMetrics["system.nfsd.repcache.nocache"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server request replies that are uncacheable", ms.At(i).Description())
					assert.Equal(t, "{miss}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.rpc.bad.count":
					assert.False(t, validatedMetrics["system.nfsd.rpc.bad.count"], "Found a duplicate in the metrics slice: system.nfsd.rpc.bad.count")
					validatedMetrics["system.nfsd.rpc.bad.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the total count of kernel NFS server bad RPCs", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.rpc.badauth.count":
					assert.False(t, validatedMetrics["system.nfsd.rpc.badauth.count"], "Found a duplicate in the metrics slice: system.nfsd.rpc.badauth.count")
					validatedMetrics["system.nfsd.rpc.badauth.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the total count of kernel NFS server badly authenticated RPCs", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.rpc.badclient.count":
					assert.False(t, validatedMetrics["system.nfsd.rpc.badclient.count"], "Found a duplicate in the metrics slice: system.nfsd.rpc.badclient.count")
					validatedMetrics["system.nfsd.rpc.badclient.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the total count of kernel NFS server unauthorized client RPCs", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.rpc.badfmt.count":
					assert.False(t, validatedMetrics["system.nfsd.rpc.badfmt.count"], "Found a duplicate in the metrics slice: system.nfsd.rpc.badfmt.count")
					validatedMetrics["system.nfsd.rpc.badfmt.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the total count of kernel NFS server badly formatted RPCs", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.rpc.count":
					assert.False(t, validatedMetrics["system.nfsd.rpc.count"], "Found a duplicate in the metrics slice: system.nfsd.rpc.count")
					validatedMetrics["system.nfsd.rpc.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server RPCs handled", ms.At(i).Description())
					assert.Equal(t, "{request}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.nfsd.thread.count":
					assert.False(t, validatedMetrics["system.nfsd.thread.count"], "Found a duplicate in the metrics slice: system.nfsd.thread.count")
					validatedMetrics["system.nfsd.thread.count"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Reports the count of kernel NFS server available threads", ms.At(i).Description())
					assert.Equal(t, "{thread}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				}
			}
		})
	}
}
