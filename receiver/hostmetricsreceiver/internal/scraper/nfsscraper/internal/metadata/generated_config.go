// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for nfs metrics.
type MetricsConfig struct {
	NfsClientNetCount              MetricConfig `mapstructure:"nfs.client.net.count"`
	NfsClientNetTCPConnectionCount MetricConfig `mapstructure:"nfs.client.net.tcp.connection.count"`
	NfsClientNetTCPCount           MetricConfig `mapstructure:"nfs.client.net.tcp.count"`
	NfsClientNetUDPCount           MetricConfig `mapstructure:"nfs.client.net.udp.count"`
	NfsClientOperationCount        MetricConfig `mapstructure:"nfs.client.operation.count"`
	NfsClientProcedureCount        MetricConfig `mapstructure:"nfs.client.procedure.count"`
	NfsClientRPCAuthrefreshCount   MetricConfig `mapstructure:"nfs.client.rpc.authrefresh.count"`
	NfsClientRPCCount              MetricConfig `mapstructure:"nfs.client.rpc.count"`
	NfsClientRPCRetransmitCount    MetricConfig `mapstructure:"nfs.client.rpc.retransmit.count"`
	NfsServerFhStaleCount          MetricConfig `mapstructure:"nfs.server.fh.stale.count"`
	NfsServerIoReadCount           MetricConfig `mapstructure:"nfs.server.io.read.count"`
	NfsServerIoWriteCount          MetricConfig `mapstructure:"nfs.server.io.write.count"`
	NfsServerNetCount              MetricConfig `mapstructure:"nfs.server.net.count"`
	NfsServerNetTCPConnectionCount MetricConfig `mapstructure:"nfs.server.net.tcp.connection.count"`
	NfsServerNetTCPCount           MetricConfig `mapstructure:"nfs.server.net.tcp.count"`
	NfsServerNetUDPCount           MetricConfig `mapstructure:"nfs.server.net.udp.count"`
	NfsServerOperationCount        MetricConfig `mapstructure:"nfs.server.operation.count"`
	NfsServerProcedureCount        MetricConfig `mapstructure:"nfs.server.procedure.count"`
	NfsServerRepcacheHits          MetricConfig `mapstructure:"nfs.server.repcache.hits"`
	NfsServerRepcacheMisses        MetricConfig `mapstructure:"nfs.server.repcache.misses"`
	NfsServerRepcacheNocache       MetricConfig `mapstructure:"nfs.server.repcache.nocache"`
	NfsServerRPCBadCount           MetricConfig `mapstructure:"nfs.server.rpc.bad.count"`
	NfsServerRPCBadauthCount       MetricConfig `mapstructure:"nfs.server.rpc.badauth.count"`
	NfsServerRPCBadclientCount     MetricConfig `mapstructure:"nfs.server.rpc.badclient.count"`
	NfsServerRPCBadfmtCount        MetricConfig `mapstructure:"nfs.server.rpc.badfmt.count"`
	NfsServerRPCCount              MetricConfig `mapstructure:"nfs.server.rpc.count"`
	NfsServerThreadCount           MetricConfig `mapstructure:"nfs.server.thread.count"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		NfsClientNetCount: MetricConfig{
			Enabled: true,
		},
		NfsClientNetTCPConnectionCount: MetricConfig{
			Enabled: true,
		},
		NfsClientNetTCPCount: MetricConfig{
			Enabled: true,
		},
		NfsClientNetUDPCount: MetricConfig{
			Enabled: true,
		},
		NfsClientOperationCount: MetricConfig{
			Enabled: true,
		},
		NfsClientProcedureCount: MetricConfig{
			Enabled: true,
		},
		NfsClientRPCAuthrefreshCount: MetricConfig{
			Enabled: true,
		},
		NfsClientRPCCount: MetricConfig{
			Enabled: true,
		},
		NfsClientRPCRetransmitCount: MetricConfig{
			Enabled: true,
		},
		NfsServerFhStaleCount: MetricConfig{
			Enabled: true,
		},
		NfsServerIoReadCount: MetricConfig{
			Enabled: true,
		},
		NfsServerIoWriteCount: MetricConfig{
			Enabled: true,
		},
		NfsServerNetCount: MetricConfig{
			Enabled: true,
		},
		NfsServerNetTCPConnectionCount: MetricConfig{
			Enabled: true,
		},
		NfsServerNetTCPCount: MetricConfig{
			Enabled: true,
		},
		NfsServerNetUDPCount: MetricConfig{
			Enabled: true,
		},
		NfsServerOperationCount: MetricConfig{
			Enabled: true,
		},
		NfsServerProcedureCount: MetricConfig{
			Enabled: true,
		},
		NfsServerRepcacheHits: MetricConfig{
			Enabled: true,
		},
		NfsServerRepcacheMisses: MetricConfig{
			Enabled: true,
		},
		NfsServerRepcacheNocache: MetricConfig{
			Enabled: true,
		},
		NfsServerRPCBadCount: MetricConfig{
			Enabled: true,
		},
		NfsServerRPCBadauthCount: MetricConfig{
			Enabled: true,
		},
		NfsServerRPCBadclientCount: MetricConfig{
			Enabled: true,
		},
		NfsServerRPCBadfmtCount: MetricConfig{
			Enabled: true,
		},
		NfsServerRPCCount: MetricConfig{
			Enabled: true,
		},
		NfsServerThreadCount: MetricConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for nfs metrics builder.
type MetricsBuilderConfig struct {
	Metrics MetricsConfig `mapstructure:"metrics"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics: DefaultMetricsConfig(),
	}
}
