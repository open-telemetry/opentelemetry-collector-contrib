// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/scraper/scrapertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := scrapertest.NewNopSettings(scrapertest.NopType)
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiCPUSomeAvg10DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiCPUSomeAvg300DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiCPUSomeAvg60DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiCPUSomeTotalDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiIoFullAvg10DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiIoFullAvg300DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiIoFullAvg60DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiIoFullTotalDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiIoSomeAvg10DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiIoSomeAvg300DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiIoSomeAvg60DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiIoSomeTotalDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiMemoryFullAvg10DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiMemoryFullAvg300DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiMemoryFullAvg60DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiMemoryFullTotalDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiMemorySomeAvg10DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiMemorySomeAvg300DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiMemorySomeAvg60DataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordSystemPsiMemorySomeTotalDataPoint(ts, 1)

			res := pcommon.NewResource()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "system.psi.cpu.some.avg10":
					assert.False(t, validatedMetrics["system.psi.cpu.some.avg10"], "Found a duplicate in the metrics slice: system.psi.cpu.some.avg10")
					validatedMetrics["system.psi.cpu.some.avg10"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU pressure stall information - some tasks waiting, 10 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.cpu.some.avg300":
					assert.False(t, validatedMetrics["system.psi.cpu.some.avg300"], "Found a duplicate in the metrics slice: system.psi.cpu.some.avg300")
					validatedMetrics["system.psi.cpu.some.avg300"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU pressure stall information - some tasks waiting, 300 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.cpu.some.avg60":
					assert.False(t, validatedMetrics["system.psi.cpu.some.avg60"], "Found a duplicate in the metrics slice: system.psi.cpu.some.avg60")
					validatedMetrics["system.psi.cpu.some.avg60"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "CPU pressure stall information - some tasks waiting, 60 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.cpu.some.total":
					assert.False(t, validatedMetrics["system.psi.cpu.some.total"], "Found a duplicate in the metrics slice: system.psi.cpu.some.total")
					validatedMetrics["system.psi.cpu.some.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "CPU pressure stall information - some tasks waiting, total time in microseconds", ms.At(i).Description())
					assert.Equal(t, "us", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.psi.io.full.avg10":
					assert.False(t, validatedMetrics["system.psi.io.full.avg10"], "Found a duplicate in the metrics slice: system.psi.io.full.avg10")
					validatedMetrics["system.psi.io.full.avg10"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "IO pressure stall information - all tasks waiting, 10 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.io.full.avg300":
					assert.False(t, validatedMetrics["system.psi.io.full.avg300"], "Found a duplicate in the metrics slice: system.psi.io.full.avg300")
					validatedMetrics["system.psi.io.full.avg300"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "IO pressure stall information - all tasks waiting, 300 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.io.full.avg60":
					assert.False(t, validatedMetrics["system.psi.io.full.avg60"], "Found a duplicate in the metrics slice: system.psi.io.full.avg60")
					validatedMetrics["system.psi.io.full.avg60"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "IO pressure stall information - all tasks waiting, 60 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.io.full.total":
					assert.False(t, validatedMetrics["system.psi.io.full.total"], "Found a duplicate in the metrics slice: system.psi.io.full.total")
					validatedMetrics["system.psi.io.full.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "IO pressure stall information - all tasks waiting, total time in microseconds", ms.At(i).Description())
					assert.Equal(t, "us", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.psi.io.some.avg10":
					assert.False(t, validatedMetrics["system.psi.io.some.avg10"], "Found a duplicate in the metrics slice: system.psi.io.some.avg10")
					validatedMetrics["system.psi.io.some.avg10"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "IO pressure stall information - some tasks waiting, 10 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.io.some.avg300":
					assert.False(t, validatedMetrics["system.psi.io.some.avg300"], "Found a duplicate in the metrics slice: system.psi.io.some.avg300")
					validatedMetrics["system.psi.io.some.avg300"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "IO pressure stall information - some tasks waiting, 300 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.io.some.avg60":
					assert.False(t, validatedMetrics["system.psi.io.some.avg60"], "Found a duplicate in the metrics slice: system.psi.io.some.avg60")
					validatedMetrics["system.psi.io.some.avg60"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "IO pressure stall information - some tasks waiting, 60 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.io.some.total":
					assert.False(t, validatedMetrics["system.psi.io.some.total"], "Found a duplicate in the metrics slice: system.psi.io.some.total")
					validatedMetrics["system.psi.io.some.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "IO pressure stall information - some tasks waiting, total time in microseconds", ms.At(i).Description())
					assert.Equal(t, "us", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.psi.memory.full.avg10":
					assert.False(t, validatedMetrics["system.psi.memory.full.avg10"], "Found a duplicate in the metrics slice: system.psi.memory.full.avg10")
					validatedMetrics["system.psi.memory.full.avg10"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory pressure stall information - all tasks waiting, 10 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.memory.full.avg300":
					assert.False(t, validatedMetrics["system.psi.memory.full.avg300"], "Found a duplicate in the metrics slice: system.psi.memory.full.avg300")
					validatedMetrics["system.psi.memory.full.avg300"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory pressure stall information - all tasks waiting, 300 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.memory.full.avg60":
					assert.False(t, validatedMetrics["system.psi.memory.full.avg60"], "Found a duplicate in the metrics slice: system.psi.memory.full.avg60")
					validatedMetrics["system.psi.memory.full.avg60"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory pressure stall information - all tasks waiting, 60 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.memory.full.total":
					assert.False(t, validatedMetrics["system.psi.memory.full.total"], "Found a duplicate in the metrics slice: system.psi.memory.full.total")
					validatedMetrics["system.psi.memory.full.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Memory pressure stall information - all tasks waiting, total time in microseconds", ms.At(i).Description())
					assert.Equal(t, "us", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "system.psi.memory.some.avg10":
					assert.False(t, validatedMetrics["system.psi.memory.some.avg10"], "Found a duplicate in the metrics slice: system.psi.memory.some.avg10")
					validatedMetrics["system.psi.memory.some.avg10"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory pressure stall information - some tasks waiting, 10 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.memory.some.avg300":
					assert.False(t, validatedMetrics["system.psi.memory.some.avg300"], "Found a duplicate in the metrics slice: system.psi.memory.some.avg300")
					validatedMetrics["system.psi.memory.some.avg300"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory pressure stall information - some tasks waiting, 300 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.memory.some.avg60":
					assert.False(t, validatedMetrics["system.psi.memory.some.avg60"], "Found a duplicate in the metrics slice: system.psi.memory.some.avg60")
					validatedMetrics["system.psi.memory.some.avg60"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "Memory pressure stall information - some tasks waiting, 60 second average", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
				case "system.psi.memory.some.total":
					assert.False(t, validatedMetrics["system.psi.memory.some.total"], "Found a duplicate in the metrics slice: system.psi.memory.some.total")
					validatedMetrics["system.psi.memory.some.total"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "Memory pressure stall information - some tasks waiting, total time in microseconds", ms.At(i).Description())
					assert.Equal(t, "us", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				}
			}
		})
	}
}
