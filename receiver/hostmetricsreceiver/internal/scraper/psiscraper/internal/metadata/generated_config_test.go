// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/stretchr/testify/require"

	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/confmap/confmaptest"
)

func TestMetricsBuilderConfig(t *testing.T) {
	tests := []struct {
		name string
		want MetricsBuilderConfig
	}{
		{
			name: "default",
			want: DefaultMetricsBuilderConfig(),
		},
		{
			name: "all_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					SystemPsiCPUSomeAvg10:     MetricConfig{Enabled: true},
					SystemPsiCPUSomeAvg300:    MetricConfig{Enabled: true},
					SystemPsiCPUSomeAvg60:     MetricConfig{Enabled: true},
					SystemPsiCPUSomeTotal:     MetricConfig{Enabled: true},
					SystemPsiIoFullAvg10:      MetricConfig{Enabled: true},
					SystemPsiIoFullAvg300:     MetricConfig{Enabled: true},
					SystemPsiIoFullAvg60:      MetricConfig{Enabled: true},
					SystemPsiIoFullTotal:      MetricConfig{Enabled: true},
					SystemPsiIoSomeAvg10:      MetricConfig{Enabled: true},
					SystemPsiIoSomeAvg300:     MetricConfig{Enabled: true},
					SystemPsiIoSomeAvg60:      MetricConfig{Enabled: true},
					SystemPsiIoSomeTotal:      MetricConfig{Enabled: true},
					SystemPsiMemoryFullAvg10:  MetricConfig{Enabled: true},
					SystemPsiMemoryFullAvg300: MetricConfig{Enabled: true},
					SystemPsiMemoryFullAvg60:  MetricConfig{Enabled: true},
					SystemPsiMemoryFullTotal:  MetricConfig{Enabled: true},
					SystemPsiMemorySomeAvg10:  MetricConfig{Enabled: true},
					SystemPsiMemorySomeAvg300: MetricConfig{Enabled: true},
					SystemPsiMemorySomeAvg60:  MetricConfig{Enabled: true},
					SystemPsiMemorySomeTotal:  MetricConfig{Enabled: true},
				},
			},
		},
		{
			name: "none_set",
			want: MetricsBuilderConfig{
				Metrics: MetricsConfig{
					SystemPsiCPUSomeAvg10:     MetricConfig{Enabled: false},
					SystemPsiCPUSomeAvg300:    MetricConfig{Enabled: false},
					SystemPsiCPUSomeAvg60:     MetricConfig{Enabled: false},
					SystemPsiCPUSomeTotal:     MetricConfig{Enabled: false},
					SystemPsiIoFullAvg10:      MetricConfig{Enabled: false},
					SystemPsiIoFullAvg300:     MetricConfig{Enabled: false},
					SystemPsiIoFullAvg60:      MetricConfig{Enabled: false},
					SystemPsiIoFullTotal:      MetricConfig{Enabled: false},
					SystemPsiIoSomeAvg10:      MetricConfig{Enabled: false},
					SystemPsiIoSomeAvg300:     MetricConfig{Enabled: false},
					SystemPsiIoSomeAvg60:      MetricConfig{Enabled: false},
					SystemPsiIoSomeTotal:      MetricConfig{Enabled: false},
					SystemPsiMemoryFullAvg10:  MetricConfig{Enabled: false},
					SystemPsiMemoryFullAvg300: MetricConfig{Enabled: false},
					SystemPsiMemoryFullAvg60:  MetricConfig{Enabled: false},
					SystemPsiMemoryFullTotal:  MetricConfig{Enabled: false},
					SystemPsiMemorySomeAvg10:  MetricConfig{Enabled: false},
					SystemPsiMemorySomeAvg300: MetricConfig{Enabled: false},
					SystemPsiMemorySomeAvg60:  MetricConfig{Enabled: false},
					SystemPsiMemorySomeTotal:  MetricConfig{Enabled: false},
				},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			cfg := loadMetricsBuilderConfig(t, tt.name)
			diff := cmp.Diff(tt.want, cfg, cmpopts.IgnoreUnexported(MetricConfig{}))
			require.Emptyf(t, diff, "Config mismatch (-expected +actual):\n%s", diff)
		})
	}
}

func loadMetricsBuilderConfig(t *testing.T, name string) MetricsBuilderConfig {
	cm, err := confmaptest.LoadConf(filepath.Join("testdata", "config.yaml"))
	require.NoError(t, err)
	sub, err := cm.Sub(name)
	require.NoError(t, err)
	cfg := DefaultMetricsBuilderConfig()
	require.NoError(t, sub.Unmarshal(&cfg, confmap.WithIgnoreUnused()))
	return cfg
}
