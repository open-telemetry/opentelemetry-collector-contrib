type: memory

status:
  class: scraper
  stability:
    beta: [metrics]
  distributions: [core, contrib, k8s]
  codeowners:
    active: [dmitryax, braydonk]

sem_conv_version: 1.9.0

attributes:
  state:
    description: Breakdown of memory usage by type.
    type: string
    enum: [buffered, cached, inactive, free, slab_reclaimable, slab_unreclaimable, used]

metrics:
  system.memory.limit:
    enabled: false
    description: Total bytes of memory available.
    unit: By
    sum:
      value_type: int
      aggregation_temporality: cumulative
      monotonic: false

  system.memory.usage:
    enabled: true
    description: Bytes of memory in use.
    unit: By
    sum:
      value_type: int
      aggregation_temporality: cumulative
      monotonic: false
    attributes: [state]

  system.memory.utilization:
    enabled: false
    description: Percentage of memory bytes in use.
    unit: "1"
    gauge:
      value_type: double
    attributes: [state]

  system.memory.page_size:
    enabled: false
    description: A constant value for the system's configured page size.
    unit: By
    gauge:
      value_type: int
      aggregation_temporality: cumulative
      monotonic: false

  system.linux.memory.available:
    enabled: false
    description: An estimate of how much memory is available for starting new applications, without swapping. This is a more accurate alternative than system.memory.usage with state=free. (Linux only)
    unit: By
    sum:
      value_type: int
      aggregation_temporality: cumulative
      monotonic: false

  system.linux.memory.dirty:
    enabled: false
    description: The amount of dirty memory according to `/proc/meminfo`.
    unit: By
    sum:
      value_type: int
      aggregation_temporality: cumulative
      monotonic: false
