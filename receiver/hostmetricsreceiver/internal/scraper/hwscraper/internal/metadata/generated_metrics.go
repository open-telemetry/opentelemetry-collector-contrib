// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/scraper"
	conventions "go.opentelemetry.io/otel/semconv/v1.9.0"
)

// AttributeLimitType specifies the value limit_type attribute.
type AttributeLimitType int

const (
	_ AttributeLimitType = iota
	AttributeLimitTypeHighCritical
	AttributeLimitTypeHighDegraded
	AttributeLimitTypeLowCritical
	AttributeLimitTypeLowDegraded
)

// String returns the string representation of the AttributeLimitType.
func (av AttributeLimitType) String() string {
	switch av {
	case AttributeLimitTypeHighCritical:
		return "high.critical"
	case AttributeLimitTypeHighDegraded:
		return "high.degraded"
	case AttributeLimitTypeLowCritical:
		return "low.critical"
	case AttributeLimitTypeLowDegraded:
		return "low.degraded"
	}
	return ""
}

// MapAttributeLimitType is a helper map of string to AttributeLimitType attribute value.
var MapAttributeLimitType = map[string]AttributeLimitType{
	"high.critical": AttributeLimitTypeHighCritical,
	"high.degraded": AttributeLimitTypeHighDegraded,
	"low.critical":  AttributeLimitTypeLowCritical,
	"low.degraded":  AttributeLimitTypeLowDegraded,
}

// AttributeState specifies the value state attribute.
type AttributeState int

const (
	_ AttributeState = iota
	AttributeStateDegraded
	AttributeStateFailed
	AttributeStateNeedsCleaning
	AttributeStateOk
	AttributeStatePredictedFailure
)

// String returns the string representation of the AttributeState.
func (av AttributeState) String() string {
	switch av {
	case AttributeStateDegraded:
		return "degraded"
	case AttributeStateFailed:
		return "failed"
	case AttributeStateNeedsCleaning:
		return "needs_cleaning"
	case AttributeStateOk:
		return "ok"
	case AttributeStatePredictedFailure:
		return "predicted_failure"
	}
	return ""
}

// MapAttributeState is a helper map of string to AttributeState attribute value.
var MapAttributeState = map[string]AttributeState{
	"degraded":          AttributeStateDegraded,
	"failed":            AttributeStateFailed,
	"needs_cleaning":    AttributeStateNeedsCleaning,
	"ok":                AttributeStateOk,
	"predicted_failure": AttributeStatePredictedFailure,
}

// AttributeType specifies the value type attribute.
type AttributeType int

const (
	_ AttributeType = iota
	AttributeTypeBattery
	AttributeTypeCpu
	AttributeTypeDiskController
	AttributeTypeEnclosure
	AttributeTypeFan
	AttributeTypeGpu
	AttributeTypeLogicalDisk
	AttributeTypeMemory
	AttributeTypeNetwork
	AttributeTypePhysicalDisk
	AttributeTypePowerSupply
	AttributeTypeTapeDrive
	AttributeTypeTemperature
	AttributeTypeVoltage
	AttributeTypeUnknown
)

// String returns the string representation of the AttributeType.
func (av AttributeType) String() string {
	switch av {
	case AttributeTypeBattery:
		return "battery"
	case AttributeTypeCpu:
		return "cpu"
	case AttributeTypeDiskController:
		return "disk_controller"
	case AttributeTypeEnclosure:
		return "enclosure"
	case AttributeTypeFan:
		return "fan"
	case AttributeTypeGpu:
		return "gpu"
	case AttributeTypeLogicalDisk:
		return "logical_disk"
	case AttributeTypeMemory:
		return "memory"
	case AttributeTypeNetwork:
		return "network"
	case AttributeTypePhysicalDisk:
		return "physical_disk"
	case AttributeTypePowerSupply:
		return "power_supply"
	case AttributeTypeTapeDrive:
		return "tape_drive"
	case AttributeTypeTemperature:
		return "temperature"
	case AttributeTypeVoltage:
		return "voltage"
	case AttributeTypeUnknown:
		return "unknown"
	}
	return ""
}

// MapAttributeType is a helper map of string to AttributeType attribute value.
var MapAttributeType = map[string]AttributeType{
	"battery":         AttributeTypeBattery,
	"cpu":             AttributeTypeCpu,
	"disk_controller": AttributeTypeDiskController,
	"enclosure":       AttributeTypeEnclosure,
	"fan":             AttributeTypeFan,
	"gpu":             AttributeTypeGpu,
	"logical_disk":    AttributeTypeLogicalDisk,
	"memory":          AttributeTypeMemory,
	"network":         AttributeTypeNetwork,
	"physical_disk":   AttributeTypePhysicalDisk,
	"power_supply":    AttributeTypePowerSupply,
	"tape_drive":      AttributeTypeTapeDrive,
	"temperature":     AttributeTypeTemperature,
	"voltage":         AttributeTypeVoltage,
	"unknown":         AttributeTypeUnknown,
}

var MetricsInfo = metricsInfo{
	HwStatus: metricInfo{
		Name: "hw.status",
	},
	HwTemperature: metricInfo{
		Name: "hw.temperature",
	},
	HwTemperatureLimit: metricInfo{
		Name: "hw.temperature.limit",
	},
}

type metricsInfo struct {
	HwStatus           metricInfo
	HwTemperature      metricInfo
	HwTemperatureLimit metricInfo
}

type metricInfo struct {
	Name string
}

type metricHwStatus struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills hw.status metric with initial data.
func (m *metricHwStatus) init() {
	m.data.SetName("hw.status")
	m.data.SetDescription("Operational status: 1 (true) or 0 (false) for each of the possible states.")
	m.data.SetUnit("1")
	m.data.SetEmptySum()
	m.data.Sum().SetIsMonotonic(false)
	m.data.Sum().SetAggregationTemporality(pmetric.AggregationTemporalityCumulative)
	m.data.Sum().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricHwStatus) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, idAttributeValue string, stateAttributeValue string, typeAttributeValue string, nameAttributeValue string, parentAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Sum().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("id", idAttributeValue)
	dp.Attributes().PutStr("state", stateAttributeValue)
	dp.Attributes().PutStr("type", typeAttributeValue)
	dp.Attributes().PutStr("name", nameAttributeValue)
	dp.Attributes().PutStr("parent", parentAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricHwStatus) updateCapacity() {
	if m.data.Sum().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Sum().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricHwStatus) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Sum().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricHwStatus(cfg MetricConfig) metricHwStatus {
	m := metricHwStatus{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricHwTemperature struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills hw.temperature metric with initial data.
func (m *metricHwTemperature) init() {
	m.data.SetName("hw.temperature")
	m.data.SetDescription("Temperature in degrees Celsius.")
	m.data.SetUnit("Cel")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricHwTemperature) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, idAttributeValue string, nameAttributeValue string, parentAttributeValue string, sensorLocationAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("id", idAttributeValue)
	dp.Attributes().PutStr("name", nameAttributeValue)
	dp.Attributes().PutStr("parent", parentAttributeValue)
	dp.Attributes().PutStr("sensor_location", sensorLocationAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricHwTemperature) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricHwTemperature) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricHwTemperature(cfg MetricConfig) metricHwTemperature {
	m := metricHwTemperature{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricHwTemperatureLimit struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills hw.temperature.limit metric with initial data.
func (m *metricHwTemperatureLimit) init() {
	m.data.SetName("hw.temperature.limit")
	m.data.SetDescription("Temperature limit in degrees Celsius.")
	m.data.SetUnit("Cel")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricHwTemperatureLimit) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val float64, idAttributeValue string, limitTypeAttributeValue string, nameAttributeValue string, parentAttributeValue string, sensorLocationAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetDoubleValue(val)
	dp.Attributes().PutStr("id", idAttributeValue)
	dp.Attributes().PutStr("limit_type", limitTypeAttributeValue)
	dp.Attributes().PutStr("name", nameAttributeValue)
	dp.Attributes().PutStr("parent", parentAttributeValue)
	dp.Attributes().PutStr("sensor_location", sensorLocationAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricHwTemperatureLimit) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricHwTemperatureLimit) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricHwTemperatureLimit(cfg MetricConfig) metricHwTemperatureLimit {
	m := metricHwTemperatureLimit{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                   MetricsBuilderConfig // config of the metrics builder.
	startTime                pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity          int                  // maximum observed number of metrics per resource.
	metricsBuffer            pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                component.BuildInfo  // contains version information.
	metricHwStatus           metricHwStatus
	metricHwTemperature      metricHwTemperature
	metricHwTemperatureLimit metricHwTemperatureLimit
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}
func NewMetricsBuilder(mbc MetricsBuilderConfig, settings scraper.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                   mbc,
		startTime:                pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:            pmetric.NewMetrics(),
		buildInfo:                settings.BuildInfo,
		metricHwStatus:           newMetricHwStatus(mbc.Metrics.HwStatus),
		metricHwTemperature:      newMetricHwTemperature(mbc.Metrics.HwTemperature),
		metricHwTemperatureLimit: newMetricHwTemperatureLimit(mbc.Metrics.HwTemperatureLimit),
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.SetSchemaUrl(conventions.SchemaURL)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName(ScopeName)
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricHwStatus.emit(ils.Metrics())
	mb.metricHwTemperature.emit(ils.Metrics())
	mb.metricHwTemperatureLimit.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordHwStatusDataPoint adds a data point to hw.status metric.
func (mb *MetricsBuilder) RecordHwStatusDataPoint(ts pcommon.Timestamp, val int64, idAttributeValue string, stateAttributeValue AttributeState, typeAttributeValue AttributeType, nameAttributeValue string, parentAttributeValue string) {
	mb.metricHwStatus.recordDataPoint(mb.startTime, ts, val, idAttributeValue, stateAttributeValue.String(), typeAttributeValue.String(), nameAttributeValue, parentAttributeValue)
}

// RecordHwTemperatureDataPoint adds a data point to hw.temperature metric.
func (mb *MetricsBuilder) RecordHwTemperatureDataPoint(ts pcommon.Timestamp, val float64, idAttributeValue string, nameAttributeValue string, parentAttributeValue string, sensorLocationAttributeValue string) {
	mb.metricHwTemperature.recordDataPoint(mb.startTime, ts, val, idAttributeValue, nameAttributeValue, parentAttributeValue, sensorLocationAttributeValue)
}

// RecordHwTemperatureLimitDataPoint adds a data point to hw.temperature.limit metric.
func (mb *MetricsBuilder) RecordHwTemperatureLimitDataPoint(ts pcommon.Timestamp, val float64, idAttributeValue string, limitTypeAttributeValue AttributeLimitType, nameAttributeValue string, parentAttributeValue string, sensorLocationAttributeValue string) {
	mb.metricHwTemperatureLimit.recordDataPoint(mb.startTime, ts, val, idAttributeValue, limitTypeAttributeValue.String(), nameAttributeValue, parentAttributeValue, sensorLocationAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
