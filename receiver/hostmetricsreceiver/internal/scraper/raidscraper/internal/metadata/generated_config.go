// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for raid metrics.
type MetricsConfig struct {
	MdBlocksSynced  MetricConfig `mapstructure:"md.blocks.synced"`
	MdBlocksTotal   MetricConfig `mapstructure:"md.blocks.total"`
	MdDisks         MetricConfig `mapstructure:"md.disks"`
	MdDisksRequired MetricConfig `mapstructure:"md.disks.required"`
	MdRaidDegraded  MetricConfig `mapstructure:"md.raid.degraded"`
	MdRaidDisks     MetricConfig `mapstructure:"md.raid.disks"`
	MdState         MetricConfig `mapstructure:"md.state"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		MdBlocksSynced: MetricConfig{
			Enabled: true,
		},
		MdBlocksTotal: MetricConfig{
			Enabled: true,
		},
		MdDisks: MetricConfig{
			Enabled: true,
		},
		MdDisksRequired: MetricConfig{
			Enabled: true,
		},
		MdRaidDegraded: MetricConfig{
			Enabled: true,
		},
		MdRaidDisks: MetricConfig{
			Enabled: true,
		},
		MdState: MetricConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for raid metrics builder.
type MetricsBuilderConfig struct {
	Metrics MetricsConfig `mapstructure:"metrics"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics: DefaultMetricsConfig(),
	}
}
