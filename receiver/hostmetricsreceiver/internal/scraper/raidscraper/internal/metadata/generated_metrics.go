// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/scraper"
	conventions "go.opentelemetry.io/otel/semconv/v1.9.0"
)

var MetricsInfo = metricsInfo{
	MdBlocksSynced: metricInfo{
		Name: "md.blocks.synced",
	},
	MdBlocksTotal: metricInfo{
		Name: "md.blocks.total",
	},
	MdDisks: metricInfo{
		Name: "md.disks",
	},
	MdDisksRequired: metricInfo{
		Name: "md.disks.required",
	},
	MdRaidDegraded: metricInfo{
		Name: "md.raid.degraded",
	},
	MdRaidDisks: metricInfo{
		Name: "md.raid.disks",
	},
	MdState: metricInfo{
		Name: "md.state",
	},
}

type metricsInfo struct {
	MdBlocksSynced  metricInfo
	MdBlocksTotal   metricInfo
	MdDisks         metricInfo
	MdDisksRequired metricInfo
	MdRaidDegraded  metricInfo
	MdRaidDisks     metricInfo
	MdState         metricInfo
}

type metricInfo struct {
	Name string
}

type metricMdBlocksSynced struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills md.blocks.synced metric with initial data.
func (m *metricMdBlocksSynced) init() {
	m.data.SetName("md.blocks.synced")
	m.data.SetDescription("Number of synced blocks on device")
	m.data.SetUnit("blocks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricMdBlocksSynced) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricMdBlocksSynced) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricMdBlocksSynced) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricMdBlocksSynced(cfg MetricConfig) metricMdBlocksSynced {
	m := metricMdBlocksSynced{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricMdBlocksTotal struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills md.blocks.total metric with initial data.
func (m *metricMdBlocksTotal) init() {
	m.data.SetName("md.blocks.total")
	m.data.SetDescription("Number of blocks on device")
	m.data.SetUnit("blocks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricMdBlocksTotal) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricMdBlocksTotal) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricMdBlocksTotal) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricMdBlocksTotal(cfg MetricConfig) metricMdBlocksTotal {
	m := metricMdBlocksTotal{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricMdDisks struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills md.disks metric with initial data.
func (m *metricMdDisks) init() {
	m.data.SetName("md.disks")
	m.data.SetDescription("Number of active/failed/spare disks of device.")
	m.data.SetUnit("blocks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricMdDisks) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string, stateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
	dp.Attributes().PutStr("state", stateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricMdDisks) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricMdDisks) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricMdDisks(cfg MetricConfig) metricMdDisks {
	m := metricMdDisks{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricMdDisksRequired struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills md.disks.required metric with initial data.
func (m *metricMdDisksRequired) init() {
	m.data.SetName("md.disks.required")
	m.data.SetDescription("Total number of disks of device.")
	m.data.SetUnit("blocks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricMdDisksRequired) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricMdDisksRequired) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricMdDisksRequired) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricMdDisksRequired(cfg MetricConfig) metricMdDisksRequired {
	m := metricMdDisksRequired{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricMdRaidDegraded struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills md.raid.degraded metric with initial data.
func (m *metricMdRaidDegraded) init() {
	m.data.SetName("md.raid.degraded")
	m.data.SetDescription("Number of degraded raid disks on device")
	m.data.SetUnit("disks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricMdRaidDegraded) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricMdRaidDegraded) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricMdRaidDegraded) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricMdRaidDegraded(cfg MetricConfig) metricMdRaidDegraded {
	m := metricMdRaidDegraded{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricMdRaidDisks struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills md.raid.disks metric with initial data.
func (m *metricMdRaidDisks) init() {
	m.data.SetName("md.raid.disks")
	m.data.SetDescription("Number of raid disks on device")
	m.data.SetUnit("disks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricMdRaidDisks) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricMdRaidDisks) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricMdRaidDisks) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricMdRaidDisks(cfg MetricConfig) metricMdRaidDisks {
	m := metricMdRaidDisks{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricMdState struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills md.state metric with initial data.
func (m *metricMdState) init() {
	m.data.SetName("md.state")
	m.data.SetDescription("Indicates the state of md-device")
	m.data.SetUnit("blocks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricMdState) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string, stateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
	dp.Attributes().PutStr("state", stateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricMdState) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricMdState) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricMdState(cfg MetricConfig) metricMdState {
	m := metricMdState{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                MetricsBuilderConfig // config of the metrics builder.
	startTime             pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity       int                  // maximum observed number of metrics per resource.
	metricsBuffer         pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo             component.BuildInfo  // contains version information.
	metricMdBlocksSynced  metricMdBlocksSynced
	metricMdBlocksTotal   metricMdBlocksTotal
	metricMdDisks         metricMdDisks
	metricMdDisksRequired metricMdDisksRequired
	metricMdRaidDegraded  metricMdRaidDegraded
	metricMdRaidDisks     metricMdRaidDisks
	metricMdState         metricMdState
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}
func NewMetricsBuilder(mbc MetricsBuilderConfig, settings scraper.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                mbc,
		startTime:             pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:         pmetric.NewMetrics(),
		buildInfo:             settings.BuildInfo,
		metricMdBlocksSynced:  newMetricMdBlocksSynced(mbc.Metrics.MdBlocksSynced),
		metricMdBlocksTotal:   newMetricMdBlocksTotal(mbc.Metrics.MdBlocksTotal),
		metricMdDisks:         newMetricMdDisks(mbc.Metrics.MdDisks),
		metricMdDisksRequired: newMetricMdDisksRequired(mbc.Metrics.MdDisksRequired),
		metricMdRaidDegraded:  newMetricMdRaidDegraded(mbc.Metrics.MdRaidDegraded),
		metricMdRaidDisks:     newMetricMdRaidDisks(mbc.Metrics.MdRaidDisks),
		metricMdState:         newMetricMdState(mbc.Metrics.MdState),
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.SetSchemaUrl(conventions.SchemaURL)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName(ScopeName)
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricMdBlocksSynced.emit(ils.Metrics())
	mb.metricMdBlocksTotal.emit(ils.Metrics())
	mb.metricMdDisks.emit(ils.Metrics())
	mb.metricMdDisksRequired.emit(ils.Metrics())
	mb.metricMdRaidDegraded.emit(ils.Metrics())
	mb.metricMdRaidDisks.emit(ils.Metrics())
	mb.metricMdState.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordMdBlocksSyncedDataPoint adds a data point to md.blocks.synced metric.
func (mb *MetricsBuilder) RecordMdBlocksSyncedDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	mb.metricMdBlocksSynced.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue)
}

// RecordMdBlocksTotalDataPoint adds a data point to md.blocks.total metric.
func (mb *MetricsBuilder) RecordMdBlocksTotalDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	mb.metricMdBlocksTotal.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue)
}

// RecordMdDisksDataPoint adds a data point to md.disks metric.
func (mb *MetricsBuilder) RecordMdDisksDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string, stateAttributeValue string) {
	mb.metricMdDisks.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue, stateAttributeValue)
}

// RecordMdDisksRequiredDataPoint adds a data point to md.disks.required metric.
func (mb *MetricsBuilder) RecordMdDisksRequiredDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	mb.metricMdDisksRequired.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue)
}

// RecordMdRaidDegradedDataPoint adds a data point to md.raid.degraded metric.
func (mb *MetricsBuilder) RecordMdRaidDegradedDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	mb.metricMdRaidDegraded.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue)
}

// RecordMdRaidDisksDataPoint adds a data point to md.raid.disks metric.
func (mb *MetricsBuilder) RecordMdRaidDisksDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	mb.metricMdRaidDisks.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue)
}

// RecordMdStateDataPoint adds a data point to md.state metric.
func (mb *MetricsBuilder) RecordMdStateDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string, stateAttributeValue string) {
	mb.metricMdState.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue, stateAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
