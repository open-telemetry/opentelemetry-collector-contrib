// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"time"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/scraper"
	conventions "go.opentelemetry.io/collector/semconv/v1.9.0"
)

var MetricsInfo = metricsInfo{
	SystemLinuxMdraidBlocksSynced: metricInfo{
		Name: "system.linux.mdraid.blocks.synced",
	},
	SystemLinuxMdraidBlocksTotal: metricInfo{
		Name: "system.linux.mdraid.blocks.total",
	},
	SystemLinuxMdraidDegradedRaidDisks: metricInfo{
		Name: "system.linux.mdraid.degraded_raid_disks",
	},
	SystemLinuxMdraidDisks: metricInfo{
		Name: "system.linux.mdraid.disks",
	},
	SystemLinuxMdraidDisksRequired: metricInfo{
		Name: "system.linux.mdraid.disks.required",
	},
	SystemLinuxMdraidRaidDisks: metricInfo{
		Name: "system.linux.mdraid.raid_disks",
	},
	SystemLinuxMdraidState: metricInfo{
		Name: "system.linux.mdraid.state",
	},
}

type metricsInfo struct {
	SystemLinuxMdraidBlocksSynced      metricInfo
	SystemLinuxMdraidBlocksTotal       metricInfo
	SystemLinuxMdraidDegradedRaidDisks metricInfo
	SystemLinuxMdraidDisks             metricInfo
	SystemLinuxMdraidDisksRequired     metricInfo
	SystemLinuxMdraidRaidDisks         metricInfo
	SystemLinuxMdraidState             metricInfo
}

type metricInfo struct {
	Name string
}

type metricSystemLinuxMdraidBlocksSynced struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.linux.mdraid.blocks.synced metric with initial data.
func (m *metricSystemLinuxMdraidBlocksSynced) init() {
	m.data.SetName("system.linux.mdraid.blocks.synced")
	m.data.SetDescription("Number of synced blocks on device")
	m.data.SetUnit("blocks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemLinuxMdraidBlocksSynced) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemLinuxMdraidBlocksSynced) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemLinuxMdraidBlocksSynced) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemLinuxMdraidBlocksSynced(cfg MetricConfig) metricSystemLinuxMdraidBlocksSynced {
	m := metricSystemLinuxMdraidBlocksSynced{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemLinuxMdraidBlocksTotal struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.linux.mdraid.blocks.total metric with initial data.
func (m *metricSystemLinuxMdraidBlocksTotal) init() {
	m.data.SetName("system.linux.mdraid.blocks.total")
	m.data.SetDescription("Number of blocks on device")
	m.data.SetUnit("blocks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemLinuxMdraidBlocksTotal) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemLinuxMdraidBlocksTotal) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemLinuxMdraidBlocksTotal) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemLinuxMdraidBlocksTotal(cfg MetricConfig) metricSystemLinuxMdraidBlocksTotal {
	m := metricSystemLinuxMdraidBlocksTotal{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemLinuxMdraidDegradedRaidDisks struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.linux.mdraid.degraded_raid_disks metric with initial data.
func (m *metricSystemLinuxMdraidDegradedRaidDisks) init() {
	m.data.SetName("system.linux.mdraid.degraded_raid_disks")
	m.data.SetDescription("Number of degraded raid disks on device")
	m.data.SetUnit("disks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemLinuxMdraidDegradedRaidDisks) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemLinuxMdraidDegradedRaidDisks) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemLinuxMdraidDegradedRaidDisks) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemLinuxMdraidDegradedRaidDisks(cfg MetricConfig) metricSystemLinuxMdraidDegradedRaidDisks {
	m := metricSystemLinuxMdraidDegradedRaidDisks{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemLinuxMdraidDisks struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.linux.mdraid.disks metric with initial data.
func (m *metricSystemLinuxMdraidDisks) init() {
	m.data.SetName("system.linux.mdraid.disks")
	m.data.SetDescription("Number of active/failed/spare disks of device.")
	m.data.SetUnit("blocks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemLinuxMdraidDisks) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string, stateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
	dp.Attributes().PutStr("state", stateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemLinuxMdraidDisks) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemLinuxMdraidDisks) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemLinuxMdraidDisks(cfg MetricConfig) metricSystemLinuxMdraidDisks {
	m := metricSystemLinuxMdraidDisks{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemLinuxMdraidDisksRequired struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.linux.mdraid.disks.required metric with initial data.
func (m *metricSystemLinuxMdraidDisksRequired) init() {
	m.data.SetName("system.linux.mdraid.disks.required")
	m.data.SetDescription("Total number of disks of device.")
	m.data.SetUnit("blocks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemLinuxMdraidDisksRequired) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemLinuxMdraidDisksRequired) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemLinuxMdraidDisksRequired) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemLinuxMdraidDisksRequired(cfg MetricConfig) metricSystemLinuxMdraidDisksRequired {
	m := metricSystemLinuxMdraidDisksRequired{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemLinuxMdraidRaidDisks struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.linux.mdraid.raid_disks metric with initial data.
func (m *metricSystemLinuxMdraidRaidDisks) init() {
	m.data.SetName("system.linux.mdraid.raid_disks")
	m.data.SetDescription("Number of raid disks in a fully functional array")
	m.data.SetUnit("disks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemLinuxMdraidRaidDisks) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemLinuxMdraidRaidDisks) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemLinuxMdraidRaidDisks) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemLinuxMdraidRaidDisks(cfg MetricConfig) metricSystemLinuxMdraidRaidDisks {
	m := metricSystemLinuxMdraidRaidDisks{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

type metricSystemLinuxMdraidState struct {
	data     pmetric.Metric // data buffer for generated metric.
	config   MetricConfig   // metric config provided by user.
	capacity int            // max observed number of data points added to the metric.
}

// init fills system.linux.mdraid.state metric with initial data.
func (m *metricSystemLinuxMdraidState) init() {
	m.data.SetName("system.linux.mdraid.state")
	m.data.SetDescription("Indicates the state of md-device")
	m.data.SetUnit("blocks")
	m.data.SetEmptyGauge()
	m.data.Gauge().DataPoints().EnsureCapacity(m.capacity)
}

func (m *metricSystemLinuxMdraidState) recordDataPoint(start pcommon.Timestamp, ts pcommon.Timestamp, val int64, deviceAttributeValue string, stateAttributeValue string) {
	if !m.config.Enabled {
		return
	}
	dp := m.data.Gauge().DataPoints().AppendEmpty()
	dp.SetStartTimestamp(start)
	dp.SetTimestamp(ts)
	dp.SetIntValue(val)
	dp.Attributes().PutStr("device", deviceAttributeValue)
	dp.Attributes().PutStr("state", stateAttributeValue)
}

// updateCapacity saves max length of data point slices that will be used for the slice capacity.
func (m *metricSystemLinuxMdraidState) updateCapacity() {
	if m.data.Gauge().DataPoints().Len() > m.capacity {
		m.capacity = m.data.Gauge().DataPoints().Len()
	}
}

// emit appends recorded metric data to a metrics slice and prepares it for recording another set of data points.
func (m *metricSystemLinuxMdraidState) emit(metrics pmetric.MetricSlice) {
	if m.config.Enabled && m.data.Gauge().DataPoints().Len() > 0 {
		m.updateCapacity()
		m.data.MoveTo(metrics.AppendEmpty())
		m.init()
	}
}

func newMetricSystemLinuxMdraidState(cfg MetricConfig) metricSystemLinuxMdraidState {
	m := metricSystemLinuxMdraidState{config: cfg}
	if cfg.Enabled {
		m.data = pmetric.NewMetric()
		m.init()
	}
	return m
}

// MetricsBuilder provides an interface for scrapers to report metrics while taking care of all the transformations
// required to produce metric representation defined in metadata and user config.
type MetricsBuilder struct {
	config                                   MetricsBuilderConfig // config of the metrics builder.
	startTime                                pcommon.Timestamp    // start time that will be applied to all recorded data points.
	metricsCapacity                          int                  // maximum observed number of metrics per resource.
	metricsBuffer                            pmetric.Metrics      // accumulates metrics data before emitting.
	buildInfo                                component.BuildInfo  // contains version information.
	metricSystemLinuxMdraidBlocksSynced      metricSystemLinuxMdraidBlocksSynced
	metricSystemLinuxMdraidBlocksTotal       metricSystemLinuxMdraidBlocksTotal
	metricSystemLinuxMdraidDegradedRaidDisks metricSystemLinuxMdraidDegradedRaidDisks
	metricSystemLinuxMdraidDisks             metricSystemLinuxMdraidDisks
	metricSystemLinuxMdraidDisksRequired     metricSystemLinuxMdraidDisksRequired
	metricSystemLinuxMdraidRaidDisks         metricSystemLinuxMdraidRaidDisks
	metricSystemLinuxMdraidState             metricSystemLinuxMdraidState
}

// MetricBuilderOption applies changes to default metrics builder.
type MetricBuilderOption interface {
	apply(*MetricsBuilder)
}

type metricBuilderOptionFunc func(mb *MetricsBuilder)

func (mbof metricBuilderOptionFunc) apply(mb *MetricsBuilder) {
	mbof(mb)
}

// WithStartTime sets startTime on the metrics builder.
func WithStartTime(startTime pcommon.Timestamp) MetricBuilderOption {
	return metricBuilderOptionFunc(func(mb *MetricsBuilder) {
		mb.startTime = startTime
	})
}
func NewMetricsBuilder(mbc MetricsBuilderConfig, settings scraper.Settings, options ...MetricBuilderOption) *MetricsBuilder {
	mb := &MetricsBuilder{
		config:                                   mbc,
		startTime:                                pcommon.NewTimestampFromTime(time.Now()),
		metricsBuffer:                            pmetric.NewMetrics(),
		buildInfo:                                settings.BuildInfo,
		metricSystemLinuxMdraidBlocksSynced:      newMetricSystemLinuxMdraidBlocksSynced(mbc.Metrics.SystemLinuxMdraidBlocksSynced),
		metricSystemLinuxMdraidBlocksTotal:       newMetricSystemLinuxMdraidBlocksTotal(mbc.Metrics.SystemLinuxMdraidBlocksTotal),
		metricSystemLinuxMdraidDegradedRaidDisks: newMetricSystemLinuxMdraidDegradedRaidDisks(mbc.Metrics.SystemLinuxMdraidDegradedRaidDisks),
		metricSystemLinuxMdraidDisks:             newMetricSystemLinuxMdraidDisks(mbc.Metrics.SystemLinuxMdraidDisks),
		metricSystemLinuxMdraidDisksRequired:     newMetricSystemLinuxMdraidDisksRequired(mbc.Metrics.SystemLinuxMdraidDisksRequired),
		metricSystemLinuxMdraidRaidDisks:         newMetricSystemLinuxMdraidRaidDisks(mbc.Metrics.SystemLinuxMdraidRaidDisks),
		metricSystemLinuxMdraidState:             newMetricSystemLinuxMdraidState(mbc.Metrics.SystemLinuxMdraidState),
	}

	for _, op := range options {
		op.apply(mb)
	}
	return mb
}

// updateCapacity updates max length of metrics and resource attributes that will be used for the slice capacity.
func (mb *MetricsBuilder) updateCapacity(rm pmetric.ResourceMetrics) {
	if mb.metricsCapacity < rm.ScopeMetrics().At(0).Metrics().Len() {
		mb.metricsCapacity = rm.ScopeMetrics().At(0).Metrics().Len()
	}
}

// ResourceMetricsOption applies changes to provided resource metrics.
type ResourceMetricsOption interface {
	apply(pmetric.ResourceMetrics)
}

type resourceMetricsOptionFunc func(pmetric.ResourceMetrics)

func (rmof resourceMetricsOptionFunc) apply(rm pmetric.ResourceMetrics) {
	rmof(rm)
}

// WithResource sets the provided resource on the emitted ResourceMetrics.
// It's recommended to use ResourceBuilder to create the resource.
func WithResource(res pcommon.Resource) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		res.CopyTo(rm.Resource())
	})
}

// WithStartTimeOverride overrides start time for all the resource metrics data points.
// This option should be only used if different start time has to be set on metrics coming from different resources.
func WithStartTimeOverride(start pcommon.Timestamp) ResourceMetricsOption {
	return resourceMetricsOptionFunc(func(rm pmetric.ResourceMetrics) {
		var dps pmetric.NumberDataPointSlice
		metrics := rm.ScopeMetrics().At(0).Metrics()
		for i := 0; i < metrics.Len(); i++ {
			switch metrics.At(i).Type() {
			case pmetric.MetricTypeGauge:
				dps = metrics.At(i).Gauge().DataPoints()
			case pmetric.MetricTypeSum:
				dps = metrics.At(i).Sum().DataPoints()
			}
			for j := 0; j < dps.Len(); j++ {
				dps.At(j).SetStartTimestamp(start)
			}
		}
	})
}

// EmitForResource saves all the generated metrics under a new resource and updates the internal state to be ready for
// recording another set of data points as part of another resource. This function can be helpful when one scraper
// needs to emit metrics from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceMetricsOption arguments.
func (mb *MetricsBuilder) EmitForResource(options ...ResourceMetricsOption) {
	rm := pmetric.NewResourceMetrics()
	rm.SetSchemaUrl(conventions.SchemaURL)
	ils := rm.ScopeMetrics().AppendEmpty()
	ils.Scope().SetName(ScopeName)
	ils.Scope().SetVersion(mb.buildInfo.Version)
	ils.Metrics().EnsureCapacity(mb.metricsCapacity)
	mb.metricSystemLinuxMdraidBlocksSynced.emit(ils.Metrics())
	mb.metricSystemLinuxMdraidBlocksTotal.emit(ils.Metrics())
	mb.metricSystemLinuxMdraidDegradedRaidDisks.emit(ils.Metrics())
	mb.metricSystemLinuxMdraidDisks.emit(ils.Metrics())
	mb.metricSystemLinuxMdraidDisksRequired.emit(ils.Metrics())
	mb.metricSystemLinuxMdraidRaidDisks.emit(ils.Metrics())
	mb.metricSystemLinuxMdraidState.emit(ils.Metrics())

	for _, op := range options {
		op.apply(rm)
	}

	if ils.Metrics().Len() > 0 {
		mb.updateCapacity(rm)
		rm.MoveTo(mb.metricsBuffer.ResourceMetrics().AppendEmpty())
	}
}

// Emit returns all the metrics accumulated by the metrics builder and updates the internal state to be ready for
// recording another set of metrics. This function will be responsible for applying all the transformations required to
// produce metric representation defined in metadata and user config, e.g. delta or cumulative.
func (mb *MetricsBuilder) Emit(options ...ResourceMetricsOption) pmetric.Metrics {
	mb.EmitForResource(options...)
	metrics := mb.metricsBuffer
	mb.metricsBuffer = pmetric.NewMetrics()
	return metrics
}

// RecordSystemLinuxMdraidBlocksSyncedDataPoint adds a data point to system.linux.mdraid.blocks.synced metric.
func (mb *MetricsBuilder) RecordSystemLinuxMdraidBlocksSyncedDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	mb.metricSystemLinuxMdraidBlocksSynced.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue)
}

// RecordSystemLinuxMdraidBlocksTotalDataPoint adds a data point to system.linux.mdraid.blocks.total metric.
func (mb *MetricsBuilder) RecordSystemLinuxMdraidBlocksTotalDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	mb.metricSystemLinuxMdraidBlocksTotal.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue)
}

// RecordSystemLinuxMdraidDegradedRaidDisksDataPoint adds a data point to system.linux.mdraid.degraded_raid_disks metric.
func (mb *MetricsBuilder) RecordSystemLinuxMdraidDegradedRaidDisksDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	mb.metricSystemLinuxMdraidDegradedRaidDisks.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue)
}

// RecordSystemLinuxMdraidDisksDataPoint adds a data point to system.linux.mdraid.disks metric.
func (mb *MetricsBuilder) RecordSystemLinuxMdraidDisksDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string, stateAttributeValue string) {
	mb.metricSystemLinuxMdraidDisks.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue, stateAttributeValue)
}

// RecordSystemLinuxMdraidDisksRequiredDataPoint adds a data point to system.linux.mdraid.disks.required metric.
func (mb *MetricsBuilder) RecordSystemLinuxMdraidDisksRequiredDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	mb.metricSystemLinuxMdraidDisksRequired.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue)
}

// RecordSystemLinuxMdraidRaidDisksDataPoint adds a data point to system.linux.mdraid.raid_disks metric.
func (mb *MetricsBuilder) RecordSystemLinuxMdraidRaidDisksDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string) {
	mb.metricSystemLinuxMdraidRaidDisks.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue)
}

// RecordSystemLinuxMdraidStateDataPoint adds a data point to system.linux.mdraid.state metric.
func (mb *MetricsBuilder) RecordSystemLinuxMdraidStateDataPoint(ts pcommon.Timestamp, val int64, deviceAttributeValue string, stateAttributeValue string) {
	mb.metricSystemLinuxMdraidState.recordDataPoint(mb.startTime, ts, val, deviceAttributeValue, stateAttributeValue)
}

// Reset resets metrics builder to its initial state. It should be used when external metrics source is restarted,
// and metrics builder should update its startTime and reset it's internal state accordingly.
func (mb *MetricsBuilder) Reset(options ...MetricBuilderOption) {
	mb.startTime = pcommon.NewTimestampFromTime(time.Now())
	for _, op := range options {
		op.apply(mb)
	}
}
