// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/elasticsearchreceiver/internal/model"
)

// MockElasticsearchClient is an autogenerated mock type for the elasticsearchClient type
type MockElasticsearchClient struct {
	mock.Mock
}

// ClusterHealth provides a mock function with given fields: ctx
func (_m *MockElasticsearchClient) ClusterHealth(ctx context.Context) (*model.ClusterHealth, error) {
	ret := _m.Called(ctx)

	var r0 *model.ClusterHealth
	if rf, ok := ret.Get(0).(func(context.Context) *model.ClusterHealth); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ClusterHealth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterMetadata provides a mock function with given fields: ctx
func (_m *MockElasticsearchClient) ClusterMetadata(ctx context.Context) (*model.ClusterMetadataResponse, error) {
	ret := _m.Called(ctx)

	var r0 *model.ClusterMetadataResponse
	if rf, ok := ret.Get(0).(func(context.Context) *model.ClusterMetadataResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ClusterMetadataResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClusterStats provides a mock function with given fields: ctx, nodes
func (_m *MockElasticsearchClient) ClusterStats(ctx context.Context, nodes []string) (*model.ClusterStats, error) {
	ret := _m.Called(ctx, nodes)

	var r0 *model.ClusterStats
	if rf, ok := ret.Get(0).(func(context.Context, []string) *model.ClusterStats); ok {
		r0 = rf(ctx, nodes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ClusterStats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, nodes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexStats provides a mock function with given fields: ctx, indices
func (_m *MockElasticsearchClient) IndexStats(ctx context.Context, indices []string) (*model.IndexStats, error) {
	ret := _m.Called(ctx, indices)

	var r0 *model.IndexStats
	if rf, ok := ret.Get(0).(func(context.Context, []string) *model.IndexStats); ok {
		r0 = rf(ctx, indices)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.IndexStats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, indices)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Nodes provides a mock function with given fields: ctx, nodes
func (_m *MockElasticsearchClient) Nodes(ctx context.Context, nodes []string) (*model.Nodes, error) {
	ret := _m.Called(ctx, nodes)

	var r0 *model.Nodes
	if rf, ok := ret.Get(0).(func(context.Context, []string) *model.Nodes); ok {
		r0 = rf(ctx, nodes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Nodes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, nodes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeStats provides a mock function with given fields: ctx, nodes
func (_m *MockElasticsearchClient) NodeStats(ctx context.Context, nodes []string) (*model.NodeStats, error) {
	ret := _m.Called(ctx, nodes)

	var r0 *model.NodeStats
	if rf, ok := ret.Get(0).(func(context.Context, []string) *model.NodeStats); ok {
		r0 = rf(ctx, nodes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.NodeStats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, nodes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockElasticsearchClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockElasticsearchClient creates a new instance of MockElasticsearchClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockElasticsearchClient(t mockConstructorTestingTNewMockElasticsearchClient) *MockElasticsearchClient {
	mock := &MockElasticsearchClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
