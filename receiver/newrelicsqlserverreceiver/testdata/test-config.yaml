# OpenTelemetry Collector configuration for testing New Relic SQL Server receiver
receivers:
  newrelicsqlserver:
    # SQL Server connection settings
    hostname: "localhost"  # Change to your SQL Server host
    port: "1433"
    username: "sa"  # Change to your SQL Server username
    password: "YourStrong!Passw0rd"  # Change to your SQL Server password
    # instance: "MSSQLSERVER"  # Uncomment if using named instance
    
    # Collection settings
    collection_interval: 30s
    timeout: 30s
    
    # Feature toggles
    enable_buffer_metrics: true
    enable_database_reserve_metrics: true
    enable_disk_metrics_in_bytes: true
    enable_query_monitoring: false  # Start with false, enable later for testing
    
    # SSL/TLS settings (adjust based on your SQL Server config)
    enable_ssl: false
    trust_server_certificate: true  # For testing only
    
    # Performance settings
    max_concurrent_workers: 5

processors:
  batch:
    timeout: 10s
    send_batch_size: 1024

exporters:
  # Console exporter for debugging
  logging:
    loglevel: debug
    
  # OTLP exporter to send to your OTEL endpoint
  otlp:
    endpoint: "http://localhost:4317"  # Change to your OTEL endpoint
    tls:
      insecure: true
    headers:
      # Add any required headers (API keys, etc.)
      # api-key: "your-api-key"

  # Alternative: OTLP HTTP exporter
  otlphttp:
    endpoint: "http://localhost:4318"  # HTTP endpoint
    tls:
      insecure: true
    headers:
      content-type: "application/x-protobuf"

service:
  telemetry:
    logs:
      level: debug
      development: true
    metrics:
      level: detailed
  
  pipelines:
    metrics:
      receivers: [newrelicsqlserver]
      processors: [batch]
      exporters: [logging, otlp]  # Start with logging, then add otlp

  extensions: []
