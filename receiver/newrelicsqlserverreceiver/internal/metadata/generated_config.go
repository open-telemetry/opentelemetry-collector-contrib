// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for newrelicsqlserver metrics.
type MetricsConfig struct {
	SqlserverBufferPoolSizeBytes MetricConfig `mapstructure:"sqlserver.buffer_pool.size_bytes"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		SqlserverBufferPoolSizeBytes: MetricConfig{
			Enabled: true,
		},
	}
}

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (rac *ResourceAttributeConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(rac)
	if err != nil {
		return err
	}
	rac.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// ResourceAttributesConfig provides config for newrelicsqlserver resource attributes.
type ResourceAttributesConfig struct {
	DbSystem      ResourceAttributeConfig `mapstructure:"db.system"`
	ServerAddress ResourceAttributeConfig `mapstructure:"server.address"`
	ServerPort    ResourceAttributeConfig `mapstructure:"server.port"`
	ServiceName   ResourceAttributeConfig `mapstructure:"service.name"`
}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		DbSystem: ResourceAttributeConfig{
			Enabled: true,
		},
		ServerAddress: ResourceAttributeConfig{
			Enabled: true,
		},
		ServerPort: ResourceAttributeConfig{
			Enabled: true,
		},
		ServiceName: ResourceAttributeConfig{
			Enabled: true,
		},
	}
}
