// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"context"

	"go.opentelemetry.io/collector/component"
	"go.opentelemetry.io/collector/filter"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/plog"
	"go.opentelemetry.io/collector/receiver"
	"go.opentelemetry.io/otel/trace"
)

type eventDbServerQuerySample struct {
	data   plog.LogRecordSlice // data buffer for generated log records.
	config EventConfig         // event config provided by user.
}

func (e *eventDbServerQuerySample) recordEvent(ctx context.Context, timestamp pcommon.Timestamp, dbQueryTextAttributeValue string, dbSystemNameAttributeValue string, userNameAttributeValue string, clientAddressAttributeValue string, oracledbPlanHashValueAttributeValue string, oracledbSQLIDAttributeValue string, oracledbChildNumberAttributeValue string, oracledbSidAttributeValue string, oracledbSerialAttributeValue string, oracledbProcessAttributeValue string, oracledbSchemanameAttributeValue string, oracledbProgramAttributeValue string, oracledbModuleAttributeValue string, oracledbStatusAttributeValue string, oracledbStateAttributeValue string, oracledbWaitClassAttributeValue string, oracledbEventAttributeValue string, oracledbObjectNameAttributeValue string, oracledbObjectTypeAttributeValue string, oracledbOsuserAttributeValue string, oracledbDurationSecAttributeValue float64) {
	if !e.config.Enabled {
		return
	}
	lr := e.data.AppendEmpty()
	lr.SetEventName("db.server.query_sample")
	lr.SetTimestamp(timestamp)

	if span := trace.SpanContextFromContext(ctx); span.IsValid() {
		lr.SetTraceID(pcommon.TraceID(span.TraceID()))
		lr.SetSpanID(pcommon.SpanID(span.SpanID()))
	}

	lr.Attributes().PutStr("db.query.text", dbQueryTextAttributeValue)
	lr.Attributes().PutStr("db.system.name", dbSystemNameAttributeValue)
	lr.Attributes().PutStr("user.name", userNameAttributeValue)
	lr.Attributes().PutStr("client.address", clientAddressAttributeValue)
	lr.Attributes().PutStr("oracledb.plan_hash_value", oracledbPlanHashValueAttributeValue)
	lr.Attributes().PutStr("oracledb.sql_id", oracledbSQLIDAttributeValue)
	lr.Attributes().PutStr("oracledb.child_number", oracledbChildNumberAttributeValue)
	lr.Attributes().PutStr("oracledb.sid", oracledbSidAttributeValue)
	lr.Attributes().PutStr("oracledb.serial", oracledbSerialAttributeValue)
	lr.Attributes().PutStr("oracledb.process", oracledbProcessAttributeValue)
	lr.Attributes().PutStr("oracledb.schemaname", oracledbSchemanameAttributeValue)
	lr.Attributes().PutStr("oracledb.program", oracledbProgramAttributeValue)
	lr.Attributes().PutStr("oracledb.module", oracledbModuleAttributeValue)
	lr.Attributes().PutStr("oracledb.status", oracledbStatusAttributeValue)
	lr.Attributes().PutStr("oracledb.state", oracledbStateAttributeValue)
	lr.Attributes().PutStr("oracledb.wait_class", oracledbWaitClassAttributeValue)
	lr.Attributes().PutStr("oracledb.event", oracledbEventAttributeValue)
	lr.Attributes().PutStr("oracledb.object_name", oracledbObjectNameAttributeValue)
	lr.Attributes().PutStr("oracledb.object_type", oracledbObjectTypeAttributeValue)
	lr.Attributes().PutStr("oracledb.osuser", oracledbOsuserAttributeValue)
	lr.Attributes().PutDouble("oracledb.duration_sec", oracledbDurationSecAttributeValue)
}

// emit appends recorded event data to a events slice and prepares it for recording another set of log records.
func (e *eventDbServerQuerySample) emit(lrs plog.LogRecordSlice) {
	if e.config.Enabled && e.data.Len() > 0 {
		e.data.MoveAndAppendTo(lrs)
	}
}

func newEventDbServerQuerySample(cfg EventConfig) eventDbServerQuerySample {
	e := eventDbServerQuerySample{config: cfg}
	if cfg.Enabled {
		e.data = plog.NewLogRecordSlice()
	}
	return e
}

type eventDbServerTopQuery struct {
	data   plog.LogRecordSlice // data buffer for generated log records.
	config EventConfig         // event config provided by user.
}

func (e *eventDbServerTopQuery) recordEvent(ctx context.Context, timestamp pcommon.Timestamp, dbSystemNameAttributeValue string, dbServerNameAttributeValue string, dbQueryTextAttributeValue string, oracledbQueryPlanAttributeValue string, oracledbSQLIDAttributeValue string, oracledbChildNumberAttributeValue string, oracledbApplicationWaitTimeAttributeValue float64, oracledbBufferGetsAttributeValue int64, oracledbClusterWaitTimeAttributeValue float64, oracledbConcurrencyWaitTimeAttributeValue float64, oracledbCPUTimeAttributeValue float64, oracledbDirectReadsAttributeValue int64, oracledbDirectWritesAttributeValue int64, oracledbDiskReadsAttributeValue int64, oracledbElapsedTimeAttributeValue float64, oracledbExecutionsAttributeValue int64, oracledbPhysicalReadBytesAttributeValue int64, oracledbPhysicalReadRequestsAttributeValue int64, oracledbPhysicalWriteBytesAttributeValue int64, oracledbPhysicalWriteRequestsAttributeValue int64, oracledbRowsProcessedAttributeValue int64, oracledbUserIoWaitTimeAttributeValue float64) {
	if !e.config.Enabled {
		return
	}
	lr := e.data.AppendEmpty()
	lr.SetEventName("db.server.top_query")
	lr.SetTimestamp(timestamp)

	if span := trace.SpanContextFromContext(ctx); span.IsValid() {
		lr.SetTraceID(pcommon.TraceID(span.TraceID()))
		lr.SetSpanID(pcommon.SpanID(span.SpanID()))
	}

	lr.Attributes().PutStr("db.system.name", dbSystemNameAttributeValue)
	lr.Attributes().PutStr("db.server.name", dbServerNameAttributeValue)
	lr.Attributes().PutStr("db.query.text", dbQueryTextAttributeValue)
	lr.Attributes().PutStr("oracledb.query_plan", oracledbQueryPlanAttributeValue)
	lr.Attributes().PutStr("oracledb.sql_id", oracledbSQLIDAttributeValue)
	lr.Attributes().PutStr("oracledb.child_number", oracledbChildNumberAttributeValue)
	lr.Attributes().PutDouble("oracledb.application_wait_time", oracledbApplicationWaitTimeAttributeValue)
	lr.Attributes().PutInt("oracledb.buffer_gets", oracledbBufferGetsAttributeValue)
	lr.Attributes().PutDouble("oracledb.cluster_wait_time", oracledbClusterWaitTimeAttributeValue)
	lr.Attributes().PutDouble("oracledb.concurrency_wait_time", oracledbConcurrencyWaitTimeAttributeValue)
	lr.Attributes().PutDouble("oracledb.cpu_time", oracledbCPUTimeAttributeValue)
	lr.Attributes().PutInt("oracledb.direct_reads", oracledbDirectReadsAttributeValue)
	lr.Attributes().PutInt("oracledb.direct_writes", oracledbDirectWritesAttributeValue)
	lr.Attributes().PutInt("oracledb.disk_reads", oracledbDiskReadsAttributeValue)
	lr.Attributes().PutDouble("oracledb.elapsed_time", oracledbElapsedTimeAttributeValue)
	lr.Attributes().PutInt("oracledb.executions", oracledbExecutionsAttributeValue)
	lr.Attributes().PutInt("oracledb.physical_read_bytes", oracledbPhysicalReadBytesAttributeValue)
	lr.Attributes().PutInt("oracledb.physical_read_requests", oracledbPhysicalReadRequestsAttributeValue)
	lr.Attributes().PutInt("oracledb.physical_write_bytes", oracledbPhysicalWriteBytesAttributeValue)
	lr.Attributes().PutInt("oracledb.physical_write_requests", oracledbPhysicalWriteRequestsAttributeValue)
	lr.Attributes().PutInt("oracledb.rows_processed", oracledbRowsProcessedAttributeValue)
	lr.Attributes().PutDouble("oracledb.user_io_wait_time", oracledbUserIoWaitTimeAttributeValue)
}

// emit appends recorded event data to a events slice and prepares it for recording another set of log records.
func (e *eventDbServerTopQuery) emit(lrs plog.LogRecordSlice) {
	if e.config.Enabled && e.data.Len() > 0 {
		e.data.MoveAndAppendTo(lrs)
	}
}

func newEventDbServerTopQuery(cfg EventConfig) eventDbServerTopQuery {
	e := eventDbServerTopQuery{config: cfg}
	if cfg.Enabled {
		e.data = plog.NewLogRecordSlice()
	}
	return e
}

// LogsBuilder provides an interface for scrapers to report logs while taking care of all the transformations
// required to produce log representation defined in metadata and user config.
type LogsBuilder struct {
	config                         LogsBuilderConfig // config of the logs builder.
	logsBuffer                     plog.Logs
	logRecordsBuffer               plog.LogRecordSlice
	buildInfo                      component.BuildInfo // contains version information.
	resourceAttributeIncludeFilter map[string]filter.Filter
	resourceAttributeExcludeFilter map[string]filter.Filter
	eventDbServerQuerySample       eventDbServerQuerySample
	eventDbServerTopQuery          eventDbServerTopQuery
}

// LogBuilderOption applies changes to default logs builder.
type LogBuilderOption interface {
	apply(*LogsBuilder)
}

func NewLogsBuilder(lbc LogsBuilderConfig, settings receiver.Settings) *LogsBuilder {
	lb := &LogsBuilder{
		config:                         lbc,
		logsBuffer:                     plog.NewLogs(),
		logRecordsBuffer:               plog.NewLogRecordSlice(),
		buildInfo:                      settings.BuildInfo,
		eventDbServerQuerySample:       newEventDbServerQuerySample(lbc.Events.DbServerQuerySample),
		eventDbServerTopQuery:          newEventDbServerTopQuery(lbc.Events.DbServerTopQuery),
		resourceAttributeIncludeFilter: make(map[string]filter.Filter),
		resourceAttributeExcludeFilter: make(map[string]filter.Filter),
	}
	if lbc.ResourceAttributes.HostName.EventsInclude != nil {
		lb.resourceAttributeIncludeFilter["host.name"] = filter.CreateFilter(lbc.ResourceAttributes.HostName.EventsInclude)
	}
	if lbc.ResourceAttributes.HostName.EventsExclude != nil {
		lb.resourceAttributeExcludeFilter["host.name"] = filter.CreateFilter(lbc.ResourceAttributes.HostName.EventsExclude)
	}
	if lbc.ResourceAttributes.OracledbInstanceName.EventsInclude != nil {
		lb.resourceAttributeIncludeFilter["oracledb.instance.name"] = filter.CreateFilter(lbc.ResourceAttributes.OracledbInstanceName.EventsInclude)
	}
	if lbc.ResourceAttributes.OracledbInstanceName.EventsExclude != nil {
		lb.resourceAttributeExcludeFilter["oracledb.instance.name"] = filter.CreateFilter(lbc.ResourceAttributes.OracledbInstanceName.EventsExclude)
	}

	return lb
}

// NewResourceBuilder returns a new resource builder that should be used to build a resource associated with for the emitted logs.
func (lb *LogsBuilder) NewResourceBuilder() *ResourceBuilder {
	return NewResourceBuilder(lb.config.ResourceAttributes)
}

// ResourceLogsOption applies changes to provided resource logs.
type ResourceLogsOption interface {
	apply(plog.ResourceLogs)
}

type resourceLogsOptionFunc func(plog.ResourceLogs)

func (rlof resourceLogsOptionFunc) apply(rl plog.ResourceLogs) {
	rlof(rl)
}

// WithLogsResource sets the provided resource on the emitted ResourceLogs.
// It's recommended to use ResourceBuilder to create the resource.
func WithLogsResource(res pcommon.Resource) ResourceLogsOption {
	return resourceLogsOptionFunc(func(rl plog.ResourceLogs) {
		res.CopyTo(rl.Resource())
	})
}

// AppendLogRecord adds a log record to the logs builder.
func (lb *LogsBuilder) AppendLogRecord(lr plog.LogRecord) {
	lr.MoveTo(lb.logRecordsBuffer.AppendEmpty())
}

// EmitForResource saves all the generated logs under a new resource and updates the internal state to be ready for
// recording another set of log records as part of another resource. This function can be helpful when one scraper
// needs to emit logs from several resources. Otherwise calling this function is not required,
// just `Emit` function can be called instead.
// Resource attributes should be provided as ResourceLogsOption arguments.
func (lb *LogsBuilder) EmitForResource(options ...ResourceLogsOption) {
	rl := plog.NewResourceLogs()
	ils := rl.ScopeLogs().AppendEmpty()
	ils.Scope().SetName(ScopeName)
	ils.Scope().SetVersion(lb.buildInfo.Version)
	lb.eventDbServerQuerySample.emit(ils.LogRecords())
	lb.eventDbServerTopQuery.emit(ils.LogRecords())

	for _, op := range options {
		op.apply(rl)
	}

	if lb.logRecordsBuffer.Len() > 0 {
		lb.logRecordsBuffer.MoveAndAppendTo(ils.LogRecords())
		lb.logRecordsBuffer = plog.NewLogRecordSlice()
	}

	for attr, filter := range lb.resourceAttributeIncludeFilter {
		if val, ok := rl.Resource().Attributes().Get(attr); ok && !filter.Matches(val.AsString()) {
			return
		}
	}
	for attr, filter := range lb.resourceAttributeExcludeFilter {
		if val, ok := rl.Resource().Attributes().Get(attr); ok && filter.Matches(val.AsString()) {
			return
		}
	}

	if ils.LogRecords().Len() > 0 {
		rl.MoveTo(lb.logsBuffer.ResourceLogs().AppendEmpty())
	}
}

// Emit returns all the logs accumulated by the logs builder and updates the internal state to be ready for
// recording another set of logs. This function will be responsible for applying all the transformations required to
// produce logs representation defined in metadata and user config.
func (lb *LogsBuilder) Emit(options ...ResourceLogsOption) plog.Logs {
	lb.EmitForResource(options...)
	logs := lb.logsBuffer
	lb.logsBuffer = plog.NewLogs()
	return logs
}

// RecordDbServerQuerySampleEvent adds a log record of db.server.query_sample event.
func (lb *LogsBuilder) RecordDbServerQuerySampleEvent(ctx context.Context, timestamp pcommon.Timestamp, dbQueryTextAttributeValue string, dbSystemNameAttributeValue string, userNameAttributeValue string, clientAddressAttributeValue string, oracledbPlanHashValueAttributeValue string, oracledbSQLIDAttributeValue string, oracledbChildNumberAttributeValue string, oracledbSidAttributeValue string, oracledbSerialAttributeValue string, oracledbProcessAttributeValue string, oracledbSchemanameAttributeValue string, oracledbProgramAttributeValue string, oracledbModuleAttributeValue string, oracledbStatusAttributeValue string, oracledbStateAttributeValue string, oracledbWaitClassAttributeValue string, oracledbEventAttributeValue string, oracledbObjectNameAttributeValue string, oracledbObjectTypeAttributeValue string, oracledbOsuserAttributeValue string, oracledbDurationSecAttributeValue float64) {
	lb.eventDbServerQuerySample.recordEvent(ctx, timestamp, dbQueryTextAttributeValue, dbSystemNameAttributeValue, userNameAttributeValue, clientAddressAttributeValue, oracledbPlanHashValueAttributeValue, oracledbSQLIDAttributeValue, oracledbChildNumberAttributeValue, oracledbSidAttributeValue, oracledbSerialAttributeValue, oracledbProcessAttributeValue, oracledbSchemanameAttributeValue, oracledbProgramAttributeValue, oracledbModuleAttributeValue, oracledbStatusAttributeValue, oracledbStateAttributeValue, oracledbWaitClassAttributeValue, oracledbEventAttributeValue, oracledbObjectNameAttributeValue, oracledbObjectTypeAttributeValue, oracledbOsuserAttributeValue, oracledbDurationSecAttributeValue)
}

// RecordDbServerTopQueryEvent adds a log record of db.server.top_query event.
func (lb *LogsBuilder) RecordDbServerTopQueryEvent(ctx context.Context, timestamp pcommon.Timestamp, dbSystemNameAttributeValue string, dbServerNameAttributeValue string, dbQueryTextAttributeValue string, oracledbQueryPlanAttributeValue string, oracledbSQLIDAttributeValue string, oracledbChildNumberAttributeValue string, oracledbApplicationWaitTimeAttributeValue float64, oracledbBufferGetsAttributeValue int64, oracledbClusterWaitTimeAttributeValue float64, oracledbConcurrencyWaitTimeAttributeValue float64, oracledbCPUTimeAttributeValue float64, oracledbDirectReadsAttributeValue int64, oracledbDirectWritesAttributeValue int64, oracledbDiskReadsAttributeValue int64, oracledbElapsedTimeAttributeValue float64, oracledbExecutionsAttributeValue int64, oracledbPhysicalReadBytesAttributeValue int64, oracledbPhysicalReadRequestsAttributeValue int64, oracledbPhysicalWriteBytesAttributeValue int64, oracledbPhysicalWriteRequestsAttributeValue int64, oracledbRowsProcessedAttributeValue int64, oracledbUserIoWaitTimeAttributeValue float64) {
	lb.eventDbServerTopQuery.recordEvent(ctx, timestamp, dbSystemNameAttributeValue, dbServerNameAttributeValue, dbQueryTextAttributeValue, oracledbQueryPlanAttributeValue, oracledbSQLIDAttributeValue, oracledbChildNumberAttributeValue, oracledbApplicationWaitTimeAttributeValue, oracledbBufferGetsAttributeValue, oracledbClusterWaitTimeAttributeValue, oracledbConcurrencyWaitTimeAttributeValue, oracledbCPUTimeAttributeValue, oracledbDirectReadsAttributeValue, oracledbDirectWritesAttributeValue, oracledbDiskReadsAttributeValue, oracledbElapsedTimeAttributeValue, oracledbExecutionsAttributeValue, oracledbPhysicalReadBytesAttributeValue, oracledbPhysicalReadRequestsAttributeValue, oracledbPhysicalWriteBytesAttributeValue, oracledbPhysicalWriteRequestsAttributeValue, oracledbRowsProcessedAttributeValue, oracledbUserIoWaitTimeAttributeValue)
}
